
DSP_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e28  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00004e28  00004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000007c  20000000  00004e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00003c34  2000007c  00004eac  0002007c  2**2
                  ALLOC
  4 .stack        00002000  20003cb0  00008ae0  0002007c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  7 .debug_info   000257ed  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003897  00000000  00000000  000458ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000595b  00000000  00000000  00049181  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005f8  00000000  00000000  0004eadc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006c8  00000000  00000000  0004f0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001aa5f  00000000  00000000  0004f79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b6a6  00000000  00000000  0006a1fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008f32d  00000000  00000000  000758a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001680  00000000  00000000  00104bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000003c  00000000  00000000  00106250  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      00000072  00000000  00000000  0010628c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 5c 00 20 c5 18 00 00 c1 18 00 00 c1 18 00 00     .\. ............
	...
      2c:	b5 1a 00 00 00 00 00 00 00 00 00 00 21 1b 00 00     ............!...
      3c:	65 1b 00 00 c1 18 00 00 c1 18 00 00 c1 18 00 00     e...............
      4c:	c1 18 00 00 c1 18 00 00 c1 18 00 00 c1 18 00 00     ................
      5c:	c1 18 00 00 c1 18 00 00 c1 18 00 00 c1 18 00 00     ................
      6c:	c1 18 00 00 c1 18 00 00 c1 18 00 00 c1 18 00 00     ................
      7c:	c1 18 00 00 c1 18 00 00 c1 18 00 00 c1 18 00 00     ................
      8c:	c1 18 00 00 c1 18 00 00 00 00 00 00 00 00 00 00     ................
      9c:	c1 18 00 00 c1 18 00 00 c1 18 00 00 c1 18 00 00     ................
      ac:	c1 18 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000007c 	.word	0x2000007c
      d4:	00000000 	.word	0x00000000
      d8:	00004e30 	.word	0x00004e30

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000080 	.word	0x20000080
     108:	00004e30 	.word	0x00004e30
     10c:	00004e30 	.word	0x00004e30
     110:	00000000 	.word	0x00000000

00000114 <ADXL345_ReadRegister>:
}
/******************************************************************************
* low Level functions
******************************************************************************/

status_code_genare_t ADXL345_ReadRegister(ADXL_345 *sensor, uint8_t reg, uint8_t *rx_data, uint16_t length){
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46d6      	mov	lr, sl
     118:	464f      	mov	r7, r9
     11a:	b580      	push	{r7, lr}
     11c:	b085      	sub	sp, #20
     11e:	0007      	movs	r7, r0
     120:	9201      	str	r2, [sp, #4]
     122:	9302      	str	r3, [sp, #8]
     124:	ab02      	add	r3, sp, #8
     126:	71d9      	strb	r1, [r3, #7]
     128:	3307      	adds	r3, #7
	
	sensor->master_packet->data_length = (uint16_t)1;
     12a:	2201      	movs	r2, #1
     12c:	6981      	ldr	r1, [r0, #24]
     12e:	804a      	strh	r2, [r1, #2]
	sensor->master_packet->data = &reg;
     130:	6982      	ldr	r2, [r0, #24]
     132:	6053      	str	r3, [r2, #4]

	status_code_genare_t err = i2c_master_write_packet_wait_no_stop(sensor->i2c_master,sensor->master_packet);
     134:	6981      	ldr	r1, [r0, #24]
     136:	6940      	ldr	r0, [r0, #20]
     138:	4b23      	ldr	r3, [pc, #140]	; (1c8 <ADXL345_ReadRegister+0xb4>)
     13a:	4798      	blx	r3
     13c:	9000      	str	r0, [sp, #0]
	if(err != STATUS_OK){
     13e:	2800      	cmp	r0, #0
     140:	d005      	beq.n	14e <ADXL345_ReadRegister+0x3a>
	
	/* Delay between consecutive reads / writes */
	delay_us(25);
	
	return err;
}
     142:	9800      	ldr	r0, [sp, #0]
     144:	b005      	add	sp, #20
     146:	bc0c      	pop	{r2, r3}
     148:	4691      	mov	r9, r2
     14a:	469a      	mov	sl, r3
     14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	delay_us(25);
     14e:	2000      	movs	r0, #0
     150:	4e1e      	ldr	r6, [pc, #120]	; (1cc <ADXL345_ReadRegister+0xb8>)
     152:	47b0      	blx	r6
     154:	0004      	movs	r4, r0
     156:	2500      	movs	r5, #0
     158:	0f83      	lsrs	r3, r0, #30
     15a:	0082      	lsls	r2, r0, #2
     15c:	1912      	adds	r2, r2, r4
     15e:	416b      	adcs	r3, r5
     160:	0f94      	lsrs	r4, r2, #30
     162:	0099      	lsls	r1, r3, #2
     164:	4321      	orrs	r1, r4
     166:	0090      	lsls	r0, r2, #2
     168:	1880      	adds	r0, r0, r2
     16a:	4159      	adcs	r1, r3
     16c:	4c18      	ldr	r4, [pc, #96]	; (1d0 <ADXL345_ReadRegister+0xbc>)
     16e:	2500      	movs	r5, #0
     170:	1900      	adds	r0, r0, r4
     172:	4169      	adcs	r1, r5
     174:	4b17      	ldr	r3, [pc, #92]	; (1d4 <ADXL345_ReadRegister+0xc0>)
     176:	469a      	mov	sl, r3
     178:	4a17      	ldr	r2, [pc, #92]	; (1d8 <ADXL345_ReadRegister+0xc4>)
     17a:	2300      	movs	r3, #0
     17c:	47d0      	blx	sl
     17e:	4b17      	ldr	r3, [pc, #92]	; (1dc <ADXL345_ReadRegister+0xc8>)
     180:	4699      	mov	r9, r3
     182:	4798      	blx	r3
	sensor->master_packet->data_length = length;
     184:	69bb      	ldr	r3, [r7, #24]
     186:	466a      	mov	r2, sp
     188:	8912      	ldrh	r2, [r2, #8]
     18a:	805a      	strh	r2, [r3, #2]
	sensor->master_packet->data = rx_data;
     18c:	69bb      	ldr	r3, [r7, #24]
     18e:	9a01      	ldr	r2, [sp, #4]
     190:	605a      	str	r2, [r3, #4]
	err = i2c_master_read_packet_wait(sensor->i2c_master,sensor->master_packet);
     192:	69b9      	ldr	r1, [r7, #24]
     194:	6978      	ldr	r0, [r7, #20]
     196:	4b12      	ldr	r3, [pc, #72]	; (1e0 <ADXL345_ReadRegister+0xcc>)
     198:	4798      	blx	r3
     19a:	9000      	str	r0, [sp, #0]
	delay_us(25);
     19c:	2000      	movs	r0, #0
     19e:	47b0      	blx	r6
     1a0:	0006      	movs	r6, r0
     1a2:	2700      	movs	r7, #0
     1a4:	0f83      	lsrs	r3, r0, #30
     1a6:	0082      	lsls	r2, r0, #2
     1a8:	1992      	adds	r2, r2, r6
     1aa:	417b      	adcs	r3, r7
     1ac:	0f96      	lsrs	r6, r2, #30
     1ae:	0099      	lsls	r1, r3, #2
     1b0:	4331      	orrs	r1, r6
     1b2:	0090      	lsls	r0, r2, #2
     1b4:	1880      	adds	r0, r0, r2
     1b6:	4159      	adcs	r1, r3
     1b8:	1900      	adds	r0, r0, r4
     1ba:	4169      	adcs	r1, r5
     1bc:	4a06      	ldr	r2, [pc, #24]	; (1d8 <ADXL345_ReadRegister+0xc4>)
     1be:	2300      	movs	r3, #0
     1c0:	47d0      	blx	sl
     1c2:	47c8      	blx	r9
	return err;
     1c4:	e7bd      	b.n	142 <ADXL345_ReadRegister+0x2e>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	000009b5 	.word	0x000009b5
     1cc:	00001651 	.word	0x00001651
     1d0:	006acfbf 	.word	0x006acfbf
     1d4:	00002611 	.word	0x00002611
     1d8:	006acfc0 	.word	0x006acfc0
     1dc:	20000001 	.word	0x20000001
     1e0:	0000098d 	.word	0x0000098d

000001e4 <ADXL345_get_data>:
uint8_t ADXL345_get_data(ADXL_345 *sensor){
     1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e6:	46d6      	mov	lr, sl
     1e8:	464f      	mov	r7, r9
     1ea:	4646      	mov	r6, r8
     1ec:	b5c0      	push	{r6, r7, lr}
     1ee:	b082      	sub	sp, #8
     1f0:	0004      	movs	r4, r0
	uint8_t read_buffer[6] = {0,0,0,0,0,0};
     1f2:	2206      	movs	r2, #6
     1f4:	2100      	movs	r1, #0
     1f6:	4668      	mov	r0, sp
     1f8:	4b1f      	ldr	r3, [pc, #124]	; (278 <ADXL345_get_data+0x94>)
     1fa:	4798      	blx	r3
	status_check = ADXL345_ReadRegister(sensor, ADXL345_DATAX0, read_buffer, 6);
     1fc:	2306      	movs	r3, #6
     1fe:	466a      	mov	r2, sp
     200:	2132      	movs	r1, #50	; 0x32
     202:	0020      	movs	r0, r4
     204:	4d1d      	ldr	r5, [pc, #116]	; (27c <ADXL345_get_data+0x98>)
     206:	47a8      	blx	r5
     208:	4680      	mov	r8, r0
	x = ((int16_t)read_buffer[1] << 8) + read_buffer[0];
     20a:	466b      	mov	r3, sp
     20c:	785b      	ldrb	r3, [r3, #1]
     20e:	021b      	lsls	r3, r3, #8
     210:	466a      	mov	r2, sp
     212:	7810      	ldrb	r0, [r2, #0]
     214:	18c0      	adds	r0, r0, r3
     216:	b200      	sxth	r0, r0
	y = ((int16_t)read_buffer[3] << 8) + read_buffer[2];
     218:	78d3      	ldrb	r3, [r2, #3]
     21a:	021b      	lsls	r3, r3, #8
     21c:	7897      	ldrb	r7, [r2, #2]
     21e:	18ff      	adds	r7, r7, r3
     220:	b23f      	sxth	r7, r7
	z = ((int16_t)read_buffer[5] << 8) + read_buffer[4];
     222:	7953      	ldrb	r3, [r2, #5]
     224:	021b      	lsls	r3, r3, #8
     226:	7915      	ldrb	r5, [r2, #4]
     228:	18ed      	adds	r5, r5, r3
     22a:	b22d      	sxth	r5, r5
	sensor->acc_raw[0] = x;
     22c:	8020      	strh	r0, [r4, #0]
	sensor->acc_raw[1] = y;
     22e:	8067      	strh	r7, [r4, #2]
	sensor->acc_raw[2] = z;
     230:	80a5      	strh	r5, [r4, #4]
	x_acc = x * MGM2G_VALUE; 
     232:	4e13      	ldr	r6, [pc, #76]	; (280 <ADXL345_get_data+0x9c>)
     234:	47b0      	blx	r6
     236:	4b13      	ldr	r3, [pc, #76]	; (284 <ADXL345_get_data+0xa0>)
     238:	469a      	mov	sl, r3
     23a:	4a13      	ldr	r2, [pc, #76]	; (288 <ADXL345_get_data+0xa4>)
     23c:	4b13      	ldr	r3, [pc, #76]	; (28c <ADXL345_get_data+0xa8>)
     23e:	47d0      	blx	sl
     240:	4b13      	ldr	r3, [pc, #76]	; (290 <ADXL345_get_data+0xac>)
     242:	4699      	mov	r9, r3
     244:	4798      	blx	r3
     246:	60a0      	str	r0, [r4, #8]
	y_acc = y * MGM2G_VALUE;
     248:	0038      	movs	r0, r7
     24a:	47b0      	blx	r6
     24c:	4a0e      	ldr	r2, [pc, #56]	; (288 <ADXL345_get_data+0xa4>)
     24e:	4b0f      	ldr	r3, [pc, #60]	; (28c <ADXL345_get_data+0xa8>)
     250:	47d0      	blx	sl
     252:	47c8      	blx	r9
     254:	60e0      	str	r0, [r4, #12]
	z_acc = z * MGM2G_VALUE;
     256:	0028      	movs	r0, r5
     258:	47b0      	blx	r6
     25a:	4a0b      	ldr	r2, [pc, #44]	; (288 <ADXL345_get_data+0xa4>)
     25c:	4b0b      	ldr	r3, [pc, #44]	; (28c <ADXL345_get_data+0xa8>)
     25e:	47d0      	blx	sl
     260:	47c8      	blx	r9
     262:	6120      	str	r0, [r4, #16]
	if(status_check != STATUS_OK){
     264:	4640      	mov	r0, r8
     266:	1e43      	subs	r3, r0, #1
     268:	4198      	sbcs	r0, r3
	return error;
     26a:	b2c0      	uxtb	r0, r0
}
     26c:	b002      	add	sp, #8
     26e:	bc1c      	pop	{r2, r3, r4}
     270:	4690      	mov	r8, r2
     272:	4699      	mov	r9, r3
     274:	46a2      	mov	sl, r4
     276:	bdf0      	pop	{r4, r5, r6, r7, pc}
     278:	000042e5 	.word	0x000042e5
     27c:	00000115 	.word	0x00000115
     280:	00004041 	.word	0x00004041
     284:	000034ad 	.word	0x000034ad
     288:	8e8a71de 	.word	0x8e8a71de
     28c:	3f6ff2e4 	.word	0x3f6ff2e4
     290:	00004135 	.word	0x00004135

00000294 <ADXL345_WriteRegister>:
status_code_genare_t ADXL345_WriteRegister(ADXL_345 *sensor, uint8_t reg, uint8_t *tx_data, uint16_t length){
     294:	b570      	push	{r4, r5, r6, lr}
     296:	b084      	sub	sp, #16
	
	/*Create a local buffer to combine register address and tx data*/
	uint8_t local_buffer[10];
	
	/*Add register address*/
	local_buffer[0] = reg;
     298:	ac01      	add	r4, sp, #4
     29a:	7021      	strb	r1, [r4, #0]
	
	/*Copy tx buffer into our local buffer*/
	for(int i = 0; i < length; i++){
     29c:	1e1d      	subs	r5, r3, #0
     29e:	dd07      	ble.n	2b0 <ADXL345_WriteRegister+0x1c>
     2a0:	2100      	movs	r1, #0
		local_buffer[i+1] = tx_data[i];
     2a2:	0026      	movs	r6, r4
     2a4:	3101      	adds	r1, #1
     2a6:	7814      	ldrb	r4, [r2, #0]
     2a8:	558c      	strb	r4, [r1, r6]
     2aa:	3201      	adds	r2, #1
	for(int i = 0; i < length; i++){
     2ac:	42a9      	cmp	r1, r5
     2ae:	dbf9      	blt.n	2a4 <ADXL345_WriteRegister+0x10>
	}
	
	sensor->master_packet->data_length = (length + 1);
     2b0:	3301      	adds	r3, #1
     2b2:	6982      	ldr	r2, [r0, #24]
     2b4:	8053      	strh	r3, [r2, #2]
	sensor->master_packet->data = local_buffer;
     2b6:	6983      	ldr	r3, [r0, #24]
     2b8:	aa01      	add	r2, sp, #4
     2ba:	605a      	str	r2, [r3, #4]
	
	status_code_genare_t err = i2c_master_write_packet_wait(sensor->i2c_master,sensor->master_packet);
     2bc:	6981      	ldr	r1, [r0, #24]
     2be:	6940      	ldr	r0, [r0, #20]
     2c0:	4b0f      	ldr	r3, [pc, #60]	; (300 <ADXL345_WriteRegister+0x6c>)
     2c2:	4798      	blx	r3
     2c4:	0004      	movs	r4, r0
	
	/* Delay between consecutive reads / writes */
	delay_us(25);
     2c6:	2000      	movs	r0, #0
     2c8:	4b0e      	ldr	r3, [pc, #56]	; (304 <ADXL345_WriteRegister+0x70>)
     2ca:	4798      	blx	r3
     2cc:	0002      	movs	r2, r0
     2ce:	2300      	movs	r3, #0
     2d0:	0f91      	lsrs	r1, r2, #30
     2d2:	0090      	lsls	r0, r2, #2
     2d4:	1880      	adds	r0, r0, r2
     2d6:	4159      	adcs	r1, r3
     2d8:	0f85      	lsrs	r5, r0, #30
     2da:	008b      	lsls	r3, r1, #2
     2dc:	432b      	orrs	r3, r5
     2de:	0082      	lsls	r2, r0, #2
     2e0:	1880      	adds	r0, r0, r2
     2e2:	4159      	adcs	r1, r3
     2e4:	4a08      	ldr	r2, [pc, #32]	; (308 <ADXL345_WriteRegister+0x74>)
     2e6:	2300      	movs	r3, #0
     2e8:	1880      	adds	r0, r0, r2
     2ea:	4159      	adcs	r1, r3
     2ec:	4a07      	ldr	r2, [pc, #28]	; (30c <ADXL345_WriteRegister+0x78>)
     2ee:	2300      	movs	r3, #0
     2f0:	4d07      	ldr	r5, [pc, #28]	; (310 <ADXL345_WriteRegister+0x7c>)
     2f2:	47a8      	blx	r5
     2f4:	4b07      	ldr	r3, [pc, #28]	; (314 <ADXL345_WriteRegister+0x80>)
     2f6:	4798      	blx	r3
	
	return err;

     2f8:	0020      	movs	r0, r4
     2fa:	b004      	add	sp, #16
     2fc:	bd70      	pop	{r4, r5, r6, pc}
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	000009a1 	.word	0x000009a1
     304:	00001651 	.word	0x00001651
     308:	006acfbf 	.word	0x006acfbf
     30c:	006acfc0 	.word	0x006acfc0
     310:	00002611 	.word	0x00002611
     314:	20000001 	.word	0x20000001

00000318 <ADXL345_init>:
uint8_t ADXL345_init(ADXL_345 *sensor, struct i2c_master_module *i2c_handler, struct i2c_master_packet *packet_handler){
     318:	b570      	push	{r4, r5, r6, lr}
     31a:	b082      	sub	sp, #8
     31c:	0004      	movs	r4, r0
	sensor->i2c_master = i2c_handler;
     31e:	6141      	str	r1, [r0, #20]
	sensor->master_packet = packet_handler;
     320:	6182      	str	r2, [r0, #24]
	sensor->master_packet->data_length = (uint16_t)1;
     322:	2301      	movs	r3, #1
     324:	8053      	strh	r3, [r2, #2]
    sensor->master_packet->data = NULL;
     326:	6982      	ldr	r2, [r0, #24]
     328:	2300      	movs	r3, #0
     32a:	6053      	str	r3, [r2, #4]
	sensor->master_packet->address = ADXL345_ADR;
     32c:	2253      	movs	r2, #83	; 0x53
     32e:	6981      	ldr	r1, [r0, #24]
     330:	800a      	strh	r2, [r1, #0]
	sensor->master_packet->high_speed = false;	
     332:	6982      	ldr	r2, [r0, #24]
     334:	7253      	strb	r3, [r2, #9]
	sensor->master_packet->ten_bit_address = false;
     336:	6982      	ldr	r2, [r0, #24]
     338:	7213      	strb	r3, [r2, #8]
	sensor->acc_mps[0] = 0;
     33a:	2200      	movs	r2, #0
     33c:	6082      	str	r2, [r0, #8]
	sensor->acc_mps[1] = 0;
     33e:	60c2      	str	r2, [r0, #12]
	sensor->acc_mps[2] = 0;
     340:	6102      	str	r2, [r0, #16]
	sensor->acc_raw[0] = 0;
     342:	8003      	strh	r3, [r0, #0]
	sensor->acc_raw[1] = 0;
     344:	8043      	strh	r3, [r0, #2]
	sensor->acc_raw[2] = 0;
     346:	8083      	strh	r3, [r0, #4]
	status_check = ADXL345_ReadRegister(sensor, ADXL345_ID_REG, &rx_data, 1);
     348:	466b      	mov	r3, sp
     34a:	1dde      	adds	r6, r3, #7
     34c:	2301      	movs	r3, #1
     34e:	0032      	movs	r2, r6
     350:	2100      	movs	r1, #0
     352:	4d13      	ldr	r5, [pc, #76]	; (3a0 <ADXL345_init+0x88>)
     354:	47a8      	blx	r5
	if(status_check != STATUS_OK){
     356:	1e45      	subs	r5, r0, #1
     358:	41a8      	sbcs	r0, r5
	uint8_t error = 0;
     35a:	b2c5      	uxtb	r5, r0
	if(rx_data != ADXL345_ID){
     35c:	7833      	ldrb	r3, [r6, #0]
     35e:	2be5      	cmp	r3, #229	; 0xe5
     360:	d003      	beq.n	36a <ADXL345_init+0x52>
		error++;
     362:	3501      	adds	r5, #1
}
     364:	0028      	movs	r0, r5
     366:	b002      	add	sp, #8
     368:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t Reg_Data = 0x0A;
     36a:	466b      	mov	r3, sp
     36c:	1d9a      	adds	r2, r3, #6
     36e:	230a      	movs	r3, #10
     370:	7013      	strb	r3, [r2, #0]
	status_check = ADXL345_WriteRegister(sensor, ADXL_345_BW, &Reg_Data, 1);
     372:	3b09      	subs	r3, #9
     374:	212c      	movs	r1, #44	; 0x2c
     376:	0020      	movs	r0, r4
     378:	4e0a      	ldr	r6, [pc, #40]	; (3a4 <ADXL345_init+0x8c>)
     37a:	47b0      	blx	r6
	if(status_check != STATUS_OK){
     37c:	2800      	cmp	r0, #0
     37e:	d001      	beq.n	384 <ADXL345_init+0x6c>
		error++;
     380:	3501      	adds	r5, #1
     382:	b2ed      	uxtb	r5, r5
	Reg_Data = 0x08;
     384:	466b      	mov	r3, sp
     386:	1d9a      	adds	r2, r3, #6
     388:	2308      	movs	r3, #8
     38a:	7013      	strb	r3, [r2, #0]
	status_check = ADXL345_WriteRegister(sensor, ADXL345_POWER_CNTRL, &Reg_Data, 1);
     38c:	3b07      	subs	r3, #7
     38e:	212d      	movs	r1, #45	; 0x2d
     390:	0020      	movs	r0, r4
     392:	4c04      	ldr	r4, [pc, #16]	; (3a4 <ADXL345_init+0x8c>)
     394:	47a0      	blx	r4
	if(status_check != STATUS_OK){
     396:	2800      	cmp	r0, #0
     398:	d0e4      	beq.n	364 <ADXL345_init+0x4c>
		error++;
     39a:	3501      	adds	r5, #1
     39c:	b2ed      	uxtb	r5, r5
     39e:	e7e1      	b.n	364 <ADXL345_init+0x4c>
     3a0:	00000115 	.word	0x00000115
     3a4:	00000295 	.word	0x00000295

000003a8 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     3a8:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     3aa:	2207      	movs	r2, #7
     3ac:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     3ae:	421a      	tst	r2, r3
     3b0:	d1fc      	bne.n	3ac <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     3b2:	4770      	bx	lr

000003b4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b6:	46d6      	mov	lr, sl
     3b8:	464f      	mov	r7, r9
     3ba:	4646      	mov	r6, r8
     3bc:	b5c0      	push	{r6, r7, lr}
     3be:	b08a      	sub	sp, #40	; 0x28
     3c0:	0006      	movs	r6, r0
     3c2:	000f      	movs	r7, r1
     3c4:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     3c6:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     3c8:	0008      	movs	r0, r1
     3ca:	4b97      	ldr	r3, [pc, #604]	; (628 <i2c_master_init+0x274>)
     3cc:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     3ce:	4a97      	ldr	r2, [pc, #604]	; (62c <i2c_master_init+0x278>)
     3d0:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     3d2:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     3d4:	2301      	movs	r3, #1
     3d6:	40ab      	lsls	r3, r5
     3d8:	430b      	orrs	r3, r1
     3da:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     3dc:	a909      	add	r1, sp, #36	; 0x24
     3de:	7b23      	ldrb	r3, [r4, #12]
     3e0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     3e2:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     3e4:	b2c5      	uxtb	r5, r0
     3e6:	0028      	movs	r0, r5
     3e8:	4b91      	ldr	r3, [pc, #580]	; (630 <i2c_master_init+0x27c>)
     3ea:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     3ec:	0028      	movs	r0, r5
     3ee:	4b91      	ldr	r3, [pc, #580]	; (634 <i2c_master_init+0x280>)
     3f0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     3f2:	7b20      	ldrb	r0, [r4, #12]
     3f4:	2100      	movs	r1, #0
     3f6:	4b90      	ldr	r3, [pc, #576]	; (638 <i2c_master_init+0x284>)
     3f8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     3fa:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     3fc:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     3fe:	079b      	lsls	r3, r3, #30
     400:	d505      	bpl.n	40e <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     402:	b00a      	add	sp, #40	; 0x28
     404:	bc1c      	pop	{r2, r3, r4}
     406:	4690      	mov	r8, r2
     408:	4699      	mov	r9, r3
     40a:	46a2      	mov	sl, r4
     40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     40e:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     410:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     412:	07db      	lsls	r3, r3, #31
     414:	d4f5      	bmi.n	402 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     416:	2314      	movs	r3, #20
     418:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     41a:	6833      	ldr	r3, [r6, #0]
     41c:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     41e:	0018      	movs	r0, r3
     420:	4b81      	ldr	r3, [pc, #516]	; (628 <i2c_master_init+0x274>)
     422:	4798      	blx	r3
     424:	0005      	movs	r5, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     426:	2380      	movs	r3, #128	; 0x80
     428:	aa08      	add	r2, sp, #32
     42a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     42c:	2300      	movs	r3, #0
     42e:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     430:	2201      	movs	r2, #1
     432:	a908      	add	r1, sp, #32
     434:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     436:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     438:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     43a:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     43c:	2800      	cmp	r0, #0
     43e:	d100      	bne.n	442 <i2c_master_init+0x8e>
     440:	e0af      	b.n	5a2 <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
     442:	ab08      	add	r3, sp, #32
     444:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     446:	2302      	movs	r3, #2
     448:	aa08      	add	r2, sp, #32
     44a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     44c:	0c00      	lsrs	r0, r0, #16
     44e:	b2c0      	uxtb	r0, r0
     450:	0011      	movs	r1, r2
     452:	4b7a      	ldr	r3, [pc, #488]	; (63c <i2c_master_init+0x288>)
     454:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     456:	2f00      	cmp	r7, #0
     458:	d100      	bne.n	45c <i2c_master_init+0xa8>
     45a:	e0a7      	b.n	5ac <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
     45c:	ab08      	add	r3, sp, #32
     45e:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     460:	2302      	movs	r3, #2
     462:	aa08      	add	r2, sp, #32
     464:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     466:	0c3f      	lsrs	r7, r7, #16
     468:	b2f8      	uxtb	r0, r7
     46a:	0011      	movs	r1, r2
     46c:	4b73      	ldr	r3, [pc, #460]	; (63c <i2c_master_init+0x288>)
     46e:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     470:	8aa3      	ldrh	r3, [r4, #20]
     472:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     474:	8ae3      	ldrh	r3, [r4, #22]
     476:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     478:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     47a:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     47c:	2b00      	cmp	r3, #0
     47e:	d104      	bne.n	48a <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     480:	4b6f      	ldr	r3, [pc, #444]	; (640 <i2c_master_init+0x28c>)
     482:	789b      	ldrb	r3, [r3, #2]
     484:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     486:	0fdb      	lsrs	r3, r3, #31
     488:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     48a:	68a1      	ldr	r1, [r4, #8]
     48c:	6923      	ldr	r3, [r4, #16]
     48e:	430b      	orrs	r3, r1
     490:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     492:	2224      	movs	r2, #36	; 0x24
     494:	5ca2      	ldrb	r2, [r4, r2]
     496:	2a00      	cmp	r2, #0
     498:	d002      	beq.n	4a0 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     49a:	2280      	movs	r2, #128	; 0x80
     49c:	05d2      	lsls	r2, r2, #23
     49e:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     4a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     4a2:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     4a4:	222c      	movs	r2, #44	; 0x2c
     4a6:	5ca2      	ldrb	r2, [r4, r2]
     4a8:	2a00      	cmp	r2, #0
     4aa:	d103      	bne.n	4b4 <i2c_master_init+0x100>
     4ac:	2280      	movs	r2, #128	; 0x80
     4ae:	0492      	lsls	r2, r2, #18
     4b0:	4291      	cmp	r1, r2
     4b2:	d102      	bne.n	4ba <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     4b4:	2280      	movs	r2, #128	; 0x80
     4b6:	0512      	lsls	r2, r2, #20
     4b8:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     4ba:	222d      	movs	r2, #45	; 0x2d
     4bc:	5ca2      	ldrb	r2, [r4, r2]
     4be:	2a00      	cmp	r2, #0
     4c0:	d002      	beq.n	4c8 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     4c2:	2280      	movs	r2, #128	; 0x80
     4c4:	0412      	lsls	r2, r2, #16
     4c6:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     4c8:	222e      	movs	r2, #46	; 0x2e
     4ca:	5ca2      	ldrb	r2, [r4, r2]
     4cc:	2a00      	cmp	r2, #0
     4ce:	d002      	beq.n	4d6 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     4d0:	2280      	movs	r2, #128	; 0x80
     4d2:	03d2      	lsls	r2, r2, #15
     4d4:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     4d6:	4642      	mov	r2, r8
     4d8:	6812      	ldr	r2, [r2, #0]
     4da:	4313      	orrs	r3, r2
     4dc:	4642      	mov	r2, r8
     4de:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     4e0:	2380      	movs	r3, #128	; 0x80
     4e2:	005b      	lsls	r3, r3, #1
     4e4:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     4e6:	0028      	movs	r0, r5
     4e8:	3014      	adds	r0, #20
     4ea:	b2c0      	uxtb	r0, r0
     4ec:	4b55      	ldr	r3, [pc, #340]	; (644 <i2c_master_init+0x290>)
     4ee:	4798      	blx	r3
     4f0:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     4f2:	23fa      	movs	r3, #250	; 0xfa
     4f4:	009b      	lsls	r3, r3, #2
     4f6:	6822      	ldr	r2, [r4, #0]
     4f8:	435a      	muls	r2, r3
     4fa:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     4fc:	6863      	ldr	r3, [r4, #4]
     4fe:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     500:	4d51      	ldr	r5, [pc, #324]	; (648 <i2c_master_init+0x294>)
     502:	47a8      	blx	r5
     504:	9000      	str	r0, [sp, #0]
     506:	9101      	str	r1, [sp, #4]
     508:	464b      	mov	r3, r9
     50a:	0058      	lsls	r0, r3, #1
     50c:	47a8      	blx	r5
     50e:	9002      	str	r0, [sp, #8]
     510:	9103      	str	r1, [sp, #12]
     512:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     514:	47a8      	blx	r5
     516:	9004      	str	r0, [sp, #16]
     518:	9105      	str	r1, [sp, #20]
     51a:	4f4c      	ldr	r7, [pc, #304]	; (64c <i2c_master_init+0x298>)
     51c:	4a4c      	ldr	r2, [pc, #304]	; (650 <i2c_master_init+0x29c>)
     51e:	4b4d      	ldr	r3, [pc, #308]	; (654 <i2c_master_init+0x2a0>)
     520:	9800      	ldr	r0, [sp, #0]
     522:	9901      	ldr	r1, [sp, #4]
     524:	47b8      	blx	r7
     526:	0002      	movs	r2, r0
     528:	000b      	movs	r3, r1
     52a:	9804      	ldr	r0, [sp, #16]
     52c:	9905      	ldr	r1, [sp, #20]
     52e:	47b8      	blx	r7
     530:	4e49      	ldr	r6, [pc, #292]	; (658 <i2c_master_init+0x2a4>)
     532:	2200      	movs	r2, #0
     534:	4b49      	ldr	r3, [pc, #292]	; (65c <i2c_master_init+0x2a8>)
     536:	47b0      	blx	r6
     538:	9004      	str	r0, [sp, #16]
     53a:	9105      	str	r1, [sp, #20]
     53c:	4648      	mov	r0, r9
     53e:	47a8      	blx	r5
     540:	0002      	movs	r2, r0
     542:	000b      	movs	r3, r1
     544:	9804      	ldr	r0, [sp, #16]
     546:	9905      	ldr	r1, [sp, #20]
     548:	47b8      	blx	r7
     54a:	0002      	movs	r2, r0
     54c:	000b      	movs	r3, r1
     54e:	4d44      	ldr	r5, [pc, #272]	; (660 <i2c_master_init+0x2ac>)
     550:	9800      	ldr	r0, [sp, #0]
     552:	9901      	ldr	r1, [sp, #4]
     554:	47a8      	blx	r5
     556:	9a02      	ldr	r2, [sp, #8]
     558:	9b03      	ldr	r3, [sp, #12]
     55a:	47b0      	blx	r6
     55c:	2200      	movs	r2, #0
     55e:	4b41      	ldr	r3, [pc, #260]	; (664 <i2c_master_init+0x2b0>)
     560:	47a8      	blx	r5
     562:	9a02      	ldr	r2, [sp, #8]
     564:	9b03      	ldr	r3, [sp, #12]
     566:	4d40      	ldr	r5, [pc, #256]	; (668 <i2c_master_init+0x2b4>)
     568:	47a8      	blx	r5
     56a:	4b40      	ldr	r3, [pc, #256]	; (66c <i2c_master_init+0x2b8>)
     56c:	4798      	blx	r3
     56e:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     570:	2380      	movs	r3, #128	; 0x80
     572:	049b      	lsls	r3, r3, #18
     574:	68a2      	ldr	r2, [r4, #8]
     576:	429a      	cmp	r2, r3
     578:	d01e      	beq.n	5b8 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     57a:	0003      	movs	r3, r0
     57c:	2040      	movs	r0, #64	; 0x40
     57e:	2dff      	cmp	r5, #255	; 0xff
     580:	d900      	bls.n	584 <i2c_master_init+0x1d0>
     582:	e73e      	b.n	402 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     584:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     586:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     588:	25ff      	movs	r5, #255	; 0xff
     58a:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     58c:	0624      	lsls	r4, r4, #24
     58e:	4325      	orrs	r5, r4
     590:	0400      	lsls	r0, r0, #16
     592:	23ff      	movs	r3, #255	; 0xff
     594:	041b      	lsls	r3, r3, #16
     596:	4018      	ands	r0, r3
     598:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     59a:	4643      	mov	r3, r8
     59c:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     59e:	2000      	movs	r0, #0
     5a0:	e72f      	b.n	402 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     5a2:	2100      	movs	r1, #0
     5a4:	4640      	mov	r0, r8
     5a6:	4b32      	ldr	r3, [pc, #200]	; (670 <i2c_master_init+0x2bc>)
     5a8:	4798      	blx	r3
     5aa:	e74a      	b.n	442 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     5ac:	2101      	movs	r1, #1
     5ae:	4640      	mov	r0, r8
     5b0:	4b2f      	ldr	r3, [pc, #188]	; (670 <i2c_master_init+0x2bc>)
     5b2:	4798      	blx	r3
     5b4:	0007      	movs	r7, r0
     5b6:	e751      	b.n	45c <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     5b8:	26fa      	movs	r6, #250	; 0xfa
     5ba:	00b6      	lsls	r6, r6, #2
     5bc:	4653      	mov	r3, sl
     5be:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     5c0:	9800      	ldr	r0, [sp, #0]
     5c2:	9901      	ldr	r1, [sp, #4]
     5c4:	0002      	movs	r2, r0
     5c6:	000b      	movs	r3, r1
     5c8:	4c23      	ldr	r4, [pc, #140]	; (658 <i2c_master_init+0x2a4>)
     5ca:	47a0      	blx	r4
     5cc:	9000      	str	r0, [sp, #0]
     5ce:	9101      	str	r1, [sp, #4]
     5d0:	0030      	movs	r0, r6
     5d2:	4b1d      	ldr	r3, [pc, #116]	; (648 <i2c_master_init+0x294>)
     5d4:	4798      	blx	r3
     5d6:	2200      	movs	r2, #0
     5d8:	4b26      	ldr	r3, [pc, #152]	; (674 <i2c_master_init+0x2c0>)
     5da:	47b8      	blx	r7
     5dc:	0002      	movs	r2, r0
     5de:	000b      	movs	r3, r1
     5e0:	9800      	ldr	r0, [sp, #0]
     5e2:	9901      	ldr	r1, [sp, #4]
     5e4:	4c20      	ldr	r4, [pc, #128]	; (668 <i2c_master_init+0x2b4>)
     5e6:	47a0      	blx	r4
     5e8:	2200      	movs	r2, #0
     5ea:	4b1e      	ldr	r3, [pc, #120]	; (664 <i2c_master_init+0x2b0>)
     5ec:	4c1c      	ldr	r4, [pc, #112]	; (660 <i2c_master_init+0x2ac>)
     5ee:	47a0      	blx	r4
     5f0:	4b1e      	ldr	r3, [pc, #120]	; (66c <i2c_master_init+0x2b8>)
     5f2:	4798      	blx	r3
     5f4:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     5f6:	d00c      	beq.n	612 <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     5f8:	0031      	movs	r1, r6
     5fa:	9807      	ldr	r0, [sp, #28]
     5fc:	4b1e      	ldr	r3, [pc, #120]	; (678 <i2c_master_init+0x2c4>)
     5fe:	4798      	blx	r3
     600:	3802      	subs	r0, #2
     602:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     604:	002b      	movs	r3, r5
     606:	2dff      	cmp	r5, #255	; 0xff
     608:	d80c      	bhi.n	624 <i2c_master_init+0x270>
     60a:	28ff      	cmp	r0, #255	; 0xff
     60c:	d9bc      	bls.n	588 <i2c_master_init+0x1d4>
     60e:	2040      	movs	r0, #64	; 0x40
     610:	e6f7      	b.n	402 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     612:	0071      	lsls	r1, r6, #1
     614:	1e48      	subs	r0, r1, #1
     616:	9b07      	ldr	r3, [sp, #28]
     618:	469c      	mov	ip, r3
     61a:	4460      	add	r0, ip
     61c:	4b16      	ldr	r3, [pc, #88]	; (678 <i2c_master_init+0x2c4>)
     61e:	4798      	blx	r3
     620:	3801      	subs	r0, #1
     622:	e7ef      	b.n	604 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     624:	2040      	movs	r0, #64	; 0x40
     626:	e6ec      	b.n	402 <i2c_master_init+0x4e>
     628:	00000d05 	.word	0x00000d05
     62c:	40000400 	.word	0x40000400
     630:	00001769 	.word	0x00001769
     634:	000016dd 	.word	0x000016dd
     638:	00000b41 	.word	0x00000b41
     63c:	00001861 	.word	0x00001861
     640:	41002000 	.word	0x41002000
     644:	00001785 	.word	0x00001785
     648:	000040c5 	.word	0x000040c5
     64c:	000034ad 	.word	0x000034ad
     650:	e826d695 	.word	0xe826d695
     654:	3e112e0b 	.word	0x3e112e0b
     658:	00002825 	.word	0x00002825
     65c:	40240000 	.word	0x40240000
     660:	000039ad 	.word	0x000039ad
     664:	3ff00000 	.word	0x3ff00000
     668:	00002e45 	.word	0x00002e45
     66c:	00003fd9 	.word	0x00003fd9
     670:	00000b8d 	.word	0x00000b8d
     674:	40080000 	.word	0x40080000
     678:	000024f9 	.word	0x000024f9

0000067c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     67c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     67e:	7e1a      	ldrb	r2, [r3, #24]
     680:	0792      	lsls	r2, r2, #30
     682:	d507      	bpl.n	694 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     684:	2202      	movs	r2, #2
     686:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     688:	8b5b      	ldrh	r3, [r3, #26]
     68a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     68c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     68e:	17db      	asrs	r3, r3, #31
     690:	4018      	ands	r0, r3
}
     692:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     694:	8b5a      	ldrh	r2, [r3, #26]
     696:	0752      	lsls	r2, r2, #29
     698:	d506      	bpl.n	6a8 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     69a:	6859      	ldr	r1, [r3, #4]
     69c:	22c0      	movs	r2, #192	; 0xc0
     69e:	0292      	lsls	r2, r2, #10
     6a0:	430a      	orrs	r2, r1
     6a2:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     6a4:	2018      	movs	r0, #24
     6a6:	e7f4      	b.n	692 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     6a8:	2000      	movs	r0, #0
     6aa:	e7f2      	b.n	692 <_i2c_master_address_response+0x16>

000006ac <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     6ac:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6ae:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     6b0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     6b2:	2401      	movs	r4, #1
     6b4:	2502      	movs	r5, #2
     6b6:	7e11      	ldrb	r1, [r2, #24]
     6b8:	4221      	tst	r1, r4
     6ba:	d10b      	bne.n	6d4 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     6bc:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     6be:	4229      	tst	r1, r5
     6c0:	d106      	bne.n	6d0 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     6c2:	3301      	adds	r3, #1
     6c4:	b29b      	uxth	r3, r3
     6c6:	8901      	ldrh	r1, [r0, #8]
     6c8:	4299      	cmp	r1, r3
     6ca:	d8f4      	bhi.n	6b6 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     6cc:	2012      	movs	r0, #18
     6ce:	e002      	b.n	6d6 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     6d0:	2000      	movs	r0, #0
     6d2:	e000      	b.n	6d6 <_i2c_master_wait_for_bus+0x2a>
     6d4:	2000      	movs	r0, #0
}
     6d6:	bd30      	pop	{r4, r5, pc}

000006d8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     6d8:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6da:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6dc:	6862      	ldr	r2, [r4, #4]
     6de:	2380      	movs	r3, #128	; 0x80
     6e0:	02db      	lsls	r3, r3, #11
     6e2:	4313      	orrs	r3, r2
     6e4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     6e6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     6e8:	4b02      	ldr	r3, [pc, #8]	; (6f4 <_i2c_master_send_hs_master_code+0x1c>)
     6ea:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     6ec:	2301      	movs	r3, #1
     6ee:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     6f0:	bd10      	pop	{r4, pc}
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	000006ad 	.word	0x000006ad

000006f8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	46de      	mov	lr, fp
     6fc:	4657      	mov	r7, sl
     6fe:	464e      	mov	r6, r9
     700:	4645      	mov	r5, r8
     702:	b5e0      	push	{r5, r6, r7, lr}
     704:	b083      	sub	sp, #12
     706:	0006      	movs	r6, r0
     708:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     70a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     70c:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     70e:	682b      	ldr	r3, [r5, #0]
     710:	011b      	lsls	r3, r3, #4
     712:	0fdb      	lsrs	r3, r3, #31
     714:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     716:	7a4b      	ldrb	r3, [r1, #9]
     718:	2b00      	cmp	r3, #0
     71a:	d12b      	bne.n	774 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     71c:	686b      	ldr	r3, [r5, #4]
     71e:	4a58      	ldr	r2, [pc, #352]	; (880 <_i2c_master_read_packet+0x188>)
     720:	4013      	ands	r3, r2
     722:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     724:	464b      	mov	r3, r9
     726:	7a1b      	ldrb	r3, [r3, #8]
     728:	2b00      	cmp	r3, #0
     72a:	d127      	bne.n	77c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     72c:	464b      	mov	r3, r9
     72e:	881b      	ldrh	r3, [r3, #0]
     730:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     732:	464a      	mov	r2, r9
     734:	7a52      	ldrb	r2, [r2, #9]
     736:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     738:	4313      	orrs	r3, r2
     73a:	2201      	movs	r2, #1
     73c:	4313      	orrs	r3, r2
     73e:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     740:	0030      	movs	r0, r6
     742:	4b50      	ldr	r3, [pc, #320]	; (884 <_i2c_master_read_packet+0x18c>)
     744:	4798      	blx	r3
     746:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     748:	4653      	mov	r3, sl
     74a:	2b00      	cmp	r3, #0
     74c:	d003      	beq.n	756 <_i2c_master_read_packet+0x5e>
     74e:	464b      	mov	r3, r9
     750:	885b      	ldrh	r3, [r3, #2]
     752:	2b01      	cmp	r3, #1
     754:	d03b      	beq.n	7ce <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     756:	686b      	ldr	r3, [r5, #4]
     758:	4a49      	ldr	r2, [pc, #292]	; (880 <_i2c_master_read_packet+0x188>)
     75a:	4013      	ands	r3, r2
     75c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     75e:	9b01      	ldr	r3, [sp, #4]
     760:	2b00      	cmp	r3, #0
     762:	d03a      	beq.n	7da <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     764:	9801      	ldr	r0, [sp, #4]
     766:	b003      	add	sp, #12
     768:	bc3c      	pop	{r2, r3, r4, r5}
     76a:	4690      	mov	r8, r2
     76c:	4699      	mov	r9, r3
     76e:	46a2      	mov	sl, r4
     770:	46ab      	mov	fp, r5
     772:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     774:	7a89      	ldrb	r1, [r1, #10]
     776:	4b44      	ldr	r3, [pc, #272]	; (888 <_i2c_master_read_packet+0x190>)
     778:	4798      	blx	r3
     77a:	e7cf      	b.n	71c <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     77c:	464b      	mov	r3, r9
     77e:	881b      	ldrh	r3, [r3, #0]
     780:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     782:	464a      	mov	r2, r9
     784:	7a52      	ldrb	r2, [r2, #9]
     786:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     788:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     78a:	2280      	movs	r2, #128	; 0x80
     78c:	0212      	lsls	r2, r2, #8
     78e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     790:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     792:	0030      	movs	r0, r6
     794:	4b3b      	ldr	r3, [pc, #236]	; (884 <_i2c_master_read_packet+0x18c>)
     796:	4798      	blx	r3
     798:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     79a:	686b      	ldr	r3, [r5, #4]
     79c:	4a38      	ldr	r2, [pc, #224]	; (880 <_i2c_master_read_packet+0x188>)
     79e:	4013      	ands	r3, r2
     7a0:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     7a2:	2800      	cmp	r0, #0
     7a4:	d1de      	bne.n	764 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     7a6:	0030      	movs	r0, r6
     7a8:	4b38      	ldr	r3, [pc, #224]	; (88c <_i2c_master_read_packet+0x194>)
     7aa:	4798      	blx	r3
     7ac:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     7ae:	2800      	cmp	r0, #0
     7b0:	d1d8      	bne.n	764 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7b2:	464b      	mov	r3, r9
     7b4:	881b      	ldrh	r3, [r3, #0]
     7b6:	0a1b      	lsrs	r3, r3, #8
     7b8:	2278      	movs	r2, #120	; 0x78
     7ba:	4313      	orrs	r3, r2
     7bc:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7be:	464a      	mov	r2, r9
     7c0:	7a52      	ldrb	r2, [r2, #9]
     7c2:	0392      	lsls	r2, r2, #14
     7c4:	2101      	movs	r1, #1
     7c6:	430a      	orrs	r2, r1
     7c8:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7ca:	626b      	str	r3, [r5, #36]	; 0x24
     7cc:	e7b8      	b.n	740 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     7ce:	686a      	ldr	r2, [r5, #4]
     7d0:	2380      	movs	r3, #128	; 0x80
     7d2:	02db      	lsls	r3, r3, #11
     7d4:	4313      	orrs	r3, r2
     7d6:	606b      	str	r3, [r5, #4]
     7d8:	e7c1      	b.n	75e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     7da:	0030      	movs	r0, r6
     7dc:	4b2b      	ldr	r3, [pc, #172]	; (88c <_i2c_master_read_packet+0x194>)
     7de:	4798      	blx	r3
     7e0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     7e2:	2800      	cmp	r0, #0
     7e4:	d1be      	bne.n	764 <_i2c_master_read_packet+0x6c>
     7e6:	3c01      	subs	r4, #1
     7e8:	b2a4      	uxth	r4, r4
     7ea:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     7ec:	4b28      	ldr	r3, [pc, #160]	; (890 <_i2c_master_read_packet+0x198>)
     7ee:	469b      	mov	fp, r3
     7f0:	e015      	b.n	81e <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     7f2:	2c01      	cmp	r4, #1
     7f4:	d020      	beq.n	838 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     7f6:	0030      	movs	r0, r6
     7f8:	4b26      	ldr	r3, [pc, #152]	; (894 <_i2c_master_read_packet+0x19c>)
     7fa:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     7fc:	4643      	mov	r3, r8
     7fe:	1c5f      	adds	r7, r3, #1
     800:	b2bf      	uxth	r7, r7
     802:	2328      	movs	r3, #40	; 0x28
     804:	5ceb      	ldrb	r3, [r5, r3]
     806:	464a      	mov	r2, r9
     808:	6852      	ldr	r2, [r2, #4]
     80a:	4641      	mov	r1, r8
     80c:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     80e:	0030      	movs	r0, r6
     810:	4b1c      	ldr	r3, [pc, #112]	; (884 <_i2c_master_read_packet+0x18c>)
     812:	4798      	blx	r3
     814:	3c01      	subs	r4, #1
     816:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     818:	2800      	cmp	r0, #0
     81a:	d115      	bne.n	848 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     81c:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     81e:	455c      	cmp	r4, fp
     820:	d014      	beq.n	84c <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     822:	8b6b      	ldrh	r3, [r5, #26]
     824:	069b      	lsls	r3, r3, #26
     826:	d527      	bpl.n	878 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     828:	7af3      	ldrb	r3, [r6, #11]
     82a:	2b00      	cmp	r3, #0
     82c:	d0e3      	beq.n	7f6 <_i2c_master_read_packet+0xfe>
     82e:	4653      	mov	r3, sl
     830:	2b00      	cmp	r3, #0
     832:	d1de      	bne.n	7f2 <_i2c_master_read_packet+0xfa>
     834:	2c00      	cmp	r4, #0
     836:	d1de      	bne.n	7f6 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     838:	686a      	ldr	r2, [r5, #4]
     83a:	2380      	movs	r3, #128	; 0x80
     83c:	02db      	lsls	r3, r3, #11
     83e:	4313      	orrs	r3, r2
     840:	606b      	str	r3, [r5, #4]
     842:	3c01      	subs	r4, #1
     844:	b2a4      	uxth	r4, r4
     846:	e7ea      	b.n	81e <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     848:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     84a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     84c:	7ab3      	ldrb	r3, [r6, #10]
     84e:	2b00      	cmp	r3, #0
     850:	d109      	bne.n	866 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     852:	0030      	movs	r0, r6
     854:	4b0f      	ldr	r3, [pc, #60]	; (894 <_i2c_master_read_packet+0x19c>)
     856:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     858:	2328      	movs	r3, #40	; 0x28
     85a:	5cea      	ldrb	r2, [r5, r3]
     85c:	464b      	mov	r3, r9
     85e:	685b      	ldr	r3, [r3, #4]
     860:	4641      	mov	r1, r8
     862:	545a      	strb	r2, [r3, r1]
     864:	e77e      	b.n	764 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     866:	0030      	movs	r0, r6
     868:	4b0a      	ldr	r3, [pc, #40]	; (894 <_i2c_master_read_packet+0x19c>)
     86a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     86c:	686a      	ldr	r2, [r5, #4]
     86e:	23c0      	movs	r3, #192	; 0xc0
     870:	029b      	lsls	r3, r3, #10
     872:	4313      	orrs	r3, r2
     874:	606b      	str	r3, [r5, #4]
     876:	e7ec      	b.n	852 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     878:	2341      	movs	r3, #65	; 0x41
     87a:	9301      	str	r3, [sp, #4]
     87c:	e772      	b.n	764 <_i2c_master_read_packet+0x6c>
     87e:	46c0      	nop			; (mov r8, r8)
     880:	fffbffff 	.word	0xfffbffff
     884:	000006ad 	.word	0x000006ad
     888:	000006d9 	.word	0x000006d9
     88c:	0000067d 	.word	0x0000067d
     890:	0000ffff 	.word	0x0000ffff
     894:	000003a9 	.word	0x000003a9

00000898 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     898:	b5f0      	push	{r4, r5, r6, r7, lr}
     89a:	46de      	mov	lr, fp
     89c:	4657      	mov	r7, sl
     89e:	464e      	mov	r6, r9
     8a0:	4645      	mov	r5, r8
     8a2:	b5e0      	push	{r5, r6, r7, lr}
     8a4:	b083      	sub	sp, #12
     8a6:	0006      	movs	r6, r0
     8a8:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8aa:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     8ac:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     8ae:	4b32      	ldr	r3, [pc, #200]	; (978 <_i2c_master_write_packet+0xe0>)
     8b0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     8b2:	7a7b      	ldrb	r3, [r7, #9]
     8b4:	2b00      	cmp	r3, #0
     8b6:	d11d      	bne.n	8f4 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     8b8:	686b      	ldr	r3, [r5, #4]
     8ba:	4a30      	ldr	r2, [pc, #192]	; (97c <_i2c_master_write_packet+0xe4>)
     8bc:	4013      	ands	r3, r2
     8be:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     8c0:	7a3b      	ldrb	r3, [r7, #8]
     8c2:	2b00      	cmp	r3, #0
     8c4:	d01b      	beq.n	8fe <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8c6:	883b      	ldrh	r3, [r7, #0]
     8c8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     8ca:	7a7a      	ldrb	r2, [r7, #9]
     8cc:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8ce:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     8d0:	2280      	movs	r2, #128	; 0x80
     8d2:	0212      	lsls	r2, r2, #8
     8d4:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8d6:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     8d8:	0030      	movs	r0, r6
     8da:	4b29      	ldr	r3, [pc, #164]	; (980 <_i2c_master_write_packet+0xe8>)
     8dc:	4798      	blx	r3
     8de:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     8e0:	2800      	cmp	r0, #0
     8e2:	d013      	beq.n	90c <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     8e4:	9801      	ldr	r0, [sp, #4]
     8e6:	b003      	add	sp, #12
     8e8:	bc3c      	pop	{r2, r3, r4, r5}
     8ea:	4690      	mov	r8, r2
     8ec:	4699      	mov	r9, r3
     8ee:	46a2      	mov	sl, r4
     8f0:	46ab      	mov	fp, r5
     8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     8f4:	7ab9      	ldrb	r1, [r7, #10]
     8f6:	0030      	movs	r0, r6
     8f8:	4b22      	ldr	r3, [pc, #136]	; (984 <_i2c_master_write_packet+0xec>)
     8fa:	4798      	blx	r3
     8fc:	e7dc      	b.n	8b8 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8fe:	883b      	ldrh	r3, [r7, #0]
     900:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     902:	7a7a      	ldrb	r2, [r7, #9]
     904:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     906:	4313      	orrs	r3, r2
     908:	626b      	str	r3, [r5, #36]	; 0x24
     90a:	e7e5      	b.n	8d8 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     90c:	0030      	movs	r0, r6
     90e:	4b1e      	ldr	r3, [pc, #120]	; (988 <_i2c_master_write_packet+0xf0>)
     910:	4798      	blx	r3
     912:	1e03      	subs	r3, r0, #0
     914:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     916:	d1e5      	bne.n	8e4 <_i2c_master_write_packet+0x4c>
     918:	46a0      	mov	r8, r4
     91a:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     91c:	3320      	adds	r3, #32
     91e:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     920:	4b15      	ldr	r3, [pc, #84]	; (978 <_i2c_master_write_packet+0xe0>)
     922:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     924:	4b16      	ldr	r3, [pc, #88]	; (980 <_i2c_master_write_packet+0xe8>)
     926:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     928:	4544      	cmp	r4, r8
     92a:	d015      	beq.n	958 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     92c:	8b6b      	ldrh	r3, [r5, #26]
     92e:	464a      	mov	r2, r9
     930:	4213      	tst	r3, r2
     932:	d01d      	beq.n	970 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     934:	0030      	movs	r0, r6
     936:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     938:	687b      	ldr	r3, [r7, #4]
     93a:	5d1a      	ldrb	r2, [r3, r4]
     93c:	2328      	movs	r3, #40	; 0x28
     93e:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     940:	0030      	movs	r0, r6
     942:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     944:	2800      	cmp	r0, #0
     946:	d106      	bne.n	956 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     948:	8b6b      	ldrh	r3, [r5, #26]
     94a:	3401      	adds	r4, #1
     94c:	075b      	lsls	r3, r3, #29
     94e:	d5eb      	bpl.n	928 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     950:	231e      	movs	r3, #30
     952:	9301      	str	r3, [sp, #4]
     954:	e000      	b.n	958 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     956:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     958:	7ab3      	ldrb	r3, [r6, #10]
     95a:	2b00      	cmp	r3, #0
     95c:	d0c2      	beq.n	8e4 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     95e:	0030      	movs	r0, r6
     960:	4b05      	ldr	r3, [pc, #20]	; (978 <_i2c_master_write_packet+0xe0>)
     962:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     964:	686a      	ldr	r2, [r5, #4]
     966:	23c0      	movs	r3, #192	; 0xc0
     968:	029b      	lsls	r3, r3, #10
     96a:	4313      	orrs	r3, r2
     96c:	606b      	str	r3, [r5, #4]
     96e:	e7b9      	b.n	8e4 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     970:	2341      	movs	r3, #65	; 0x41
     972:	9301      	str	r3, [sp, #4]
     974:	e7b6      	b.n	8e4 <_i2c_master_write_packet+0x4c>
     976:	46c0      	nop			; (mov r8, r8)
     978:	000003a9 	.word	0x000003a9
     97c:	fffbffff 	.word	0xfffbffff
     980:	000006ad 	.word	0x000006ad
     984:	000006d9 	.word	0x000006d9
     988:	0000067d 	.word	0x0000067d

0000098c <i2c_master_read_packet_wait>:
{
     98c:	b510      	push	{r4, lr}
	module->send_stop = true;
     98e:	2301      	movs	r3, #1
     990:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     992:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     994:	4b01      	ldr	r3, [pc, #4]	; (99c <i2c_master_read_packet_wait+0x10>)
     996:	4798      	blx	r3
}
     998:	bd10      	pop	{r4, pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	000006f9 	.word	0x000006f9

000009a0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     9a0:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     9a2:	2301      	movs	r3, #1
     9a4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     9a6:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     9a8:	4b01      	ldr	r3, [pc, #4]	; (9b0 <i2c_master_write_packet_wait+0x10>)
     9aa:	4798      	blx	r3
}
     9ac:	bd10      	pop	{r4, pc}
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	00000899 	.word	0x00000899

000009b4 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     9b4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
     9b6:	2300      	movs	r3, #0
     9b8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     9ba:	3301      	adds	r3, #1
     9bc:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     9be:	4b01      	ldr	r3, [pc, #4]	; (9c4 <i2c_master_write_packet_wait_no_stop+0x10>)
     9c0:	4798      	blx	r3
}
     9c2:	bd10      	pop	{r4, pc}
     9c4:	00000899 	.word	0x00000899

000009c8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ca:	46de      	mov	lr, fp
     9cc:	4657      	mov	r7, sl
     9ce:	464e      	mov	r6, r9
     9d0:	4645      	mov	r5, r8
     9d2:	b5e0      	push	{r5, r6, r7, lr}
     9d4:	b087      	sub	sp, #28
     9d6:	4680      	mov	r8, r0
     9d8:	9104      	str	r1, [sp, #16]
     9da:	0016      	movs	r6, r2
     9dc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     9de:	2200      	movs	r2, #0
     9e0:	2300      	movs	r3, #0
     9e2:	2100      	movs	r1, #0
     9e4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     9e6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     9e8:	2001      	movs	r0, #1
     9ea:	0021      	movs	r1, r4
     9ec:	9600      	str	r6, [sp, #0]
     9ee:	9701      	str	r7, [sp, #4]
     9f0:	465c      	mov	r4, fp
     9f2:	9403      	str	r4, [sp, #12]
     9f4:	4644      	mov	r4, r8
     9f6:	9405      	str	r4, [sp, #20]
     9f8:	e013      	b.n	a22 <long_division+0x5a>
     9fa:	2420      	movs	r4, #32
     9fc:	1a64      	subs	r4, r4, r1
     9fe:	0005      	movs	r5, r0
     a00:	40e5      	lsrs	r5, r4
     a02:	46a8      	mov	r8, r5
     a04:	e014      	b.n	a30 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     a06:	9c00      	ldr	r4, [sp, #0]
     a08:	9d01      	ldr	r5, [sp, #4]
     a0a:	1b12      	subs	r2, r2, r4
     a0c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     a0e:	465c      	mov	r4, fp
     a10:	464d      	mov	r5, r9
     a12:	432c      	orrs	r4, r5
     a14:	46a3      	mov	fp, r4
     a16:	9c03      	ldr	r4, [sp, #12]
     a18:	4645      	mov	r5, r8
     a1a:	432c      	orrs	r4, r5
     a1c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     a1e:	3901      	subs	r1, #1
     a20:	d325      	bcc.n	a6e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     a22:	2420      	movs	r4, #32
     a24:	4264      	negs	r4, r4
     a26:	190c      	adds	r4, r1, r4
     a28:	d4e7      	bmi.n	9fa <long_division+0x32>
     a2a:	0005      	movs	r5, r0
     a2c:	40a5      	lsls	r5, r4
     a2e:	46a8      	mov	r8, r5
     a30:	0004      	movs	r4, r0
     a32:	408c      	lsls	r4, r1
     a34:	46a1      	mov	r9, r4
		r = r << 1;
     a36:	1892      	adds	r2, r2, r2
     a38:	415b      	adcs	r3, r3
     a3a:	0014      	movs	r4, r2
     a3c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     a3e:	9e05      	ldr	r6, [sp, #20]
     a40:	464f      	mov	r7, r9
     a42:	403e      	ands	r6, r7
     a44:	46b4      	mov	ip, r6
     a46:	9e04      	ldr	r6, [sp, #16]
     a48:	4647      	mov	r7, r8
     a4a:	403e      	ands	r6, r7
     a4c:	46b2      	mov	sl, r6
     a4e:	4666      	mov	r6, ip
     a50:	4657      	mov	r7, sl
     a52:	433e      	orrs	r6, r7
     a54:	d003      	beq.n	a5e <long_division+0x96>
			r |= 0x01;
     a56:	0006      	movs	r6, r0
     a58:	4326      	orrs	r6, r4
     a5a:	0032      	movs	r2, r6
     a5c:	002b      	movs	r3, r5
		if (r >= d) {
     a5e:	9c00      	ldr	r4, [sp, #0]
     a60:	9d01      	ldr	r5, [sp, #4]
     a62:	429d      	cmp	r5, r3
     a64:	d8db      	bhi.n	a1e <long_division+0x56>
     a66:	d1ce      	bne.n	a06 <long_division+0x3e>
     a68:	4294      	cmp	r4, r2
     a6a:	d8d8      	bhi.n	a1e <long_division+0x56>
     a6c:	e7cb      	b.n	a06 <long_division+0x3e>
     a6e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     a70:	4658      	mov	r0, fp
     a72:	0019      	movs	r1, r3
     a74:	b007      	add	sp, #28
     a76:	bc3c      	pop	{r2, r3, r4, r5}
     a78:	4690      	mov	r8, r2
     a7a:	4699      	mov	r9, r3
     a7c:	46a2      	mov	sl, r4
     a7e:	46ab      	mov	fp, r5
     a80:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000a82 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a82:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a84:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a86:	2340      	movs	r3, #64	; 0x40
     a88:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     a8a:	4281      	cmp	r1, r0
     a8c:	d202      	bcs.n	a94 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     a8e:	0018      	movs	r0, r3
     a90:	bd10      	pop	{r4, pc}
		baud_calculated++;
     a92:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     a94:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     a96:	1c63      	adds	r3, r4, #1
     a98:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     a9a:	4288      	cmp	r0, r1
     a9c:	d9f9      	bls.n	a92 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a9e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     aa0:	2cff      	cmp	r4, #255	; 0xff
     aa2:	d8f4      	bhi.n	a8e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     aa4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     aa6:	2300      	movs	r3, #0
     aa8:	e7f1      	b.n	a8e <_sercom_get_sync_baud_val+0xc>
	...

00000aac <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     aac:	b5f0      	push	{r4, r5, r6, r7, lr}
     aae:	b083      	sub	sp, #12
     ab0:	000f      	movs	r7, r1
     ab2:	0016      	movs	r6, r2
     ab4:	aa08      	add	r2, sp, #32
     ab6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     ab8:	0004      	movs	r4, r0
     aba:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     abc:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     abe:	42bc      	cmp	r4, r7
     ac0:	d902      	bls.n	ac8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     ac2:	0010      	movs	r0, r2
     ac4:	b003      	add	sp, #12
     ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     ac8:	2b00      	cmp	r3, #0
     aca:	d114      	bne.n	af6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     acc:	0002      	movs	r2, r0
     ace:	0008      	movs	r0, r1
     ad0:	2100      	movs	r1, #0
     ad2:	4c19      	ldr	r4, [pc, #100]	; (b38 <_sercom_get_async_baud_val+0x8c>)
     ad4:	47a0      	blx	r4
     ad6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     ad8:	003a      	movs	r2, r7
     ada:	2300      	movs	r3, #0
     adc:	2000      	movs	r0, #0
     ade:	4c17      	ldr	r4, [pc, #92]	; (b3c <_sercom_get_async_baud_val+0x90>)
     ae0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     ae2:	2200      	movs	r2, #0
     ae4:	2301      	movs	r3, #1
     ae6:	1a12      	subs	r2, r2, r0
     ae8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     aea:	0c12      	lsrs	r2, r2, #16
     aec:	041b      	lsls	r3, r3, #16
     aee:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     af0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     af2:	2200      	movs	r2, #0
     af4:	e7e5      	b.n	ac2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     af6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     af8:	2b01      	cmp	r3, #1
     afa:	d1f9      	bne.n	af0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     afc:	000a      	movs	r2, r1
     afe:	2300      	movs	r3, #0
     b00:	2100      	movs	r1, #0
     b02:	4c0d      	ldr	r4, [pc, #52]	; (b38 <_sercom_get_async_baud_val+0x8c>)
     b04:	47a0      	blx	r4
     b06:	0002      	movs	r2, r0
     b08:	000b      	movs	r3, r1
     b0a:	9200      	str	r2, [sp, #0]
     b0c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     b0e:	0038      	movs	r0, r7
     b10:	2100      	movs	r1, #0
     b12:	4c0a      	ldr	r4, [pc, #40]	; (b3c <_sercom_get_async_baud_val+0x90>)
     b14:	47a0      	blx	r4
     b16:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     b18:	2380      	movs	r3, #128	; 0x80
     b1a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b1c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     b1e:	4298      	cmp	r0, r3
     b20:	d8cf      	bhi.n	ac2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     b22:	0f79      	lsrs	r1, r7, #29
     b24:	00f8      	lsls	r0, r7, #3
     b26:	9a00      	ldr	r2, [sp, #0]
     b28:	9b01      	ldr	r3, [sp, #4]
     b2a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     b2c:	00ea      	lsls	r2, r5, #3
     b2e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     b30:	b2d2      	uxtb	r2, r2
     b32:	0352      	lsls	r2, r2, #13
     b34:	432a      	orrs	r2, r5
     b36:	e7db      	b.n	af0 <_sercom_get_async_baud_val+0x44>
     b38:	00002651 	.word	0x00002651
     b3c:	000009c9 	.word	0x000009c9

00000b40 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     b40:	b510      	push	{r4, lr}
     b42:	b082      	sub	sp, #8
     b44:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     b46:	4b0e      	ldr	r3, [pc, #56]	; (b80 <sercom_set_gclk_generator+0x40>)
     b48:	781b      	ldrb	r3, [r3, #0]
     b4a:	2b00      	cmp	r3, #0
     b4c:	d007      	beq.n	b5e <sercom_set_gclk_generator+0x1e>
     b4e:	2900      	cmp	r1, #0
     b50:	d105      	bne.n	b5e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     b52:	4b0b      	ldr	r3, [pc, #44]	; (b80 <sercom_set_gclk_generator+0x40>)
     b54:	785b      	ldrb	r3, [r3, #1]
     b56:	4283      	cmp	r3, r0
     b58:	d010      	beq.n	b7c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     b5a:	201d      	movs	r0, #29
     b5c:	e00c      	b.n	b78 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     b5e:	a901      	add	r1, sp, #4
     b60:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     b62:	2013      	movs	r0, #19
     b64:	4b07      	ldr	r3, [pc, #28]	; (b84 <sercom_set_gclk_generator+0x44>)
     b66:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     b68:	2013      	movs	r0, #19
     b6a:	4b07      	ldr	r3, [pc, #28]	; (b88 <sercom_set_gclk_generator+0x48>)
     b6c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     b6e:	4b04      	ldr	r3, [pc, #16]	; (b80 <sercom_set_gclk_generator+0x40>)
     b70:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     b72:	2201      	movs	r2, #1
     b74:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     b76:	2000      	movs	r0, #0
}
     b78:	b002      	add	sp, #8
     b7a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     b7c:	2000      	movs	r0, #0
     b7e:	e7fb      	b.n	b78 <sercom_set_gclk_generator+0x38>
     b80:	20000098 	.word	0x20000098
     b84:	00001769 	.word	0x00001769
     b88:	000016dd 	.word	0x000016dd

00000b8c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     b8c:	4b40      	ldr	r3, [pc, #256]	; (c90 <_sercom_get_default_pad+0x104>)
     b8e:	4298      	cmp	r0, r3
     b90:	d031      	beq.n	bf6 <_sercom_get_default_pad+0x6a>
     b92:	d90a      	bls.n	baa <_sercom_get_default_pad+0x1e>
     b94:	4b3f      	ldr	r3, [pc, #252]	; (c94 <_sercom_get_default_pad+0x108>)
     b96:	4298      	cmp	r0, r3
     b98:	d04d      	beq.n	c36 <_sercom_get_default_pad+0xaa>
     b9a:	4b3f      	ldr	r3, [pc, #252]	; (c98 <_sercom_get_default_pad+0x10c>)
     b9c:	4298      	cmp	r0, r3
     b9e:	d05a      	beq.n	c56 <_sercom_get_default_pad+0xca>
     ba0:	4b3e      	ldr	r3, [pc, #248]	; (c9c <_sercom_get_default_pad+0x110>)
     ba2:	4298      	cmp	r0, r3
     ba4:	d037      	beq.n	c16 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     ba6:	2000      	movs	r0, #0
}
     ba8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     baa:	4b3d      	ldr	r3, [pc, #244]	; (ca0 <_sercom_get_default_pad+0x114>)
     bac:	4298      	cmp	r0, r3
     bae:	d00c      	beq.n	bca <_sercom_get_default_pad+0x3e>
     bb0:	4b3c      	ldr	r3, [pc, #240]	; (ca4 <_sercom_get_default_pad+0x118>)
     bb2:	4298      	cmp	r0, r3
     bb4:	d1f7      	bne.n	ba6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bb6:	2901      	cmp	r1, #1
     bb8:	d017      	beq.n	bea <_sercom_get_default_pad+0x5e>
     bba:	2900      	cmp	r1, #0
     bbc:	d05d      	beq.n	c7a <_sercom_get_default_pad+0xee>
     bbe:	2902      	cmp	r1, #2
     bc0:	d015      	beq.n	bee <_sercom_get_default_pad+0x62>
     bc2:	2903      	cmp	r1, #3
     bc4:	d015      	beq.n	bf2 <_sercom_get_default_pad+0x66>
	return 0;
     bc6:	2000      	movs	r0, #0
     bc8:	e7ee      	b.n	ba8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bca:	2901      	cmp	r1, #1
     bcc:	d007      	beq.n	bde <_sercom_get_default_pad+0x52>
     bce:	2900      	cmp	r1, #0
     bd0:	d051      	beq.n	c76 <_sercom_get_default_pad+0xea>
     bd2:	2902      	cmp	r1, #2
     bd4:	d005      	beq.n	be2 <_sercom_get_default_pad+0x56>
     bd6:	2903      	cmp	r1, #3
     bd8:	d005      	beq.n	be6 <_sercom_get_default_pad+0x5a>
	return 0;
     bda:	2000      	movs	r0, #0
     bdc:	e7e4      	b.n	ba8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bde:	4832      	ldr	r0, [pc, #200]	; (ca8 <_sercom_get_default_pad+0x11c>)
     be0:	e7e2      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     be2:	4832      	ldr	r0, [pc, #200]	; (cac <_sercom_get_default_pad+0x120>)
     be4:	e7e0      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     be6:	4832      	ldr	r0, [pc, #200]	; (cb0 <_sercom_get_default_pad+0x124>)
     be8:	e7de      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     bea:	4832      	ldr	r0, [pc, #200]	; (cb4 <_sercom_get_default_pad+0x128>)
     bec:	e7dc      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     bee:	4832      	ldr	r0, [pc, #200]	; (cb8 <_sercom_get_default_pad+0x12c>)
     bf0:	e7da      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     bf2:	4832      	ldr	r0, [pc, #200]	; (cbc <_sercom_get_default_pad+0x130>)
     bf4:	e7d8      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     bf6:	2901      	cmp	r1, #1
     bf8:	d007      	beq.n	c0a <_sercom_get_default_pad+0x7e>
     bfa:	2900      	cmp	r1, #0
     bfc:	d03f      	beq.n	c7e <_sercom_get_default_pad+0xf2>
     bfe:	2902      	cmp	r1, #2
     c00:	d005      	beq.n	c0e <_sercom_get_default_pad+0x82>
     c02:	2903      	cmp	r1, #3
     c04:	d005      	beq.n	c12 <_sercom_get_default_pad+0x86>
	return 0;
     c06:	2000      	movs	r0, #0
     c08:	e7ce      	b.n	ba8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c0a:	482d      	ldr	r0, [pc, #180]	; (cc0 <_sercom_get_default_pad+0x134>)
     c0c:	e7cc      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c0e:	482d      	ldr	r0, [pc, #180]	; (cc4 <_sercom_get_default_pad+0x138>)
     c10:	e7ca      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c12:	482d      	ldr	r0, [pc, #180]	; (cc8 <_sercom_get_default_pad+0x13c>)
     c14:	e7c8      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c16:	2901      	cmp	r1, #1
     c18:	d007      	beq.n	c2a <_sercom_get_default_pad+0x9e>
     c1a:	2900      	cmp	r1, #0
     c1c:	d031      	beq.n	c82 <_sercom_get_default_pad+0xf6>
     c1e:	2902      	cmp	r1, #2
     c20:	d005      	beq.n	c2e <_sercom_get_default_pad+0xa2>
     c22:	2903      	cmp	r1, #3
     c24:	d005      	beq.n	c32 <_sercom_get_default_pad+0xa6>
	return 0;
     c26:	2000      	movs	r0, #0
     c28:	e7be      	b.n	ba8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c2a:	4828      	ldr	r0, [pc, #160]	; (ccc <_sercom_get_default_pad+0x140>)
     c2c:	e7bc      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c2e:	4828      	ldr	r0, [pc, #160]	; (cd0 <_sercom_get_default_pad+0x144>)
     c30:	e7ba      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c32:	4828      	ldr	r0, [pc, #160]	; (cd4 <_sercom_get_default_pad+0x148>)
     c34:	e7b8      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c36:	2901      	cmp	r1, #1
     c38:	d007      	beq.n	c4a <_sercom_get_default_pad+0xbe>
     c3a:	2900      	cmp	r1, #0
     c3c:	d023      	beq.n	c86 <_sercom_get_default_pad+0xfa>
     c3e:	2902      	cmp	r1, #2
     c40:	d005      	beq.n	c4e <_sercom_get_default_pad+0xc2>
     c42:	2903      	cmp	r1, #3
     c44:	d005      	beq.n	c52 <_sercom_get_default_pad+0xc6>
	return 0;
     c46:	2000      	movs	r0, #0
     c48:	e7ae      	b.n	ba8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c4a:	4823      	ldr	r0, [pc, #140]	; (cd8 <_sercom_get_default_pad+0x14c>)
     c4c:	e7ac      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c4e:	4823      	ldr	r0, [pc, #140]	; (cdc <_sercom_get_default_pad+0x150>)
     c50:	e7aa      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c52:	4823      	ldr	r0, [pc, #140]	; (ce0 <_sercom_get_default_pad+0x154>)
     c54:	e7a8      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c56:	2901      	cmp	r1, #1
     c58:	d007      	beq.n	c6a <_sercom_get_default_pad+0xde>
     c5a:	2900      	cmp	r1, #0
     c5c:	d015      	beq.n	c8a <_sercom_get_default_pad+0xfe>
     c5e:	2902      	cmp	r1, #2
     c60:	d005      	beq.n	c6e <_sercom_get_default_pad+0xe2>
     c62:	2903      	cmp	r1, #3
     c64:	d005      	beq.n	c72 <_sercom_get_default_pad+0xe6>
	return 0;
     c66:	2000      	movs	r0, #0
     c68:	e79e      	b.n	ba8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c6a:	481e      	ldr	r0, [pc, #120]	; (ce4 <_sercom_get_default_pad+0x158>)
     c6c:	e79c      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c6e:	481e      	ldr	r0, [pc, #120]	; (ce8 <_sercom_get_default_pad+0x15c>)
     c70:	e79a      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c72:	481e      	ldr	r0, [pc, #120]	; (cec <_sercom_get_default_pad+0x160>)
     c74:	e798      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c76:	481e      	ldr	r0, [pc, #120]	; (cf0 <_sercom_get_default_pad+0x164>)
     c78:	e796      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c7a:	2003      	movs	r0, #3
     c7c:	e794      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c7e:	481d      	ldr	r0, [pc, #116]	; (cf4 <_sercom_get_default_pad+0x168>)
     c80:	e792      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c82:	481d      	ldr	r0, [pc, #116]	; (cf8 <_sercom_get_default_pad+0x16c>)
     c84:	e790      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c86:	481d      	ldr	r0, [pc, #116]	; (cfc <_sercom_get_default_pad+0x170>)
     c88:	e78e      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c8a:	481d      	ldr	r0, [pc, #116]	; (d00 <_sercom_get_default_pad+0x174>)
     c8c:	e78c      	b.n	ba8 <_sercom_get_default_pad+0x1c>
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	42001000 	.word	0x42001000
     c94:	42001800 	.word	0x42001800
     c98:	42001c00 	.word	0x42001c00
     c9c:	42001400 	.word	0x42001400
     ca0:	42000800 	.word	0x42000800
     ca4:	42000c00 	.word	0x42000c00
     ca8:	00050003 	.word	0x00050003
     cac:	00060003 	.word	0x00060003
     cb0:	00070003 	.word	0x00070003
     cb4:	00010003 	.word	0x00010003
     cb8:	001e0003 	.word	0x001e0003
     cbc:	001f0003 	.word	0x001f0003
     cc0:	00090003 	.word	0x00090003
     cc4:	000a0003 	.word	0x000a0003
     cc8:	000b0003 	.word	0x000b0003
     ccc:	00110003 	.word	0x00110003
     cd0:	00120003 	.word	0x00120003
     cd4:	00130003 	.word	0x00130003
     cd8:	000d0003 	.word	0x000d0003
     cdc:	000e0003 	.word	0x000e0003
     ce0:	000f0003 	.word	0x000f0003
     ce4:	00170003 	.word	0x00170003
     ce8:	00180003 	.word	0x00180003
     cec:	00190003 	.word	0x00190003
     cf0:	00040003 	.word	0x00040003
     cf4:	00080003 	.word	0x00080003
     cf8:	00100003 	.word	0x00100003
     cfc:	000c0003 	.word	0x000c0003
     d00:	00160003 	.word	0x00160003

00000d04 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d04:	b530      	push	{r4, r5, lr}
     d06:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     d08:	4b0b      	ldr	r3, [pc, #44]	; (d38 <_sercom_get_sercom_inst_index+0x34>)
     d0a:	466a      	mov	r2, sp
     d0c:	cb32      	ldmia	r3!, {r1, r4, r5}
     d0e:	c232      	stmia	r2!, {r1, r4, r5}
     d10:	cb32      	ldmia	r3!, {r1, r4, r5}
     d12:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d14:	9b00      	ldr	r3, [sp, #0]
     d16:	4283      	cmp	r3, r0
     d18:	d00b      	beq.n	d32 <_sercom_get_sercom_inst_index+0x2e>
     d1a:	2301      	movs	r3, #1
     d1c:	009a      	lsls	r2, r3, #2
     d1e:	4669      	mov	r1, sp
     d20:	5852      	ldr	r2, [r2, r1]
     d22:	4282      	cmp	r2, r0
     d24:	d006      	beq.n	d34 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d26:	3301      	adds	r3, #1
     d28:	2b06      	cmp	r3, #6
     d2a:	d1f7      	bne.n	d1c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     d2c:	2000      	movs	r0, #0
}
     d2e:	b007      	add	sp, #28
     d30:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d32:	2300      	movs	r3, #0
			return i;
     d34:	b2d8      	uxtb	r0, r3
     d36:	e7fa      	b.n	d2e <_sercom_get_sercom_inst_index+0x2a>
     d38:	00004c94 	.word	0x00004c94

00000d3c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d3e:	46de      	mov	lr, fp
     d40:	4657      	mov	r7, sl
     d42:	464e      	mov	r6, r9
     d44:	4645      	mov	r5, r8
     d46:	b5e0      	push	{r5, r6, r7, lr}
     d48:	b091      	sub	sp, #68	; 0x44
     d4a:	0005      	movs	r5, r0
     d4c:	000c      	movs	r4, r1
     d4e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     d50:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d52:	0008      	movs	r0, r1
     d54:	4bab      	ldr	r3, [pc, #684]	; (1004 <usart_init+0x2c8>)
     d56:	4798      	blx	r3
     d58:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d5a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d5c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d5e:	07db      	lsls	r3, r3, #31
     d60:	d506      	bpl.n	d70 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     d62:	b011      	add	sp, #68	; 0x44
     d64:	bc3c      	pop	{r2, r3, r4, r5}
     d66:	4690      	mov	r8, r2
     d68:	4699      	mov	r9, r3
     d6a:	46a2      	mov	sl, r4
     d6c:	46ab      	mov	fp, r5
     d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d70:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     d72:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d74:	079b      	lsls	r3, r3, #30
     d76:	d4f4      	bmi.n	d62 <usart_init+0x26>
     d78:	49a3      	ldr	r1, [pc, #652]	; (1008 <usart_init+0x2cc>)
     d7a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d7c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d7e:	2301      	movs	r3, #1
     d80:	40bb      	lsls	r3, r7
     d82:	4303      	orrs	r3, r0
     d84:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     d86:	a90f      	add	r1, sp, #60	; 0x3c
     d88:	272d      	movs	r7, #45	; 0x2d
     d8a:	5df3      	ldrb	r3, [r6, r7]
     d8c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d8e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d90:	b2d3      	uxtb	r3, r2
     d92:	9302      	str	r3, [sp, #8]
     d94:	0018      	movs	r0, r3
     d96:	4b9d      	ldr	r3, [pc, #628]	; (100c <usart_init+0x2d0>)
     d98:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d9a:	9802      	ldr	r0, [sp, #8]
     d9c:	4b9c      	ldr	r3, [pc, #624]	; (1010 <usart_init+0x2d4>)
     d9e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     da0:	5df0      	ldrb	r0, [r6, r7]
     da2:	2100      	movs	r1, #0
     da4:	4b9b      	ldr	r3, [pc, #620]	; (1014 <usart_init+0x2d8>)
     da6:	4798      	blx	r3
	module->character_size = config->character_size;
     da8:	7af3      	ldrb	r3, [r6, #11]
     daa:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     dac:	2324      	movs	r3, #36	; 0x24
     dae:	5cf3      	ldrb	r3, [r6, r3]
     db0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     db2:	2325      	movs	r3, #37	; 0x25
     db4:	5cf3      	ldrb	r3, [r6, r3]
     db6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     db8:	7ef3      	ldrb	r3, [r6, #27]
     dba:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     dbc:	7f33      	ldrb	r3, [r6, #28]
     dbe:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     dc0:	682b      	ldr	r3, [r5, #0]
     dc2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     dc4:	0018      	movs	r0, r3
     dc6:	4b8f      	ldr	r3, [pc, #572]	; (1004 <usart_init+0x2c8>)
     dc8:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     dca:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     dcc:	2200      	movs	r2, #0
     dce:	230e      	movs	r3, #14
     dd0:	a906      	add	r1, sp, #24
     dd2:	468c      	mov	ip, r1
     dd4:	4463      	add	r3, ip
     dd6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     dd8:	8a32      	ldrh	r2, [r6, #16]
     dda:	9202      	str	r2, [sp, #8]
     ddc:	2380      	movs	r3, #128	; 0x80
     dde:	01db      	lsls	r3, r3, #7
     de0:	429a      	cmp	r2, r3
     de2:	d100      	bne.n	de6 <usart_init+0xaa>
     de4:	e09b      	b.n	f1e <usart_init+0x1e2>
     de6:	d90f      	bls.n	e08 <usart_init+0xcc>
     de8:	23c0      	movs	r3, #192	; 0xc0
     dea:	01db      	lsls	r3, r3, #7
     dec:	9a02      	ldr	r2, [sp, #8]
     dee:	429a      	cmp	r2, r3
     df0:	d100      	bne.n	df4 <usart_init+0xb8>
     df2:	e08f      	b.n	f14 <usart_init+0x1d8>
     df4:	2380      	movs	r3, #128	; 0x80
     df6:	021b      	lsls	r3, r3, #8
     df8:	429a      	cmp	r2, r3
     dfa:	d000      	beq.n	dfe <usart_init+0xc2>
     dfc:	e0fd      	b.n	ffa <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     dfe:	2303      	movs	r3, #3
     e00:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e02:	2300      	movs	r3, #0
     e04:	9307      	str	r3, [sp, #28]
     e06:	e008      	b.n	e1a <usart_init+0xde>
	switch (config->sample_rate) {
     e08:	2380      	movs	r3, #128	; 0x80
     e0a:	019b      	lsls	r3, r3, #6
     e0c:	429a      	cmp	r2, r3
     e0e:	d000      	beq.n	e12 <usart_init+0xd6>
     e10:	e0f3      	b.n	ffa <usart_init+0x2be>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e12:	2310      	movs	r3, #16
     e14:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     e16:	3b0f      	subs	r3, #15
     e18:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     e1a:	6833      	ldr	r3, [r6, #0]
     e1c:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     e1e:	68f3      	ldr	r3, [r6, #12]
     e20:	9305      	str	r3, [sp, #20]
		config->sample_adjustment |
     e22:	6973      	ldr	r3, [r6, #20]
     e24:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e26:	7e33      	ldrb	r3, [r6, #24]
     e28:	9303      	str	r3, [sp, #12]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e2a:	2326      	movs	r3, #38	; 0x26
     e2c:	5cf3      	ldrb	r3, [r6, r3]
     e2e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     e30:	6873      	ldr	r3, [r6, #4]
     e32:	4699      	mov	r9, r3
	switch (transfer_mode)
     e34:	2b00      	cmp	r3, #0
     e36:	d100      	bne.n	e3a <usart_init+0xfe>
     e38:	e09d      	b.n	f76 <usart_init+0x23a>
     e3a:	2380      	movs	r3, #128	; 0x80
     e3c:	055b      	lsls	r3, r3, #21
     e3e:	4599      	cmp	r9, r3
     e40:	d100      	bne.n	e44 <usart_init+0x108>
     e42:	e081      	b.n	f48 <usart_init+0x20c>
	if(config->encoding_format_enable) {
     e44:	7e73      	ldrb	r3, [r6, #25]
     e46:	2b00      	cmp	r3, #0
     e48:	d002      	beq.n	e50 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     e4a:	7eb3      	ldrb	r3, [r6, #26]
     e4c:	4642      	mov	r2, r8
     e4e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     e50:	230e      	movs	r3, #14
     e52:	aa06      	add	r2, sp, #24
     e54:	4694      	mov	ip, r2
     e56:	4463      	add	r3, ip
     e58:	881b      	ldrh	r3, [r3, #0]
     e5a:	4642      	mov	r2, r8
     e5c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     e5e:	465b      	mov	r3, fp
     e60:	9a05      	ldr	r2, [sp, #20]
     e62:	4313      	orrs	r3, r2
     e64:	9a04      	ldr	r2, [sp, #16]
     e66:	4313      	orrs	r3, r2
     e68:	464a      	mov	r2, r9
     e6a:	4313      	orrs	r3, r2
     e6c:	9f02      	ldr	r7, [sp, #8]
     e6e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e70:	9b03      	ldr	r3, [sp, #12]
     e72:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     e74:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e76:	4653      	mov	r3, sl
     e78:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     e7a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     e7c:	2327      	movs	r3, #39	; 0x27
     e7e:	5cf3      	ldrb	r3, [r6, r3]
     e80:	2b00      	cmp	r3, #0
     e82:	d101      	bne.n	e88 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     e84:	3304      	adds	r3, #4
     e86:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     e88:	7e73      	ldrb	r3, [r6, #25]
     e8a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     e8c:	7f32      	ldrb	r2, [r6, #28]
     e8e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     e90:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     e92:	7f72      	ldrb	r2, [r6, #29]
     e94:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     e96:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     e98:	2224      	movs	r2, #36	; 0x24
     e9a:	5cb2      	ldrb	r2, [r6, r2]
     e9c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     e9e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     ea0:	2225      	movs	r2, #37	; 0x25
     ea2:	5cb2      	ldrb	r2, [r6, r2]
     ea4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     ea6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     ea8:	7ab1      	ldrb	r1, [r6, #10]
     eaa:	7af2      	ldrb	r2, [r6, #11]
     eac:	4311      	orrs	r1, r2
     eae:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     eb0:	8933      	ldrh	r3, [r6, #8]
     eb2:	2bff      	cmp	r3, #255	; 0xff
     eb4:	d100      	bne.n	eb8 <usart_init+0x17c>
     eb6:	e082      	b.n	fbe <usart_init+0x282>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     eb8:	2280      	movs	r2, #128	; 0x80
     eba:	0452      	lsls	r2, r2, #17
     ebc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     ebe:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     ec0:	232c      	movs	r3, #44	; 0x2c
     ec2:	5cf3      	ldrb	r3, [r6, r3]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d103      	bne.n	ed0 <usart_init+0x194>
     ec8:	4b53      	ldr	r3, [pc, #332]	; (1018 <usart_init+0x2dc>)
     eca:	789b      	ldrb	r3, [r3, #2]
     ecc:	079b      	lsls	r3, r3, #30
     ece:	d501      	bpl.n	ed4 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     ed0:	2380      	movs	r3, #128	; 0x80
     ed2:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ed4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ed6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ed8:	2b00      	cmp	r3, #0
     eda:	d1fc      	bne.n	ed6 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     edc:	4643      	mov	r3, r8
     ede:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     ee0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     ee2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     ee4:	2b00      	cmp	r3, #0
     ee6:	d1fc      	bne.n	ee2 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     ee8:	4643      	mov	r3, r8
     eea:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     eec:	ab0e      	add	r3, sp, #56	; 0x38
     eee:	2280      	movs	r2, #128	; 0x80
     ef0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ef2:	2200      	movs	r2, #0
     ef4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     ef6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ef8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     efa:	6b33      	ldr	r3, [r6, #48]	; 0x30
     efc:	930a      	str	r3, [sp, #40]	; 0x28
     efe:	6b73      	ldr	r3, [r6, #52]	; 0x34
     f00:	930b      	str	r3, [sp, #44]	; 0x2c
     f02:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     f04:	930c      	str	r3, [sp, #48]	; 0x30
     f06:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     f08:	9302      	str	r3, [sp, #8]
     f0a:	930d      	str	r3, [sp, #52]	; 0x34
     f0c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f0e:	ad0a      	add	r5, sp, #40	; 0x28
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f10:	4e42      	ldr	r6, [pc, #264]	; (101c <usart_init+0x2e0>)
     f12:	e063      	b.n	fdc <usart_init+0x2a0>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f14:	2308      	movs	r3, #8
     f16:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f18:	3b07      	subs	r3, #7
     f1a:	9307      	str	r3, [sp, #28]
     f1c:	e77d      	b.n	e1a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     f1e:	6833      	ldr	r3, [r6, #0]
     f20:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     f22:	68f3      	ldr	r3, [r6, #12]
     f24:	9305      	str	r3, [sp, #20]
		config->sample_adjustment |
     f26:	6973      	ldr	r3, [r6, #20]
     f28:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f2a:	7e33      	ldrb	r3, [r6, #24]
     f2c:	9303      	str	r3, [sp, #12]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f2e:	2326      	movs	r3, #38	; 0x26
     f30:	5cf3      	ldrb	r3, [r6, r3]
     f32:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     f34:	6873      	ldr	r3, [r6, #4]
     f36:	4699      	mov	r9, r3
	switch (transfer_mode)
     f38:	2b00      	cmp	r3, #0
     f3a:	d018      	beq.n	f6e <usart_init+0x232>
     f3c:	2380      	movs	r3, #128	; 0x80
     f3e:	055b      	lsls	r3, r3, #21
     f40:	4599      	cmp	r9, r3
     f42:	d001      	beq.n	f48 <usart_init+0x20c>
	enum status_code status_code = STATUS_OK;
     f44:	2000      	movs	r0, #0
     f46:	e025      	b.n	f94 <usart_init+0x258>
			if (!config->use_external_clock) {
     f48:	2327      	movs	r3, #39	; 0x27
     f4a:	5cf3      	ldrb	r3, [r6, r3]
     f4c:	2b00      	cmp	r3, #0
     f4e:	d000      	beq.n	f52 <usart_init+0x216>
     f50:	e778      	b.n	e44 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     f52:	6a33      	ldr	r3, [r6, #32]
     f54:	001f      	movs	r7, r3
     f56:	b2c0      	uxtb	r0, r0
     f58:	4b31      	ldr	r3, [pc, #196]	; (1020 <usart_init+0x2e4>)
     f5a:	4798      	blx	r3
     f5c:	0001      	movs	r1, r0
     f5e:	220e      	movs	r2, #14
     f60:	ab06      	add	r3, sp, #24
     f62:	469c      	mov	ip, r3
     f64:	4462      	add	r2, ip
     f66:	0038      	movs	r0, r7
     f68:	4b2e      	ldr	r3, [pc, #184]	; (1024 <usart_init+0x2e8>)
     f6a:	4798      	blx	r3
     f6c:	e012      	b.n	f94 <usart_init+0x258>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f6e:	2308      	movs	r3, #8
     f70:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f72:	2300      	movs	r3, #0
     f74:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     f76:	2327      	movs	r3, #39	; 0x27
     f78:	5cf3      	ldrb	r3, [r6, r3]
     f7a:	2b00      	cmp	r3, #0
     f7c:	d00e      	beq.n	f9c <usart_init+0x260>
				status_code =
     f7e:	9b06      	ldr	r3, [sp, #24]
     f80:	9300      	str	r3, [sp, #0]
     f82:	9b07      	ldr	r3, [sp, #28]
     f84:	220e      	movs	r2, #14
     f86:	a906      	add	r1, sp, #24
     f88:	468c      	mov	ip, r1
     f8a:	4462      	add	r2, ip
     f8c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     f8e:	6a30      	ldr	r0, [r6, #32]
     f90:	4f25      	ldr	r7, [pc, #148]	; (1028 <usart_init+0x2ec>)
     f92:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     f94:	2800      	cmp	r0, #0
     f96:	d000      	beq.n	f9a <usart_init+0x25e>
     f98:	e6e3      	b.n	d62 <usart_init+0x26>
     f9a:	e753      	b.n	e44 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     f9c:	6a33      	ldr	r3, [r6, #32]
     f9e:	001f      	movs	r7, r3
     fa0:	b2c0      	uxtb	r0, r0
     fa2:	4b1f      	ldr	r3, [pc, #124]	; (1020 <usart_init+0x2e4>)
     fa4:	4798      	blx	r3
     fa6:	0001      	movs	r1, r0
				status_code =
     fa8:	9b06      	ldr	r3, [sp, #24]
     faa:	9300      	str	r3, [sp, #0]
     fac:	9b07      	ldr	r3, [sp, #28]
     fae:	220e      	movs	r2, #14
     fb0:	a806      	add	r0, sp, #24
     fb2:	4684      	mov	ip, r0
     fb4:	4462      	add	r2, ip
     fb6:	0038      	movs	r0, r7
     fb8:	4f1b      	ldr	r7, [pc, #108]	; (1028 <usart_init+0x2ec>)
     fba:	47b8      	blx	r7
     fbc:	e7ea      	b.n	f94 <usart_init+0x258>
		if(config->lin_slave_enable) {
     fbe:	7ef3      	ldrb	r3, [r6, #27]
     fc0:	2b00      	cmp	r3, #0
     fc2:	d100      	bne.n	fc6 <usart_init+0x28a>
     fc4:	e77c      	b.n	ec0 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     fc6:	2380      	movs	r3, #128	; 0x80
     fc8:	04db      	lsls	r3, r3, #19
     fca:	431f      	orrs	r7, r3
     fcc:	e778      	b.n	ec0 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     fce:	0020      	movs	r0, r4
     fd0:	4b16      	ldr	r3, [pc, #88]	; (102c <usart_init+0x2f0>)
     fd2:	4798      	blx	r3
     fd4:	e007      	b.n	fe6 <usart_init+0x2aa>
     fd6:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     fd8:	2f04      	cmp	r7, #4
     fda:	d00c      	beq.n	ff6 <usart_init+0x2ba>
     fdc:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fde:	00bb      	lsls	r3, r7, #2
     fe0:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     fe2:	2800      	cmp	r0, #0
     fe4:	d0f3      	beq.n	fce <usart_init+0x292>
		if (current_pinmux != PINMUX_UNUSED) {
     fe6:	1c43      	adds	r3, r0, #1
     fe8:	d0f5      	beq.n	fd6 <usart_init+0x29a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     fea:	a90e      	add	r1, sp, #56	; 0x38
     fec:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     fee:	0c00      	lsrs	r0, r0, #16
     ff0:	b2c0      	uxtb	r0, r0
     ff2:	47b0      	blx	r6
     ff4:	e7ef      	b.n	fd6 <usart_init+0x29a>
	return status_code;
     ff6:	2000      	movs	r0, #0
     ff8:	e6b3      	b.n	d62 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     ffa:	2310      	movs	r3, #16
     ffc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ffe:	2300      	movs	r3, #0
    1000:	9307      	str	r3, [sp, #28]
    1002:	e70a      	b.n	e1a <usart_init+0xde>
    1004:	00000d05 	.word	0x00000d05
    1008:	40000400 	.word	0x40000400
    100c:	00001769 	.word	0x00001769
    1010:	000016dd 	.word	0x000016dd
    1014:	00000b41 	.word	0x00000b41
    1018:	41002000 	.word	0x41002000
    101c:	00001861 	.word	0x00001861
    1020:	00001785 	.word	0x00001785
    1024:	00000a83 	.word	0x00000a83
    1028:	00000aad 	.word	0x00000aad
    102c:	00000b8d 	.word	0x00000b8d

00001030 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1030:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1032:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1034:	2a00      	cmp	r2, #0
    1036:	d101      	bne.n	103c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1038:	0018      	movs	r0, r3
    103a:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    103c:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    103e:	7e10      	ldrb	r0, [r2, #24]
		return STATUS_BUSY;
    1040:	3b17      	subs	r3, #23
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    1042:	07c0      	lsls	r0, r0, #31
    1044:	d5f8      	bpl.n	1038 <usart_write_wait+0x8>
	usart_hw->DATA.reg = tx_data;
    1046:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1048:	2102      	movs	r1, #2
    104a:	7e13      	ldrb	r3, [r2, #24]
    104c:	420b      	tst	r3, r1
    104e:	d0fc      	beq.n	104a <usart_write_wait+0x1a>
	return STATUS_OK;
    1050:	2300      	movs	r3, #0
    1052:	e7f1      	b.n	1038 <usart_write_wait+0x8>

00001054 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1054:	4b0c      	ldr	r3, [pc, #48]	; (1088 <cpu_irq_enter_critical+0x34>)
    1056:	681b      	ldr	r3, [r3, #0]
    1058:	2b00      	cmp	r3, #0
    105a:	d106      	bne.n	106a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    105c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1060:	2b00      	cmp	r3, #0
    1062:	d007      	beq.n	1074 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1064:	2200      	movs	r2, #0
    1066:	4b09      	ldr	r3, [pc, #36]	; (108c <cpu_irq_enter_critical+0x38>)
    1068:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    106a:	4a07      	ldr	r2, [pc, #28]	; (1088 <cpu_irq_enter_critical+0x34>)
    106c:	6813      	ldr	r3, [r2, #0]
    106e:	3301      	adds	r3, #1
    1070:	6013      	str	r3, [r2, #0]
}
    1072:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1074:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1076:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    107a:	2200      	movs	r2, #0
    107c:	4b04      	ldr	r3, [pc, #16]	; (1090 <cpu_irq_enter_critical+0x3c>)
    107e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1080:	3201      	adds	r2, #1
    1082:	4b02      	ldr	r3, [pc, #8]	; (108c <cpu_irq_enter_critical+0x38>)
    1084:	701a      	strb	r2, [r3, #0]
    1086:	e7f0      	b.n	106a <cpu_irq_enter_critical+0x16>
    1088:	2000009c 	.word	0x2000009c
    108c:	200000a0 	.word	0x200000a0
    1090:	2000000c 	.word	0x2000000c

00001094 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1094:	4b08      	ldr	r3, [pc, #32]	; (10b8 <cpu_irq_leave_critical+0x24>)
    1096:	681a      	ldr	r2, [r3, #0]
    1098:	3a01      	subs	r2, #1
    109a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    109c:	681b      	ldr	r3, [r3, #0]
    109e:	2b00      	cmp	r3, #0
    10a0:	d109      	bne.n	10b6 <cpu_irq_leave_critical+0x22>
    10a2:	4b06      	ldr	r3, [pc, #24]	; (10bc <cpu_irq_leave_critical+0x28>)
    10a4:	781b      	ldrb	r3, [r3, #0]
    10a6:	2b00      	cmp	r3, #0
    10a8:	d005      	beq.n	10b6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    10aa:	2201      	movs	r2, #1
    10ac:	4b04      	ldr	r3, [pc, #16]	; (10c0 <cpu_irq_leave_critical+0x2c>)
    10ae:	701a      	strb	r2, [r3, #0]
    10b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    10b4:	b662      	cpsie	i
	}
}
    10b6:	4770      	bx	lr
    10b8:	2000009c 	.word	0x2000009c
    10bc:	200000a0 	.word	0x200000a0
    10c0:	2000000c 	.word	0x2000000c

000010c4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    10c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10c6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    10c8:	ac01      	add	r4, sp, #4
    10ca:	2501      	movs	r5, #1
    10cc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    10ce:	2700      	movs	r7, #0
    10d0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    10d2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    10d4:	0021      	movs	r1, r4
    10d6:	2017      	movs	r0, #23
    10d8:	4e06      	ldr	r6, [pc, #24]	; (10f4 <system_board_init+0x30>)
    10da:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    10dc:	2280      	movs	r2, #128	; 0x80
    10de:	0412      	lsls	r2, r2, #16
    10e0:	4b05      	ldr	r3, [pc, #20]	; (10f8 <system_board_init+0x34>)
    10e2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    10e4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    10e6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    10e8:	0021      	movs	r1, r4
    10ea:	2037      	movs	r0, #55	; 0x37
    10ec:	47b0      	blx	r6
}
    10ee:	b003      	add	sp, #12
    10f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	000010fd 	.word	0x000010fd
    10f8:	41004400 	.word	0x41004400

000010fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    10fc:	b500      	push	{lr}
    10fe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1100:	ab01      	add	r3, sp, #4
    1102:	2280      	movs	r2, #128	; 0x80
    1104:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1106:	780a      	ldrb	r2, [r1, #0]
    1108:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    110a:	784a      	ldrb	r2, [r1, #1]
    110c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    110e:	788a      	ldrb	r2, [r1, #2]
    1110:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1112:	0019      	movs	r1, r3
    1114:	4b01      	ldr	r3, [pc, #4]	; (111c <port_pin_set_config+0x20>)
    1116:	4798      	blx	r3
}
    1118:	b003      	add	sp, #12
    111a:	bd00      	pop	{pc}
    111c:	00001861 	.word	0x00001861

00001120 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1120:	b510      	push	{r4, lr}
	switch (clock_source) {
    1122:	2808      	cmp	r0, #8
    1124:	d803      	bhi.n	112e <system_clock_source_get_hz+0xe>
    1126:	0080      	lsls	r0, r0, #2
    1128:	4b1c      	ldr	r3, [pc, #112]	; (119c <system_clock_source_get_hz+0x7c>)
    112a:	581b      	ldr	r3, [r3, r0]
    112c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    112e:	2000      	movs	r0, #0
    1130:	e032      	b.n	1198 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1132:	4b1b      	ldr	r3, [pc, #108]	; (11a0 <system_clock_source_get_hz+0x80>)
    1134:	6918      	ldr	r0, [r3, #16]
    1136:	e02f      	b.n	1198 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1138:	4b1a      	ldr	r3, [pc, #104]	; (11a4 <system_clock_source_get_hz+0x84>)
    113a:	6a1b      	ldr	r3, [r3, #32]
    113c:	059b      	lsls	r3, r3, #22
    113e:	0f9b      	lsrs	r3, r3, #30
    1140:	4819      	ldr	r0, [pc, #100]	; (11a8 <system_clock_source_get_hz+0x88>)
    1142:	40d8      	lsrs	r0, r3
    1144:	e028      	b.n	1198 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1146:	4b16      	ldr	r3, [pc, #88]	; (11a0 <system_clock_source_get_hz+0x80>)
    1148:	6958      	ldr	r0, [r3, #20]
    114a:	e025      	b.n	1198 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    114c:	4b14      	ldr	r3, [pc, #80]	; (11a0 <system_clock_source_get_hz+0x80>)
    114e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1150:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1152:	079b      	lsls	r3, r3, #30
    1154:	d520      	bpl.n	1198 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1156:	4913      	ldr	r1, [pc, #76]	; (11a4 <system_clock_source_get_hz+0x84>)
    1158:	2210      	movs	r2, #16
    115a:	68cb      	ldr	r3, [r1, #12]
    115c:	421a      	tst	r2, r3
    115e:	d0fc      	beq.n	115a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1160:	4b0f      	ldr	r3, [pc, #60]	; (11a0 <system_clock_source_get_hz+0x80>)
    1162:	681a      	ldr	r2, [r3, #0]
    1164:	2324      	movs	r3, #36	; 0x24
    1166:	4013      	ands	r3, r2
    1168:	2b04      	cmp	r3, #4
    116a:	d001      	beq.n	1170 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    116c:	480f      	ldr	r0, [pc, #60]	; (11ac <system_clock_source_get_hz+0x8c>)
    116e:	e013      	b.n	1198 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1170:	2000      	movs	r0, #0
    1172:	4b0f      	ldr	r3, [pc, #60]	; (11b0 <system_clock_source_get_hz+0x90>)
    1174:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1176:	4b0a      	ldr	r3, [pc, #40]	; (11a0 <system_clock_source_get_hz+0x80>)
    1178:	689b      	ldr	r3, [r3, #8]
    117a:	041b      	lsls	r3, r3, #16
    117c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    117e:	4358      	muls	r0, r3
    1180:	e00a      	b.n	1198 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1182:	2350      	movs	r3, #80	; 0x50
    1184:	4a07      	ldr	r2, [pc, #28]	; (11a4 <system_clock_source_get_hz+0x84>)
    1186:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1188:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    118a:	075b      	lsls	r3, r3, #29
    118c:	d504      	bpl.n	1198 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    118e:	4b04      	ldr	r3, [pc, #16]	; (11a0 <system_clock_source_get_hz+0x80>)
    1190:	68d8      	ldr	r0, [r3, #12]
    1192:	e001      	b.n	1198 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1194:	2080      	movs	r0, #128	; 0x80
    1196:	0200      	lsls	r0, r0, #8
	}
}
    1198:	bd10      	pop	{r4, pc}
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	00004cac 	.word	0x00004cac
    11a0:	200000a4 	.word	0x200000a4
    11a4:	40000800 	.word	0x40000800
    11a8:	007a1200 	.word	0x007a1200
    11ac:	02dc6c00 	.word	0x02dc6c00
    11b0:	00001785 	.word	0x00001785

000011b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    11b4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    11b6:	490c      	ldr	r1, [pc, #48]	; (11e8 <system_clock_source_osc8m_set_config+0x34>)
    11b8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    11ba:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    11bc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    11be:	7840      	ldrb	r0, [r0, #1]
    11c0:	2201      	movs	r2, #1
    11c2:	4010      	ands	r0, r2
    11c4:	0180      	lsls	r0, r0, #6
    11c6:	2640      	movs	r6, #64	; 0x40
    11c8:	43b3      	bics	r3, r6
    11ca:	4303      	orrs	r3, r0
    11cc:	402a      	ands	r2, r5
    11ce:	01d2      	lsls	r2, r2, #7
    11d0:	2080      	movs	r0, #128	; 0x80
    11d2:	4383      	bics	r3, r0
    11d4:	4313      	orrs	r3, r2
    11d6:	2203      	movs	r2, #3
    11d8:	4022      	ands	r2, r4
    11da:	0212      	lsls	r2, r2, #8
    11dc:	4803      	ldr	r0, [pc, #12]	; (11ec <system_clock_source_osc8m_set_config+0x38>)
    11de:	4003      	ands	r3, r0
    11e0:	4313      	orrs	r3, r2
    11e2:	620b      	str	r3, [r1, #32]
}
    11e4:	bd70      	pop	{r4, r5, r6, pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	40000800 	.word	0x40000800
    11ec:	fffffcff 	.word	0xfffffcff

000011f0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    11f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11f2:	46de      	mov	lr, fp
    11f4:	4657      	mov	r7, sl
    11f6:	464e      	mov	r6, r9
    11f8:	4645      	mov	r5, r8
    11fa:	b5e0      	push	{r5, r6, r7, lr}
    11fc:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    11fe:	4b26      	ldr	r3, [pc, #152]	; (1298 <system_clock_source_xosc32k_set_config+0xa8>)
    1200:	469b      	mov	fp, r3
    1202:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1204:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1206:	7800      	ldrb	r0, [r0, #0]
    1208:	4242      	negs	r2, r0
    120a:	4142      	adcs	r2, r0
    120c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    120e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1210:	78ca      	ldrb	r2, [r1, #3]
    1212:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1214:	790a      	ldrb	r2, [r1, #4]
    1216:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1218:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    121a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    121c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    121e:	688a      	ldr	r2, [r1, #8]
    1220:	491e      	ldr	r1, [pc, #120]	; (129c <system_clock_source_xosc32k_set_config+0xac>)
    1222:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1224:	2101      	movs	r1, #1
    1226:	464a      	mov	r2, r9
    1228:	0092      	lsls	r2, r2, #2
    122a:	4691      	mov	r9, r2
    122c:	2204      	movs	r2, #4
    122e:	4393      	bics	r3, r2
    1230:	464a      	mov	r2, r9
    1232:	4313      	orrs	r3, r2
    1234:	4642      	mov	r2, r8
    1236:	400a      	ands	r2, r1
    1238:	00d2      	lsls	r2, r2, #3
    123a:	4690      	mov	r8, r2
    123c:	2208      	movs	r2, #8
    123e:	4393      	bics	r3, r2
    1240:	4642      	mov	r2, r8
    1242:	4313      	orrs	r3, r2
    1244:	4662      	mov	r2, ip
    1246:	400a      	ands	r2, r1
    1248:	0112      	lsls	r2, r2, #4
    124a:	4694      	mov	ip, r2
    124c:	2210      	movs	r2, #16
    124e:	4393      	bics	r3, r2
    1250:	4662      	mov	r2, ip
    1252:	4313      	orrs	r3, r2
    1254:	4008      	ands	r0, r1
    1256:	0140      	lsls	r0, r0, #5
    1258:	2220      	movs	r2, #32
    125a:	4393      	bics	r3, r2
    125c:	4303      	orrs	r3, r0
    125e:	400f      	ands	r7, r1
    1260:	01bf      	lsls	r7, r7, #6
    1262:	2040      	movs	r0, #64	; 0x40
    1264:	4383      	bics	r3, r0
    1266:	433b      	orrs	r3, r7
    1268:	400e      	ands	r6, r1
    126a:	01f6      	lsls	r6, r6, #7
    126c:	3040      	adds	r0, #64	; 0x40
    126e:	4383      	bics	r3, r0
    1270:	4333      	orrs	r3, r6
    1272:	3879      	subs	r0, #121	; 0x79
    1274:	4005      	ands	r5, r0
    1276:	022d      	lsls	r5, r5, #8
    1278:	4809      	ldr	r0, [pc, #36]	; (12a0 <system_clock_source_xosc32k_set_config+0xb0>)
    127a:	4003      	ands	r3, r0
    127c:	432b      	orrs	r3, r5
    127e:	4021      	ands	r1, r4
    1280:	0309      	lsls	r1, r1, #12
    1282:	4808      	ldr	r0, [pc, #32]	; (12a4 <system_clock_source_xosc32k_set_config+0xb4>)
    1284:	4003      	ands	r3, r0
    1286:	430b      	orrs	r3, r1
    1288:	465a      	mov	r2, fp
    128a:	8293      	strh	r3, [r2, #20]
}
    128c:	bc3c      	pop	{r2, r3, r4, r5}
    128e:	4690      	mov	r8, r2
    1290:	4699      	mov	r9, r3
    1292:	46a2      	mov	sl, r4
    1294:	46ab      	mov	fp, r5
    1296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1298:	40000800 	.word	0x40000800
    129c:	200000a4 	.word	0x200000a4
    12a0:	fffff8ff 	.word	0xfffff8ff
    12a4:	ffffefff 	.word	0xffffefff

000012a8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    12a8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12aa:	7a03      	ldrb	r3, [r0, #8]
    12ac:	069b      	lsls	r3, r3, #26
    12ae:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    12b0:	8942      	ldrh	r2, [r0, #10]
    12b2:	0592      	lsls	r2, r2, #22
    12b4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12b6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    12b8:	4918      	ldr	r1, [pc, #96]	; (131c <system_clock_source_dfll_set_config+0x74>)
    12ba:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    12bc:	7983      	ldrb	r3, [r0, #6]
    12be:	79c2      	ldrb	r2, [r0, #7]
    12c0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    12c2:	8842      	ldrh	r2, [r0, #2]
    12c4:	8884      	ldrh	r4, [r0, #4]
    12c6:	4322      	orrs	r2, r4
    12c8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    12ca:	7842      	ldrb	r2, [r0, #1]
    12cc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    12ce:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    12d0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    12d2:	7803      	ldrb	r3, [r0, #0]
    12d4:	2b04      	cmp	r3, #4
    12d6:	d011      	beq.n	12fc <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    12d8:	2b20      	cmp	r3, #32
    12da:	d10e      	bne.n	12fa <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12dc:	7b03      	ldrb	r3, [r0, #12]
    12de:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    12e0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    12e2:	4313      	orrs	r3, r2
    12e4:	89c2      	ldrh	r2, [r0, #14]
    12e6:	0412      	lsls	r2, r2, #16
    12e8:	490d      	ldr	r1, [pc, #52]	; (1320 <system_clock_source_dfll_set_config+0x78>)
    12ea:	400a      	ands	r2, r1
    12ec:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    12ee:	4a0b      	ldr	r2, [pc, #44]	; (131c <system_clock_source_dfll_set_config+0x74>)
    12f0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    12f2:	6811      	ldr	r1, [r2, #0]
    12f4:	4b0b      	ldr	r3, [pc, #44]	; (1324 <system_clock_source_dfll_set_config+0x7c>)
    12f6:	430b      	orrs	r3, r1
    12f8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    12fa:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12fc:	7b03      	ldrb	r3, [r0, #12]
    12fe:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1300:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1302:	4313      	orrs	r3, r2
    1304:	89c2      	ldrh	r2, [r0, #14]
    1306:	0412      	lsls	r2, r2, #16
    1308:	4905      	ldr	r1, [pc, #20]	; (1320 <system_clock_source_dfll_set_config+0x78>)
    130a:	400a      	ands	r2, r1
    130c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    130e:	4a03      	ldr	r2, [pc, #12]	; (131c <system_clock_source_dfll_set_config+0x74>)
    1310:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1312:	6813      	ldr	r3, [r2, #0]
    1314:	2104      	movs	r1, #4
    1316:	430b      	orrs	r3, r1
    1318:	6013      	str	r3, [r2, #0]
    131a:	e7ee      	b.n	12fa <system_clock_source_dfll_set_config+0x52>
    131c:	200000a4 	.word	0x200000a4
    1320:	03ff0000 	.word	0x03ff0000
    1324:	00000424 	.word	0x00000424

00001328 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1328:	2808      	cmp	r0, #8
    132a:	d803      	bhi.n	1334 <system_clock_source_enable+0xc>
    132c:	0080      	lsls	r0, r0, #2
    132e:	4b25      	ldr	r3, [pc, #148]	; (13c4 <system_clock_source_enable+0x9c>)
    1330:	581b      	ldr	r3, [r3, r0]
    1332:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1334:	2017      	movs	r0, #23
    1336:	e044      	b.n	13c2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1338:	4a23      	ldr	r2, [pc, #140]	; (13c8 <system_clock_source_enable+0xa0>)
    133a:	6a13      	ldr	r3, [r2, #32]
    133c:	2102      	movs	r1, #2
    133e:	430b      	orrs	r3, r1
    1340:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1342:	2000      	movs	r0, #0
    1344:	e03d      	b.n	13c2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1346:	4a20      	ldr	r2, [pc, #128]	; (13c8 <system_clock_source_enable+0xa0>)
    1348:	6993      	ldr	r3, [r2, #24]
    134a:	2102      	movs	r1, #2
    134c:	430b      	orrs	r3, r1
    134e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1350:	2000      	movs	r0, #0
		break;
    1352:	e036      	b.n	13c2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1354:	4a1c      	ldr	r2, [pc, #112]	; (13c8 <system_clock_source_enable+0xa0>)
    1356:	8a13      	ldrh	r3, [r2, #16]
    1358:	2102      	movs	r1, #2
    135a:	430b      	orrs	r3, r1
    135c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    135e:	2000      	movs	r0, #0
		break;
    1360:	e02f      	b.n	13c2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1362:	4a19      	ldr	r2, [pc, #100]	; (13c8 <system_clock_source_enable+0xa0>)
    1364:	8a93      	ldrh	r3, [r2, #20]
    1366:	2102      	movs	r1, #2
    1368:	430b      	orrs	r3, r1
    136a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    136c:	2000      	movs	r0, #0
		break;
    136e:	e028      	b.n	13c2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1370:	4916      	ldr	r1, [pc, #88]	; (13cc <system_clock_source_enable+0xa4>)
    1372:	680b      	ldr	r3, [r1, #0]
    1374:	2202      	movs	r2, #2
    1376:	4313      	orrs	r3, r2
    1378:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    137a:	4b13      	ldr	r3, [pc, #76]	; (13c8 <system_clock_source_enable+0xa0>)
    137c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    137e:	0019      	movs	r1, r3
    1380:	320e      	adds	r2, #14
    1382:	68cb      	ldr	r3, [r1, #12]
    1384:	421a      	tst	r2, r3
    1386:	d0fc      	beq.n	1382 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1388:	4a10      	ldr	r2, [pc, #64]	; (13cc <system_clock_source_enable+0xa4>)
    138a:	6891      	ldr	r1, [r2, #8]
    138c:	4b0e      	ldr	r3, [pc, #56]	; (13c8 <system_clock_source_enable+0xa0>)
    138e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1390:	6852      	ldr	r2, [r2, #4]
    1392:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1394:	2200      	movs	r2, #0
    1396:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1398:	0019      	movs	r1, r3
    139a:	3210      	adds	r2, #16
    139c:	68cb      	ldr	r3, [r1, #12]
    139e:	421a      	tst	r2, r3
    13a0:	d0fc      	beq.n	139c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    13a2:	4b0a      	ldr	r3, [pc, #40]	; (13cc <system_clock_source_enable+0xa4>)
    13a4:	681b      	ldr	r3, [r3, #0]
    13a6:	b29b      	uxth	r3, r3
    13a8:	4a07      	ldr	r2, [pc, #28]	; (13c8 <system_clock_source_enable+0xa0>)
    13aa:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    13ac:	2000      	movs	r0, #0
    13ae:	e008      	b.n	13c2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    13b0:	4905      	ldr	r1, [pc, #20]	; (13c8 <system_clock_source_enable+0xa0>)
    13b2:	2244      	movs	r2, #68	; 0x44
    13b4:	5c8b      	ldrb	r3, [r1, r2]
    13b6:	2002      	movs	r0, #2
    13b8:	4303      	orrs	r3, r0
    13ba:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    13bc:	2000      	movs	r0, #0
		break;
    13be:	e000      	b.n	13c2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    13c0:	2000      	movs	r0, #0
}
    13c2:	4770      	bx	lr
    13c4:	00004cd0 	.word	0x00004cd0
    13c8:	40000800 	.word	0x40000800
    13cc:	200000a4 	.word	0x200000a4

000013d0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    13d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13d2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    13d4:	22c2      	movs	r2, #194	; 0xc2
    13d6:	00d2      	lsls	r2, r2, #3
    13d8:	4b47      	ldr	r3, [pc, #284]	; (14f8 <system_clock_init+0x128>)
    13da:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13dc:	4a47      	ldr	r2, [pc, #284]	; (14fc <system_clock_init+0x12c>)
    13de:	6853      	ldr	r3, [r2, #4]
    13e0:	211e      	movs	r1, #30
    13e2:	438b      	bics	r3, r1
    13e4:	391a      	subs	r1, #26
    13e6:	430b      	orrs	r3, r1
    13e8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    13ea:	2202      	movs	r2, #2
    13ec:	ab01      	add	r3, sp, #4
    13ee:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13f0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    13f2:	4d43      	ldr	r5, [pc, #268]	; (1500 <system_clock_init+0x130>)
    13f4:	b2e0      	uxtb	r0, r4
    13f6:	a901      	add	r1, sp, #4
    13f8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13fa:	3401      	adds	r4, #1
    13fc:	2c25      	cmp	r4, #37	; 0x25
    13fe:	d1f9      	bne.n	13f4 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1400:	a80a      	add	r0, sp, #40	; 0x28
    1402:	2300      	movs	r3, #0
    1404:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1406:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1408:	2280      	movs	r2, #128	; 0x80
    140a:	0212      	lsls	r2, r2, #8
    140c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    140e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1410:	2201      	movs	r2, #1
    1412:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1414:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1416:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1418:	3202      	adds	r2, #2
    141a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    141c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    141e:	4b39      	ldr	r3, [pc, #228]	; (1504 <system_clock_init+0x134>)
    1420:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1422:	2005      	movs	r0, #5
    1424:	4b38      	ldr	r3, [pc, #224]	; (1508 <system_clock_init+0x138>)
    1426:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1428:	4933      	ldr	r1, [pc, #204]	; (14f8 <system_clock_init+0x128>)
    142a:	2202      	movs	r2, #2
    142c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    142e:	421a      	tst	r2, r3
    1430:	d0fc      	beq.n	142c <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1432:	4a31      	ldr	r2, [pc, #196]	; (14f8 <system_clock_init+0x128>)
    1434:	8a93      	ldrh	r3, [r2, #20]
    1436:	2180      	movs	r1, #128	; 0x80
    1438:	430b      	orrs	r3, r1
    143a:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    143c:	ab05      	add	r3, sp, #20
    143e:	2100      	movs	r1, #0
    1440:	2200      	movs	r2, #0
    1442:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1444:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1446:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1448:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    144a:	313f      	adds	r1, #63	; 0x3f
    144c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    144e:	393b      	subs	r1, #59	; 0x3b
    1450:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1452:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1454:	4b2d      	ldr	r3, [pc, #180]	; (150c <system_clock_init+0x13c>)
    1456:	681b      	ldr	r3, [r3, #0]
    1458:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    145a:	2b3f      	cmp	r3, #63	; 0x3f
    145c:	d04a      	beq.n	14f4 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    145e:	a805      	add	r0, sp, #20
    1460:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1462:	4b2b      	ldr	r3, [pc, #172]	; (1510 <system_clock_init+0x140>)
    1464:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1466:	2307      	movs	r3, #7
    1468:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    146a:	3338      	adds	r3, #56	; 0x38
    146c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    146e:	4b29      	ldr	r3, [pc, #164]	; (1514 <system_clock_init+0x144>)
    1470:	4798      	blx	r3
	config->run_in_standby  = false;
    1472:	a804      	add	r0, sp, #16
    1474:	2500      	movs	r5, #0
    1476:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1478:	2601      	movs	r6, #1
    147a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    147c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    147e:	4b26      	ldr	r3, [pc, #152]	; (1518 <system_clock_init+0x148>)
    1480:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1482:	2006      	movs	r0, #6
    1484:	4f20      	ldr	r7, [pc, #128]	; (1508 <system_clock_init+0x138>)
    1486:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1488:	4b24      	ldr	r3, [pc, #144]	; (151c <system_clock_init+0x14c>)
    148a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    148c:	ac01      	add	r4, sp, #4
    148e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1490:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1492:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1494:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1496:	2305      	movs	r3, #5
    1498:	7023      	strb	r3, [r4, #0]
    149a:	0021      	movs	r1, r4
    149c:	2001      	movs	r0, #1
    149e:	4b20      	ldr	r3, [pc, #128]	; (1520 <system_clock_init+0x150>)
    14a0:	4798      	blx	r3
    14a2:	2001      	movs	r0, #1
    14a4:	4b1f      	ldr	r3, [pc, #124]	; (1524 <system_clock_init+0x154>)
    14a6:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    14a8:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    14aa:	0021      	movs	r1, r4
    14ac:	2000      	movs	r0, #0
    14ae:	4b14      	ldr	r3, [pc, #80]	; (1500 <system_clock_init+0x130>)
    14b0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    14b2:	2000      	movs	r0, #0
    14b4:	4b1c      	ldr	r3, [pc, #112]	; (1528 <system_clock_init+0x158>)
    14b6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    14b8:	2007      	movs	r0, #7
    14ba:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    14bc:	490e      	ldr	r1, [pc, #56]	; (14f8 <system_clock_init+0x128>)
    14be:	22d0      	movs	r2, #208	; 0xd0
    14c0:	68cb      	ldr	r3, [r1, #12]
    14c2:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    14c4:	2bd0      	cmp	r3, #208	; 0xd0
    14c6:	d1fb      	bne.n	14c0 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    14c8:	4a18      	ldr	r2, [pc, #96]	; (152c <system_clock_init+0x15c>)
    14ca:	2300      	movs	r3, #0
    14cc:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    14ce:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    14d0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    14d2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    14d4:	a901      	add	r1, sp, #4
    14d6:	2201      	movs	r2, #1
    14d8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    14da:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    14dc:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    14de:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    14e0:	3307      	adds	r3, #7
    14e2:	700b      	strb	r3, [r1, #0]
    14e4:	2000      	movs	r0, #0
    14e6:	4b0e      	ldr	r3, [pc, #56]	; (1520 <system_clock_init+0x150>)
    14e8:	4798      	blx	r3
    14ea:	2000      	movs	r0, #0
    14ec:	4b0d      	ldr	r3, [pc, #52]	; (1524 <system_clock_init+0x154>)
    14ee:	4798      	blx	r3
#endif
}
    14f0:	b00f      	add	sp, #60	; 0x3c
    14f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    14f4:	3b20      	subs	r3, #32
    14f6:	e7b2      	b.n	145e <system_clock_init+0x8e>
    14f8:	40000800 	.word	0x40000800
    14fc:	41004000 	.word	0x41004000
    1500:	00001769 	.word	0x00001769
    1504:	000011f1 	.word	0x000011f1
    1508:	00001329 	.word	0x00001329
    150c:	00806024 	.word	0x00806024
    1510:	000005b9 	.word	0x000005b9
    1514:	000012a9 	.word	0x000012a9
    1518:	000011b5 	.word	0x000011b5
    151c:	00001531 	.word	0x00001531
    1520:	00001555 	.word	0x00001555
    1524:	0000160d 	.word	0x0000160d
    1528:	000016dd 	.word	0x000016dd
    152c:	40000400 	.word	0x40000400

00001530 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1530:	4a06      	ldr	r2, [pc, #24]	; (154c <system_gclk_init+0x1c>)
    1532:	6993      	ldr	r3, [r2, #24]
    1534:	2108      	movs	r1, #8
    1536:	430b      	orrs	r3, r1
    1538:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    153a:	2201      	movs	r2, #1
    153c:	4b04      	ldr	r3, [pc, #16]	; (1550 <system_gclk_init+0x20>)
    153e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1540:	0019      	movs	r1, r3
    1542:	780b      	ldrb	r3, [r1, #0]
    1544:	4213      	tst	r3, r2
    1546:	d1fc      	bne.n	1542 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1548:	4770      	bx	lr
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	40000400 	.word	0x40000400
    1550:	40000c00 	.word	0x40000c00

00001554 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1554:	b570      	push	{r4, r5, r6, lr}
    1556:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1558:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    155a:	780d      	ldrb	r5, [r1, #0]
    155c:	022d      	lsls	r5, r5, #8
    155e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1560:	784b      	ldrb	r3, [r1, #1]
    1562:	2b00      	cmp	r3, #0
    1564:	d002      	beq.n	156c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1566:	2380      	movs	r3, #128	; 0x80
    1568:	02db      	lsls	r3, r3, #11
    156a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    156c:	7a4b      	ldrb	r3, [r1, #9]
    156e:	2b00      	cmp	r3, #0
    1570:	d002      	beq.n	1578 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1572:	2380      	movs	r3, #128	; 0x80
    1574:	031b      	lsls	r3, r3, #12
    1576:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1578:	6848      	ldr	r0, [r1, #4]
    157a:	2801      	cmp	r0, #1
    157c:	d910      	bls.n	15a0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    157e:	1e43      	subs	r3, r0, #1
    1580:	4218      	tst	r0, r3
    1582:	d134      	bne.n	15ee <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1584:	2802      	cmp	r0, #2
    1586:	d930      	bls.n	15ea <system_gclk_gen_set_config+0x96>
    1588:	2302      	movs	r3, #2
    158a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    158c:	3201      	adds	r2, #1
						mask <<= 1) {
    158e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1590:	4298      	cmp	r0, r3
    1592:	d8fb      	bhi.n	158c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1594:	0212      	lsls	r2, r2, #8
    1596:	4332      	orrs	r2, r6
    1598:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    159a:	2380      	movs	r3, #128	; 0x80
    159c:	035b      	lsls	r3, r3, #13
    159e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    15a0:	7a0b      	ldrb	r3, [r1, #8]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d002      	beq.n	15ac <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    15a6:	2380      	movs	r3, #128	; 0x80
    15a8:	039b      	lsls	r3, r3, #14
    15aa:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15ac:	4a13      	ldr	r2, [pc, #76]	; (15fc <system_gclk_gen_set_config+0xa8>)
    15ae:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    15b0:	b25b      	sxtb	r3, r3
    15b2:	2b00      	cmp	r3, #0
    15b4:	dbfb      	blt.n	15ae <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15b6:	4b12      	ldr	r3, [pc, #72]	; (1600 <system_gclk_gen_set_config+0xac>)
    15b8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    15ba:	4b12      	ldr	r3, [pc, #72]	; (1604 <system_gclk_gen_set_config+0xb0>)
    15bc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15be:	4a0f      	ldr	r2, [pc, #60]	; (15fc <system_gclk_gen_set_config+0xa8>)
    15c0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    15c2:	b25b      	sxtb	r3, r3
    15c4:	2b00      	cmp	r3, #0
    15c6:	dbfb      	blt.n	15c0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    15c8:	4b0c      	ldr	r3, [pc, #48]	; (15fc <system_gclk_gen_set_config+0xa8>)
    15ca:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15cc:	001a      	movs	r2, r3
    15ce:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    15d0:	b25b      	sxtb	r3, r3
    15d2:	2b00      	cmp	r3, #0
    15d4:	dbfb      	blt.n	15ce <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    15d6:	4a09      	ldr	r2, [pc, #36]	; (15fc <system_gclk_gen_set_config+0xa8>)
    15d8:	6853      	ldr	r3, [r2, #4]
    15da:	2180      	movs	r1, #128	; 0x80
    15dc:	0249      	lsls	r1, r1, #9
    15de:	400b      	ands	r3, r1
    15e0:	431d      	orrs	r5, r3
    15e2:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15e4:	4b08      	ldr	r3, [pc, #32]	; (1608 <system_gclk_gen_set_config+0xb4>)
    15e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15e8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    15ea:	2200      	movs	r2, #0
    15ec:	e7d2      	b.n	1594 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    15ee:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    15f0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    15f2:	2380      	movs	r3, #128	; 0x80
    15f4:	029b      	lsls	r3, r3, #10
    15f6:	431d      	orrs	r5, r3
    15f8:	e7d2      	b.n	15a0 <system_gclk_gen_set_config+0x4c>
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	40000c00 	.word	0x40000c00
    1600:	00001055 	.word	0x00001055
    1604:	40000c08 	.word	0x40000c08
    1608:	00001095 	.word	0x00001095

0000160c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    160c:	b510      	push	{r4, lr}
    160e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1610:	4a0b      	ldr	r2, [pc, #44]	; (1640 <system_gclk_gen_enable+0x34>)
    1612:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1614:	b25b      	sxtb	r3, r3
    1616:	2b00      	cmp	r3, #0
    1618:	dbfb      	blt.n	1612 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    161a:	4b0a      	ldr	r3, [pc, #40]	; (1644 <system_gclk_gen_enable+0x38>)
    161c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    161e:	4b0a      	ldr	r3, [pc, #40]	; (1648 <system_gclk_gen_enable+0x3c>)
    1620:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1622:	4a07      	ldr	r2, [pc, #28]	; (1640 <system_gclk_gen_enable+0x34>)
    1624:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1626:	b25b      	sxtb	r3, r3
    1628:	2b00      	cmp	r3, #0
    162a:	dbfb      	blt.n	1624 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    162c:	4a04      	ldr	r2, [pc, #16]	; (1640 <system_gclk_gen_enable+0x34>)
    162e:	6851      	ldr	r1, [r2, #4]
    1630:	2380      	movs	r3, #128	; 0x80
    1632:	025b      	lsls	r3, r3, #9
    1634:	430b      	orrs	r3, r1
    1636:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1638:	4b04      	ldr	r3, [pc, #16]	; (164c <system_gclk_gen_enable+0x40>)
    163a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    163c:	bd10      	pop	{r4, pc}
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	40000c00 	.word	0x40000c00
    1644:	00001055 	.word	0x00001055
    1648:	40000c04 	.word	0x40000c04
    164c:	00001095 	.word	0x00001095

00001650 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1650:	b570      	push	{r4, r5, r6, lr}
    1652:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1654:	4a1a      	ldr	r2, [pc, #104]	; (16c0 <system_gclk_gen_get_hz+0x70>)
    1656:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1658:	b25b      	sxtb	r3, r3
    165a:	2b00      	cmp	r3, #0
    165c:	dbfb      	blt.n	1656 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    165e:	4b19      	ldr	r3, [pc, #100]	; (16c4 <system_gclk_gen_get_hz+0x74>)
    1660:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1662:	4b19      	ldr	r3, [pc, #100]	; (16c8 <system_gclk_gen_get_hz+0x78>)
    1664:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1666:	4a16      	ldr	r2, [pc, #88]	; (16c0 <system_gclk_gen_get_hz+0x70>)
    1668:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    166a:	b25b      	sxtb	r3, r3
    166c:	2b00      	cmp	r3, #0
    166e:	dbfb      	blt.n	1668 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1670:	4e13      	ldr	r6, [pc, #76]	; (16c0 <system_gclk_gen_get_hz+0x70>)
    1672:	6870      	ldr	r0, [r6, #4]
    1674:	04c0      	lsls	r0, r0, #19
    1676:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1678:	4b14      	ldr	r3, [pc, #80]	; (16cc <system_gclk_gen_get_hz+0x7c>)
    167a:	4798      	blx	r3
    167c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    167e:	4b12      	ldr	r3, [pc, #72]	; (16c8 <system_gclk_gen_get_hz+0x78>)
    1680:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1682:	6876      	ldr	r6, [r6, #4]
    1684:	02f6      	lsls	r6, r6, #11
    1686:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1688:	4b11      	ldr	r3, [pc, #68]	; (16d0 <system_gclk_gen_get_hz+0x80>)
    168a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    168c:	4a0c      	ldr	r2, [pc, #48]	; (16c0 <system_gclk_gen_get_hz+0x70>)
    168e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1690:	b25b      	sxtb	r3, r3
    1692:	2b00      	cmp	r3, #0
    1694:	dbfb      	blt.n	168e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1696:	4b0a      	ldr	r3, [pc, #40]	; (16c0 <system_gclk_gen_get_hz+0x70>)
    1698:	689c      	ldr	r4, [r3, #8]
    169a:	0224      	lsls	r4, r4, #8
    169c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    169e:	4b0d      	ldr	r3, [pc, #52]	; (16d4 <system_gclk_gen_get_hz+0x84>)
    16a0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    16a2:	2e00      	cmp	r6, #0
    16a4:	d107      	bne.n	16b6 <system_gclk_gen_get_hz+0x66>
    16a6:	2c01      	cmp	r4, #1
    16a8:	d907      	bls.n	16ba <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    16aa:	0021      	movs	r1, r4
    16ac:	0028      	movs	r0, r5
    16ae:	4b0a      	ldr	r3, [pc, #40]	; (16d8 <system_gclk_gen_get_hz+0x88>)
    16b0:	4798      	blx	r3
    16b2:	0005      	movs	r5, r0
    16b4:	e001      	b.n	16ba <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    16b6:	3401      	adds	r4, #1
    16b8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    16ba:	0028      	movs	r0, r5
    16bc:	bd70      	pop	{r4, r5, r6, pc}
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	40000c00 	.word	0x40000c00
    16c4:	00001055 	.word	0x00001055
    16c8:	40000c04 	.word	0x40000c04
    16cc:	00001121 	.word	0x00001121
    16d0:	40000c08 	.word	0x40000c08
    16d4:	00001095 	.word	0x00001095
    16d8:	000024f9 	.word	0x000024f9

000016dc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    16dc:	b510      	push	{r4, lr}
    16de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16e0:	4b06      	ldr	r3, [pc, #24]	; (16fc <system_gclk_chan_enable+0x20>)
    16e2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16e4:	4b06      	ldr	r3, [pc, #24]	; (1700 <system_gclk_chan_enable+0x24>)
    16e6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    16e8:	4a06      	ldr	r2, [pc, #24]	; (1704 <system_gclk_chan_enable+0x28>)
    16ea:	8853      	ldrh	r3, [r2, #2]
    16ec:	2180      	movs	r1, #128	; 0x80
    16ee:	01c9      	lsls	r1, r1, #7
    16f0:	430b      	orrs	r3, r1
    16f2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    16f4:	4b04      	ldr	r3, [pc, #16]	; (1708 <system_gclk_chan_enable+0x2c>)
    16f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16f8:	bd10      	pop	{r4, pc}
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	00001055 	.word	0x00001055
    1700:	40000c02 	.word	0x40000c02
    1704:	40000c00 	.word	0x40000c00
    1708:	00001095 	.word	0x00001095

0000170c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    170c:	b510      	push	{r4, lr}
    170e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1710:	4b0f      	ldr	r3, [pc, #60]	; (1750 <system_gclk_chan_disable+0x44>)
    1712:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1714:	4b0f      	ldr	r3, [pc, #60]	; (1754 <system_gclk_chan_disable+0x48>)
    1716:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1718:	4a0f      	ldr	r2, [pc, #60]	; (1758 <system_gclk_chan_disable+0x4c>)
    171a:	8853      	ldrh	r3, [r2, #2]
    171c:	051b      	lsls	r3, r3, #20
    171e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1720:	8853      	ldrh	r3, [r2, #2]
    1722:	490e      	ldr	r1, [pc, #56]	; (175c <system_gclk_chan_disable+0x50>)
    1724:	400b      	ands	r3, r1
    1726:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1728:	8853      	ldrh	r3, [r2, #2]
    172a:	490d      	ldr	r1, [pc, #52]	; (1760 <system_gclk_chan_disable+0x54>)
    172c:	400b      	ands	r3, r1
    172e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1730:	0011      	movs	r1, r2
    1732:	2280      	movs	r2, #128	; 0x80
    1734:	01d2      	lsls	r2, r2, #7
    1736:	884b      	ldrh	r3, [r1, #2]
    1738:	4213      	tst	r3, r2
    173a:	d1fc      	bne.n	1736 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    173c:	4906      	ldr	r1, [pc, #24]	; (1758 <system_gclk_chan_disable+0x4c>)
    173e:	884a      	ldrh	r2, [r1, #2]
    1740:	0203      	lsls	r3, r0, #8
    1742:	4806      	ldr	r0, [pc, #24]	; (175c <system_gclk_chan_disable+0x50>)
    1744:	4002      	ands	r2, r0
    1746:	4313      	orrs	r3, r2
    1748:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    174a:	4b06      	ldr	r3, [pc, #24]	; (1764 <system_gclk_chan_disable+0x58>)
    174c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    174e:	bd10      	pop	{r4, pc}
    1750:	00001055 	.word	0x00001055
    1754:	40000c02 	.word	0x40000c02
    1758:	40000c00 	.word	0x40000c00
    175c:	fffff0ff 	.word	0xfffff0ff
    1760:	ffffbfff 	.word	0xffffbfff
    1764:	00001095 	.word	0x00001095

00001768 <system_gclk_chan_set_config>:
{
    1768:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    176a:	780c      	ldrb	r4, [r1, #0]
    176c:	0224      	lsls	r4, r4, #8
    176e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1770:	4b02      	ldr	r3, [pc, #8]	; (177c <system_gclk_chan_set_config+0x14>)
    1772:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1774:	b2a4      	uxth	r4, r4
    1776:	4b02      	ldr	r3, [pc, #8]	; (1780 <system_gclk_chan_set_config+0x18>)
    1778:	805c      	strh	r4, [r3, #2]
}
    177a:	bd10      	pop	{r4, pc}
    177c:	0000170d 	.word	0x0000170d
    1780:	40000c00 	.word	0x40000c00

00001784 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1784:	b510      	push	{r4, lr}
    1786:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1788:	4b06      	ldr	r3, [pc, #24]	; (17a4 <system_gclk_chan_get_hz+0x20>)
    178a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    178c:	4b06      	ldr	r3, [pc, #24]	; (17a8 <system_gclk_chan_get_hz+0x24>)
    178e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1790:	4b06      	ldr	r3, [pc, #24]	; (17ac <system_gclk_chan_get_hz+0x28>)
    1792:	885c      	ldrh	r4, [r3, #2]
    1794:	0524      	lsls	r4, r4, #20
    1796:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1798:	4b05      	ldr	r3, [pc, #20]	; (17b0 <system_gclk_chan_get_hz+0x2c>)
    179a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    179c:	0020      	movs	r0, r4
    179e:	4b05      	ldr	r3, [pc, #20]	; (17b4 <system_gclk_chan_get_hz+0x30>)
    17a0:	4798      	blx	r3
}
    17a2:	bd10      	pop	{r4, pc}
    17a4:	00001055 	.word	0x00001055
    17a8:	40000c02 	.word	0x40000c02
    17ac:	40000c00 	.word	0x40000c00
    17b0:	00001095 	.word	0x00001095
    17b4:	00001651 	.word	0x00001651

000017b8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    17b8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    17ba:	78d3      	ldrb	r3, [r2, #3]
    17bc:	2b00      	cmp	r3, #0
    17be:	d135      	bne.n	182c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    17c0:	7813      	ldrb	r3, [r2, #0]
    17c2:	2b80      	cmp	r3, #128	; 0x80
    17c4:	d029      	beq.n	181a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    17c6:	061b      	lsls	r3, r3, #24
    17c8:	2480      	movs	r4, #128	; 0x80
    17ca:	0264      	lsls	r4, r4, #9
    17cc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    17ce:	7854      	ldrb	r4, [r2, #1]
    17d0:	2502      	movs	r5, #2
    17d2:	43ac      	bics	r4, r5
    17d4:	d106      	bne.n	17e4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    17d6:	7894      	ldrb	r4, [r2, #2]
    17d8:	2c00      	cmp	r4, #0
    17da:	d120      	bne.n	181e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    17dc:	2480      	movs	r4, #128	; 0x80
    17de:	02a4      	lsls	r4, r4, #10
    17e0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    17e2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    17e4:	7854      	ldrb	r4, [r2, #1]
    17e6:	3c01      	subs	r4, #1
    17e8:	2c01      	cmp	r4, #1
    17ea:	d91c      	bls.n	1826 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    17ec:	040d      	lsls	r5, r1, #16
    17ee:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    17f0:	24a0      	movs	r4, #160	; 0xa0
    17f2:	05e4      	lsls	r4, r4, #23
    17f4:	432c      	orrs	r4, r5
    17f6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17f8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    17fa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    17fc:	24d0      	movs	r4, #208	; 0xd0
    17fe:	0624      	lsls	r4, r4, #24
    1800:	432c      	orrs	r4, r5
    1802:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1804:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1806:	78d4      	ldrb	r4, [r2, #3]
    1808:	2c00      	cmp	r4, #0
    180a:	d122      	bne.n	1852 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    180c:	035b      	lsls	r3, r3, #13
    180e:	d51c      	bpl.n	184a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1810:	7893      	ldrb	r3, [r2, #2]
    1812:	2b01      	cmp	r3, #1
    1814:	d01e      	beq.n	1854 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1816:	6141      	str	r1, [r0, #20]
    1818:	e017      	b.n	184a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    181a:	2300      	movs	r3, #0
    181c:	e7d7      	b.n	17ce <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    181e:	24c0      	movs	r4, #192	; 0xc0
    1820:	02e4      	lsls	r4, r4, #11
    1822:	4323      	orrs	r3, r4
    1824:	e7dd      	b.n	17e2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1826:	4c0d      	ldr	r4, [pc, #52]	; (185c <_system_pinmux_config+0xa4>)
    1828:	4023      	ands	r3, r4
    182a:	e7df      	b.n	17ec <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    182c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    182e:	040c      	lsls	r4, r1, #16
    1830:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1832:	23a0      	movs	r3, #160	; 0xa0
    1834:	05db      	lsls	r3, r3, #23
    1836:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1838:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    183a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    183c:	23d0      	movs	r3, #208	; 0xd0
    183e:	061b      	lsls	r3, r3, #24
    1840:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1842:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1844:	78d3      	ldrb	r3, [r2, #3]
    1846:	2b00      	cmp	r3, #0
    1848:	d103      	bne.n	1852 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    184a:	7853      	ldrb	r3, [r2, #1]
    184c:	3b01      	subs	r3, #1
    184e:	2b01      	cmp	r3, #1
    1850:	d902      	bls.n	1858 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1852:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1854:	6181      	str	r1, [r0, #24]
    1856:	e7f8      	b.n	184a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1858:	6081      	str	r1, [r0, #8]
}
    185a:	e7fa      	b.n	1852 <_system_pinmux_config+0x9a>
    185c:	fffbffff 	.word	0xfffbffff

00001860 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1860:	b510      	push	{r4, lr}
    1862:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1864:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1866:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1868:	2900      	cmp	r1, #0
    186a:	d104      	bne.n	1876 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    186c:	0943      	lsrs	r3, r0, #5
    186e:	01db      	lsls	r3, r3, #7
    1870:	4905      	ldr	r1, [pc, #20]	; (1888 <system_pinmux_pin_set_config+0x28>)
    1872:	468c      	mov	ip, r1
    1874:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1876:	241f      	movs	r4, #31
    1878:	4020      	ands	r0, r4
    187a:	2101      	movs	r1, #1
    187c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    187e:	0018      	movs	r0, r3
    1880:	4b02      	ldr	r3, [pc, #8]	; (188c <system_pinmux_pin_set_config+0x2c>)
    1882:	4798      	blx	r3
}
    1884:	bd10      	pop	{r4, pc}
    1886:	46c0      	nop			; (mov r8, r8)
    1888:	41004400 	.word	0x41004400
    188c:	000017b9 	.word	0x000017b9

00001890 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1890:	4770      	bx	lr
	...

00001894 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1894:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1896:	4b05      	ldr	r3, [pc, #20]	; (18ac <system_init+0x18>)
    1898:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    189a:	4b05      	ldr	r3, [pc, #20]	; (18b0 <system_init+0x1c>)
    189c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    189e:	4b05      	ldr	r3, [pc, #20]	; (18b4 <system_init+0x20>)
    18a0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <system_init+0x24>)
    18a4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    18a6:	4b05      	ldr	r3, [pc, #20]	; (18bc <system_init+0x28>)
    18a8:	4798      	blx	r3
}
    18aa:	bd10      	pop	{r4, pc}
    18ac:	000013d1 	.word	0x000013d1
    18b0:	000010c5 	.word	0x000010c5
    18b4:	00001891 	.word	0x00001891
    18b8:	00001891 	.word	0x00001891
    18bc:	00001891 	.word	0x00001891

000018c0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    18c0:	e7fe      	b.n	18c0 <Dummy_Handler>
	...

000018c4 <Reset_Handler>:
{
    18c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    18c6:	4a2a      	ldr	r2, [pc, #168]	; (1970 <Reset_Handler+0xac>)
    18c8:	4b2a      	ldr	r3, [pc, #168]	; (1974 <Reset_Handler+0xb0>)
    18ca:	429a      	cmp	r2, r3
    18cc:	d011      	beq.n	18f2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    18ce:	001a      	movs	r2, r3
    18d0:	4b29      	ldr	r3, [pc, #164]	; (1978 <Reset_Handler+0xb4>)
    18d2:	429a      	cmp	r2, r3
    18d4:	d20d      	bcs.n	18f2 <Reset_Handler+0x2e>
    18d6:	4a29      	ldr	r2, [pc, #164]	; (197c <Reset_Handler+0xb8>)
    18d8:	3303      	adds	r3, #3
    18da:	1a9b      	subs	r3, r3, r2
    18dc:	089b      	lsrs	r3, r3, #2
    18de:	3301      	adds	r3, #1
    18e0:	009b      	lsls	r3, r3, #2
    18e2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    18e4:	4823      	ldr	r0, [pc, #140]	; (1974 <Reset_Handler+0xb0>)
    18e6:	4922      	ldr	r1, [pc, #136]	; (1970 <Reset_Handler+0xac>)
    18e8:	588c      	ldr	r4, [r1, r2]
    18ea:	5084      	str	r4, [r0, r2]
    18ec:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    18ee:	429a      	cmp	r2, r3
    18f0:	d1fa      	bne.n	18e8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    18f2:	4a23      	ldr	r2, [pc, #140]	; (1980 <Reset_Handler+0xbc>)
    18f4:	4b23      	ldr	r3, [pc, #140]	; (1984 <Reset_Handler+0xc0>)
    18f6:	429a      	cmp	r2, r3
    18f8:	d20a      	bcs.n	1910 <Reset_Handler+0x4c>
    18fa:	43d3      	mvns	r3, r2
    18fc:	4921      	ldr	r1, [pc, #132]	; (1984 <Reset_Handler+0xc0>)
    18fe:	185b      	adds	r3, r3, r1
    1900:	2103      	movs	r1, #3
    1902:	438b      	bics	r3, r1
    1904:	3304      	adds	r3, #4
    1906:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1908:	2100      	movs	r1, #0
    190a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    190c:	4293      	cmp	r3, r2
    190e:	d1fc      	bne.n	190a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1910:	4a1d      	ldr	r2, [pc, #116]	; (1988 <Reset_Handler+0xc4>)
    1912:	21ff      	movs	r1, #255	; 0xff
    1914:	4b1d      	ldr	r3, [pc, #116]	; (198c <Reset_Handler+0xc8>)
    1916:	438b      	bics	r3, r1
    1918:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    191a:	39fd      	subs	r1, #253	; 0xfd
    191c:	2390      	movs	r3, #144	; 0x90
    191e:	005b      	lsls	r3, r3, #1
    1920:	4a1b      	ldr	r2, [pc, #108]	; (1990 <Reset_Handler+0xcc>)
    1922:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1924:	4a1b      	ldr	r2, [pc, #108]	; (1994 <Reset_Handler+0xd0>)
    1926:	78d3      	ldrb	r3, [r2, #3]
    1928:	2503      	movs	r5, #3
    192a:	43ab      	bics	r3, r5
    192c:	2402      	movs	r4, #2
    192e:	4323      	orrs	r3, r4
    1930:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1932:	78d3      	ldrb	r3, [r2, #3]
    1934:	270c      	movs	r7, #12
    1936:	43bb      	bics	r3, r7
    1938:	2608      	movs	r6, #8
    193a:	4333      	orrs	r3, r6
    193c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    193e:	4b16      	ldr	r3, [pc, #88]	; (1998 <Reset_Handler+0xd4>)
    1940:	7b98      	ldrb	r0, [r3, #14]
    1942:	2230      	movs	r2, #48	; 0x30
    1944:	4390      	bics	r0, r2
    1946:	2220      	movs	r2, #32
    1948:	4310      	orrs	r0, r2
    194a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    194c:	7b99      	ldrb	r1, [r3, #14]
    194e:	43b9      	bics	r1, r7
    1950:	4331      	orrs	r1, r6
    1952:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1954:	7b9a      	ldrb	r2, [r3, #14]
    1956:	43aa      	bics	r2, r5
    1958:	4322      	orrs	r2, r4
    195a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    195c:	4a0f      	ldr	r2, [pc, #60]	; (199c <Reset_Handler+0xd8>)
    195e:	6853      	ldr	r3, [r2, #4]
    1960:	2180      	movs	r1, #128	; 0x80
    1962:	430b      	orrs	r3, r1
    1964:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1966:	4b0e      	ldr	r3, [pc, #56]	; (19a0 <Reset_Handler+0xdc>)
    1968:	4798      	blx	r3
        main();
    196a:	4b0e      	ldr	r3, [pc, #56]	; (19a4 <Reset_Handler+0xe0>)
    196c:	4798      	blx	r3
    196e:	e7fe      	b.n	196e <Reset_Handler+0xaa>
    1970:	00004e30 	.word	0x00004e30
    1974:	20000000 	.word	0x20000000
    1978:	2000007c 	.word	0x2000007c
    197c:	20000004 	.word	0x20000004
    1980:	2000007c 	.word	0x2000007c
    1984:	20003cb0 	.word	0x20003cb0
    1988:	e000ed00 	.word	0xe000ed00
    198c:	00000000 	.word	0x00000000
    1990:	41007000 	.word	0x41007000
    1994:	41005000 	.word	0x41005000
    1998:	41004800 	.word	0x41004800
    199c:	41004000 	.word	0x41004000
    19a0:	0000429d 	.word	0x0000429d
    19a4:	00002361 	.word	0x00002361

000019a8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    19a8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    19aa:	4a06      	ldr	r2, [pc, #24]	; (19c4 <_sbrk+0x1c>)
    19ac:	6812      	ldr	r2, [r2, #0]
    19ae:	2a00      	cmp	r2, #0
    19b0:	d004      	beq.n	19bc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    19b2:	4a04      	ldr	r2, [pc, #16]	; (19c4 <_sbrk+0x1c>)
    19b4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    19b6:	18c3      	adds	r3, r0, r3
    19b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    19ba:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    19bc:	4902      	ldr	r1, [pc, #8]	; (19c8 <_sbrk+0x20>)
    19be:	4a01      	ldr	r2, [pc, #4]	; (19c4 <_sbrk+0x1c>)
    19c0:	6011      	str	r1, [r2, #0]
    19c2:	e7f6      	b.n	19b2 <_sbrk+0xa>
    19c4:	200000bc 	.word	0x200000bc
    19c8:	20005cb0 	.word	0x20005cb0

000019cc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    19cc:	2001      	movs	r0, #1
    19ce:	4240      	negs	r0, r0
    19d0:	4770      	bx	lr

000019d2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    19d2:	2380      	movs	r3, #128	; 0x80
    19d4:	019b      	lsls	r3, r3, #6
    19d6:	604b      	str	r3, [r1, #4]

	return 0;
}
    19d8:	2000      	movs	r0, #0
    19da:	4770      	bx	lr

000019dc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    19dc:	2001      	movs	r0, #1
    19de:	4770      	bx	lr

000019e0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    19e0:	2000      	movs	r0, #0
    19e2:	4770      	bx	lr

000019e4 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    19e4:	0003      	movs	r3, r0
    19e6:	3308      	adds	r3, #8
    19e8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    19ea:	2201      	movs	r2, #1
    19ec:	4252      	negs	r2, r2
    19ee:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    19f0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    19f2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    19f4:	2300      	movs	r3, #0
    19f6:	6003      	str	r3, [r0, #0]
}
    19f8:	4770      	bx	lr

000019fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    19fa:	2300      	movs	r3, #0
    19fc:	6103      	str	r3, [r0, #16]
}
    19fe:	4770      	bx	lr

00001a00 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1a00:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
    1a02:	685a      	ldr	r2, [r3, #4]
    1a04:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1a06:	6842      	ldr	r2, [r0, #4]
    1a08:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1a0a:	685a      	ldr	r2, [r3, #4]
    1a0c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1a0e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1a10:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1a12:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1a14:	6803      	ldr	r3, [r0, #0]
    1a16:	3301      	adds	r3, #1
    1a18:	6003      	str	r3, [r0, #0]
}
    1a1a:	4770      	bx	lr

00001a1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    1a1c:	b510      	push	{r4, lr}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    1a1e:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1a20:	1c63      	adds	r3, r4, #1
    1a22:	d014      	beq.n	1a4e <vListInsert+0x32>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1a24:	0003      	movs	r3, r0
    1a26:	3308      	adds	r3, #8
    1a28:	68c2      	ldr	r2, [r0, #12]
    1a2a:	6812      	ldr	r2, [r2, #0]
    1a2c:	4294      	cmp	r4, r2
    1a2e:	d304      	bcc.n	1a3a <vListInsert+0x1e>
    1a30:	685b      	ldr	r3, [r3, #4]
    1a32:	685a      	ldr	r2, [r3, #4]
    1a34:	6812      	ldr	r2, [r2, #0]
    1a36:	4294      	cmp	r4, r2
    1a38:	d2fa      	bcs.n	1a30 <vListInsert+0x14>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1a3a:	685a      	ldr	r2, [r3, #4]
    1a3c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1a3e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1a40:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    1a42:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1a44:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1a46:	6803      	ldr	r3, [r0, #0]
    1a48:	3301      	adds	r3, #1
    1a4a:	6003      	str	r3, [r0, #0]
}
    1a4c:	bd10      	pop	{r4, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
    1a4e:	6903      	ldr	r3, [r0, #16]
    1a50:	e7f3      	b.n	1a3a <vListInsert+0x1e>

00001a52 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1a52:	6843      	ldr	r3, [r0, #4]
    1a54:	6882      	ldr	r2, [r0, #8]
    1a56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1a58:	6883      	ldr	r3, [r0, #8]
    1a5a:	6842      	ldr	r2, [r0, #4]
    1a5c:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    1a5e:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1a60:	685a      	ldr	r2, [r3, #4]
    1a62:	4290      	cmp	r0, r2
    1a64:	d006      	beq.n	1a74 <uxListRemove+0x22>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	}

	pxItemToRemove->pvContainer = NULL;
    1a66:	2200      	movs	r2, #0
    1a68:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    1a6a:	681a      	ldr	r2, [r3, #0]
    1a6c:	3a01      	subs	r2, #1
    1a6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1a70:	6818      	ldr	r0, [r3, #0]
}
    1a72:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1a74:	6882      	ldr	r2, [r0, #8]
    1a76:	605a      	str	r2, [r3, #4]
    1a78:	e7f5      	b.n	1a66 <uxListRemove+0x14>
	...

00001a7c <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1a7c:	4a06      	ldr	r2, [pc, #24]	; (1a98 <pxCurrentTCBConst3>)
    1a7e:	6813      	ldr	r3, [r2, #0]
    1a80:	6818      	ldr	r0, [r3, #0]
    1a82:	3020      	adds	r0, #32
    1a84:	f380 8809 	msr	PSP, r0
    1a88:	2002      	movs	r0, #2
    1a8a:	f380 8814 	msr	CONTROL, r0
    1a8e:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1a90:	46ae      	mov	lr, r5
    1a92:	b662      	cpsie	i
    1a94:	bd00      	pop	{pc}
    1a96:	46c0      	nop			; (mov r8, r8)

00001a98 <pxCurrentTCBConst3>:
    1a98:	20003b60 	.word	0x20003b60

00001a9c <pxPortInitialiseStack>:
{
    1a9c:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1a9e:	1f03      	subs	r3, r0, #4
    1aa0:	2480      	movs	r4, #128	; 0x80
    1aa2:	0464      	lsls	r4, r4, #17
    1aa4:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    1aa6:	3b04      	subs	r3, #4
    1aa8:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    1aaa:	3b18      	subs	r3, #24
    1aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    1aae:	3840      	subs	r0, #64	; 0x40
}
    1ab0:	bd10      	pop	{r4, pc}
	...

00001ab4 <SVC_Handler>:
	__asm volatile (
    1ab4:	4b08      	ldr	r3, [pc, #32]	; (1ad8 <pxCurrentTCBConst2>)
    1ab6:	6819      	ldr	r1, [r3, #0]
    1ab8:	6808      	ldr	r0, [r1, #0]
    1aba:	3010      	adds	r0, #16
    1abc:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1abe:	46a0      	mov	r8, r4
    1ac0:	46a9      	mov	r9, r5
    1ac2:	46b2      	mov	sl, r6
    1ac4:	46bb      	mov	fp, r7
    1ac6:	f380 8809 	msr	PSP, r0
    1aca:	3820      	subs	r0, #32
    1acc:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1ace:	4671      	mov	r1, lr
    1ad0:	200d      	movs	r0, #13
    1ad2:	4301      	orrs	r1, r0
    1ad4:	4708      	bx	r1
    1ad6:	46c0      	nop			; (mov r8, r8)

00001ad8 <pxCurrentTCBConst2>:
    1ad8:	20003b60 	.word	0x20003b60

00001adc <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1adc:	2280      	movs	r2, #128	; 0x80
    1ade:	0552      	lsls	r2, r2, #21
    1ae0:	4b03      	ldr	r3, [pc, #12]	; (1af0 <vPortYield+0x14>)
    1ae2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    1ae4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1ae8:	f3bf 8f6f 	isb	sy
}
    1aec:	4770      	bx	lr
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	e000ed04 	.word	0xe000ed04

00001af4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    1af4:	b672      	cpsid	i
    uxCriticalNesting++;
    1af6:	4a04      	ldr	r2, [pc, #16]	; (1b08 <vPortEnterCritical+0x14>)
    1af8:	6813      	ldr	r3, [r2, #0]
    1afa:	3301      	adds	r3, #1
    1afc:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
    1afe:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1b02:	f3bf 8f6f 	isb	sy
}
    1b06:	4770      	bx	lr
    1b08:	20000010 	.word	0x20000010

00001b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    uxCriticalNesting--;
    1b0c:	4a03      	ldr	r2, [pc, #12]	; (1b1c <vPortExitCritical+0x10>)
    1b0e:	6813      	ldr	r3, [r2, #0]
    1b10:	3b01      	subs	r3, #1
    1b12:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    1b14:	2b00      	cmp	r3, #0
    1b16:	d100      	bne.n	1b1a <vPortExitCritical+0xe>
    {
        portENABLE_INTERRUPTS();
    1b18:	b662      	cpsie	i
    }
}
    1b1a:	4770      	bx	lr
    1b1c:	20000010 	.word	0x20000010

00001b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1b20:	f3ef 8009 	mrs	r0, PSP
    1b24:	4b0e      	ldr	r3, [pc, #56]	; (1b60 <pxCurrentTCBConst>)
    1b26:	681a      	ldr	r2, [r3, #0]
    1b28:	3820      	subs	r0, #32
    1b2a:	6010      	str	r0, [r2, #0]
    1b2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1b2e:	4644      	mov	r4, r8
    1b30:	464d      	mov	r5, r9
    1b32:	4656      	mov	r6, sl
    1b34:	465f      	mov	r7, fp
    1b36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1b38:	b508      	push	{r3, lr}
    1b3a:	b672      	cpsid	i
    1b3c:	f000 fb8a 	bl	2254 <vTaskSwitchContext>
    1b40:	b662      	cpsie	i
    1b42:	bc0c      	pop	{r2, r3}
    1b44:	6811      	ldr	r1, [r2, #0]
    1b46:	6808      	ldr	r0, [r1, #0]
    1b48:	3010      	adds	r0, #16
    1b4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1b4c:	46a0      	mov	r8, r4
    1b4e:	46a9      	mov	r9, r5
    1b50:	46b2      	mov	sl, r6
    1b52:	46bb      	mov	fp, r7
    1b54:	f380 8809 	msr	PSP, r0
    1b58:	3820      	subs	r0, #32
    1b5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1b5c:	4718      	bx	r3
    1b5e:	46c0      	nop			; (mov r8, r8)

00001b60 <pxCurrentTCBConst>:
    1b60:	20003b60 	.word	0x20003b60

00001b64 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    1b64:	b510      	push	{r4, lr}
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    1b66:	2280      	movs	r2, #128	; 0x80
    1b68:	0552      	lsls	r2, r2, #21
    1b6a:	4b03      	ldr	r3, [pc, #12]	; (1b78 <SysTick_Handler+0x14>)
    1b6c:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    1b6e:	b672      	cpsid	i
	{
		vTaskIncrementTick();
    1b70:	4b02      	ldr	r3, [pc, #8]	; (1b7c <SysTick_Handler+0x18>)
    1b72:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    1b74:	b662      	cpsie	i
}
    1b76:	bd10      	pop	{r4, pc}
    1b78:	e000ed04 	.word	0xe000ed04
    1b7c:	00001f31 	.word	0x00001f31

00001b80 <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    1b80:	2200      	movs	r2, #0
    1b82:	4b04      	ldr	r3, [pc, #16]	; (1b94 <vPortSetupTimerInterrupt+0x14>)
    1b84:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    1b86:	4a04      	ldr	r2, [pc, #16]	; (1b98 <vPortSetupTimerInterrupt+0x18>)
    1b88:	4b04      	ldr	r3, [pc, #16]	; (1b9c <vPortSetupTimerInterrupt+0x1c>)
    1b8a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    1b8c:	2207      	movs	r2, #7
    1b8e:	4b04      	ldr	r3, [pc, #16]	; (1ba0 <vPortSetupTimerInterrupt+0x20>)
    1b90:	601a      	str	r2, [r3, #0]
}
    1b92:	4770      	bx	lr
    1b94:	e000e018 	.word	0xe000e018
    1b98:	00001f3f 	.word	0x00001f3f
    1b9c:	e000e014 	.word	0xe000e014
    1ba0:	e000e010 	.word	0xe000e010

00001ba4 <xPortStartScheduler>:
{
    1ba4:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1ba6:	4b0a      	ldr	r3, [pc, #40]	; (1bd0 <xPortStartScheduler+0x2c>)
    1ba8:	6819      	ldr	r1, [r3, #0]
    1baa:	22ff      	movs	r2, #255	; 0xff
    1bac:	0412      	lsls	r2, r2, #16
    1bae:	430a      	orrs	r2, r1
    1bb0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1bb2:	6819      	ldr	r1, [r3, #0]
    1bb4:	22ff      	movs	r2, #255	; 0xff
    1bb6:	0612      	lsls	r2, r2, #24
    1bb8:	430a      	orrs	r2, r1
    1bba:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    1bbc:	4b05      	ldr	r3, [pc, #20]	; (1bd4 <xPortStartScheduler+0x30>)
    1bbe:	4798      	blx	r3
	uxCriticalNesting = 0;
    1bc0:	2200      	movs	r2, #0
    1bc2:	4b05      	ldr	r3, [pc, #20]	; (1bd8 <xPortStartScheduler+0x34>)
    1bc4:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
    1bc6:	4b05      	ldr	r3, [pc, #20]	; (1bdc <xPortStartScheduler+0x38>)
    1bc8:	4798      	blx	r3
}
    1bca:	2000      	movs	r0, #0
    1bcc:	bd10      	pop	{r4, pc}
    1bce:	46c0      	nop			; (mov r8, r8)
    1bd0:	e000ed20 	.word	0xe000ed20
    1bd4:	00001b81 	.word	0x00001b81
    1bd8:	20000010 	.word	0x20000010
    1bdc:	00001a7d 	.word	0x00001a7d

00001be0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1be0:	b570      	push	{r4, r5, r6, lr}
    1be2:	0004      	movs	r4, r0
void *pvReturn = NULL;
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1be4:	0743      	lsls	r3, r0, #29
    1be6:	d002      	beq.n	1bee <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1be8:	2307      	movs	r3, #7
    1bea:	439c      	bics	r4, r3
    1bec:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
    1bee:	4b11      	ldr	r3, [pc, #68]	; (1c34 <pvPortMalloc+0x54>)
    1bf0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    1bf2:	4b11      	ldr	r3, [pc, #68]	; (1c38 <pvPortMalloc+0x58>)
    1bf4:	681b      	ldr	r3, [r3, #0]
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	d010      	beq.n	1c1c <pvPortMalloc+0x3c>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1bfa:	4b10      	ldr	r3, [pc, #64]	; (1c3c <pvPortMalloc+0x5c>)
    1bfc:	681b      	ldr	r3, [r3, #0]
    1bfe:	18e4      	adds	r4, r4, r3
    1c00:	4a0f      	ldr	r2, [pc, #60]	; (1c40 <pvPortMalloc+0x60>)
    1c02:	4294      	cmp	r4, r2
    1c04:	d811      	bhi.n	1c2a <pvPortMalloc+0x4a>
    1c06:	42a3      	cmp	r3, r4
    1c08:	d211      	bcs.n	1c2e <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1c0a:	4a0b      	ldr	r2, [pc, #44]	; (1c38 <pvPortMalloc+0x58>)
    1c0c:	6815      	ldr	r5, [r2, #0]
    1c0e:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    1c10:	4b0a      	ldr	r3, [pc, #40]	; (1c3c <pvPortMalloc+0x5c>)
    1c12:	601c      	str	r4, [r3, #0]
		}
	}
	xTaskResumeAll();
    1c14:	4b0b      	ldr	r3, [pc, #44]	; (1c44 <pvPortMalloc+0x64>)
    1c16:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    1c18:	0028      	movs	r0, r5
    1c1a:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    1c1c:	2207      	movs	r2, #7
    1c1e:	4b0a      	ldr	r3, [pc, #40]	; (1c48 <pvPortMalloc+0x68>)
    1c20:	3308      	adds	r3, #8
    1c22:	4393      	bics	r3, r2
    1c24:	4a04      	ldr	r2, [pc, #16]	; (1c38 <pvPortMalloc+0x58>)
    1c26:	6013      	str	r3, [r2, #0]
    1c28:	e7e7      	b.n	1bfa <pvPortMalloc+0x1a>
void *pvReturn = NULL;
    1c2a:	2500      	movs	r5, #0
    1c2c:	e7f2      	b.n	1c14 <pvPortMalloc+0x34>
    1c2e:	2500      	movs	r5, #0
    1c30:	e7f0      	b.n	1c14 <pvPortMalloc+0x34>
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	00001f01 	.word	0x00001f01
    1c38:	200000c0 	.word	0x200000c0
    1c3c:	20003b5c 	.word	0x20003b5c
    1c40:	00003a8f 	.word	0x00003a8f
    1c44:	0000204d 	.word	0x0000204d
    1c48:	200000c4 	.word	0x200000c4

00001c4c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    1c4c:	2800      	cmp	r0, #0
    1c4e:	d001      	beq.n	1c54 <vPortFree+0x8>
    1c50:	b672      	cpsid	i
    1c52:	e7fe      	b.n	1c52 <vPortFree+0x6>
}
    1c54:	4770      	bx	lr
	...

00001c58 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    1c58:	b510      	push	{r4, lr}
    1c5a:	0004      	movs	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1c5c:	4b0e      	ldr	r3, [pc, #56]	; (1c98 <prvAddCurrentTaskToDelayedList+0x40>)
    1c5e:	681b      	ldr	r3, [r3, #0]
    1c60:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
    1c62:	4b0e      	ldr	r3, [pc, #56]	; (1c9c <prvAddCurrentTaskToDelayedList+0x44>)
    1c64:	681b      	ldr	r3, [r3, #0]
    1c66:	4298      	cmp	r0, r3
    1c68:	d30d      	bcc.n	1c86 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1c6a:	4b0d      	ldr	r3, [pc, #52]	; (1ca0 <prvAddCurrentTaskToDelayedList+0x48>)
    1c6c:	6818      	ldr	r0, [r3, #0]
    1c6e:	4b0a      	ldr	r3, [pc, #40]	; (1c98 <prvAddCurrentTaskToDelayedList+0x40>)
    1c70:	6819      	ldr	r1, [r3, #0]
    1c72:	3104      	adds	r1, #4
    1c74:	4b0b      	ldr	r3, [pc, #44]	; (1ca4 <prvAddCurrentTaskToDelayedList+0x4c>)
    1c76:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    1c78:	4b0b      	ldr	r3, [pc, #44]	; (1ca8 <prvAddCurrentTaskToDelayedList+0x50>)
    1c7a:	681b      	ldr	r3, [r3, #0]
    1c7c:	429c      	cmp	r4, r3
    1c7e:	d209      	bcs.n	1c94 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    1c80:	4b09      	ldr	r3, [pc, #36]	; (1ca8 <prvAddCurrentTaskToDelayedList+0x50>)
    1c82:	601c      	str	r4, [r3, #0]
		}
	}
}
    1c84:	e006      	b.n	1c94 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1c86:	4b09      	ldr	r3, [pc, #36]	; (1cac <prvAddCurrentTaskToDelayedList+0x54>)
    1c88:	6818      	ldr	r0, [r3, #0]
    1c8a:	4b03      	ldr	r3, [pc, #12]	; (1c98 <prvAddCurrentTaskToDelayedList+0x40>)
    1c8c:	6819      	ldr	r1, [r3, #0]
    1c8e:	3104      	adds	r1, #4
    1c90:	4b04      	ldr	r3, [pc, #16]	; (1ca4 <prvAddCurrentTaskToDelayedList+0x4c>)
    1c92:	4798      	blx	r3
}
    1c94:	bd10      	pop	{r4, pc}
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	20003b60 	.word	0x20003b60
    1c9c:	20003c5c 	.word	0x20003c5c
    1ca0:	20003b64 	.word	0x20003b64
    1ca4:	00001a1d 	.word	0x00001a1d
    1ca8:	20000014 	.word	0x20000014
    1cac:	20003b68 	.word	0x20003b68

00001cb0 <xTaskGenericCreate>:
{
    1cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cb2:	46d6      	mov	lr, sl
    1cb4:	464f      	mov	r7, r9
    1cb6:	b580      	push	{r7, lr}
    1cb8:	b083      	sub	sp, #12
    1cba:	0005      	movs	r5, r0
    1cbc:	9100      	str	r1, [sp, #0]
    1cbe:	0016      	movs	r6, r2
    1cc0:	9301      	str	r3, [sp, #4]
    1cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1cc4:	4699      	mov	r9, r3
    1cc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
    1cc8:	2800      	cmp	r0, #0
    1cca:	d003      	beq.n	1cd4 <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    1ccc:	2b04      	cmp	r3, #4
    1cce:	d903      	bls.n	1cd8 <xTaskGenericCreate+0x28>
    1cd0:	b672      	cpsid	i
    1cd2:	e7fe      	b.n	1cd2 <xTaskGenericCreate+0x22>
	configASSERT( pxTaskCode );
    1cd4:	b672      	cpsid	i
    1cd6:	e7fe      	b.n	1cd6 <xTaskGenericCreate+0x26>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    1cd8:	2040      	movs	r0, #64	; 0x40
    1cda:	4b5a      	ldr	r3, [pc, #360]	; (1e44 <xTaskGenericCreate+0x194>)
    1cdc:	4798      	blx	r3
    1cde:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
    1ce0:	d00c      	beq.n	1cfc <xTaskGenericCreate+0x4c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    1ce2:	2f00      	cmp	r7, #0
    1ce4:	d000      	beq.n	1ce8 <xTaskGenericCreate+0x38>
    1ce6:	e078      	b.n	1dda <xTaskGenericCreate+0x12a>
    1ce8:	00b0      	lsls	r0, r6, #2
    1cea:	4b56      	ldr	r3, [pc, #344]	; (1e44 <xTaskGenericCreate+0x194>)
    1cec:	4798      	blx	r3
    1cee:	1e07      	subs	r7, r0, #0
    1cf0:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    1cf2:	d000      	beq.n	1cf6 <xTaskGenericCreate+0x46>
    1cf4:	e072      	b.n	1ddc <xTaskGenericCreate+0x12c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    1cf6:	0020      	movs	r0, r4
    1cf8:	4b53      	ldr	r3, [pc, #332]	; (1e48 <xTaskGenericCreate+0x198>)
    1cfa:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1cfc:	2001      	movs	r0, #1
    1cfe:	4240      	negs	r0, r0
    1d00:	e05a      	b.n	1db8 <xTaskGenericCreate+0x108>
		if( ( void * ) pxCreatedTask != NULL )
    1d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d04:	2b00      	cmp	r3, #0
    1d06:	d000      	beq.n	1d0a <xTaskGenericCreate+0x5a>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    1d08:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
    1d0a:	4b50      	ldr	r3, [pc, #320]	; (1e4c <xTaskGenericCreate+0x19c>)
    1d0c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
    1d0e:	4a50      	ldr	r2, [pc, #320]	; (1e50 <xTaskGenericCreate+0x1a0>)
    1d10:	6813      	ldr	r3, [r2, #0]
    1d12:	3301      	adds	r3, #1
    1d14:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
    1d16:	4b4f      	ldr	r3, [pc, #316]	; (1e54 <xTaskGenericCreate+0x1a4>)
    1d18:	681b      	ldr	r3, [r3, #0]
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d151      	bne.n	1dc2 <xTaskGenericCreate+0x112>
				pxCurrentTCB =  pxNewTCB;
    1d1e:	4b4d      	ldr	r3, [pc, #308]	; (1e54 <xTaskGenericCreate+0x1a4>)
    1d20:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    1d22:	6813      	ldr	r3, [r2, #0]
    1d24:	2b01      	cmp	r3, #1
    1d26:	d11f      	bne.n	1d68 <xTaskGenericCreate+0xb8>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    1d28:	4e4b      	ldr	r6, [pc, #300]	; (1e58 <xTaskGenericCreate+0x1a8>)
    1d2a:	0030      	movs	r0, r6
    1d2c:	4d4b      	ldr	r5, [pc, #300]	; (1e5c <xTaskGenericCreate+0x1ac>)
    1d2e:	47a8      	blx	r5
    1d30:	0030      	movs	r0, r6
    1d32:	3014      	adds	r0, #20
    1d34:	47a8      	blx	r5
    1d36:	0030      	movs	r0, r6
    1d38:	3028      	adds	r0, #40	; 0x28
    1d3a:	47a8      	blx	r5
    1d3c:	0030      	movs	r0, r6
    1d3e:	303c      	adds	r0, #60	; 0x3c
    1d40:	47a8      	blx	r5
    1d42:	0030      	movs	r0, r6
    1d44:	3050      	adds	r0, #80	; 0x50
    1d46:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    1d48:	4f45      	ldr	r7, [pc, #276]	; (1e60 <xTaskGenericCreate+0x1b0>)
    1d4a:	0038      	movs	r0, r7
    1d4c:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    1d4e:	4e45      	ldr	r6, [pc, #276]	; (1e64 <xTaskGenericCreate+0x1b4>)
    1d50:	0030      	movs	r0, r6
    1d52:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
    1d54:	4844      	ldr	r0, [pc, #272]	; (1e68 <xTaskGenericCreate+0x1b8>)
    1d56:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    1d58:	4844      	ldr	r0, [pc, #272]	; (1e6c <xTaskGenericCreate+0x1bc>)
    1d5a:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    1d5c:	4844      	ldr	r0, [pc, #272]	; (1e70 <xTaskGenericCreate+0x1c0>)
    1d5e:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
    1d60:	4b44      	ldr	r3, [pc, #272]	; (1e74 <xTaskGenericCreate+0x1c4>)
    1d62:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1d64:	4b44      	ldr	r3, [pc, #272]	; (1e78 <xTaskGenericCreate+0x1c8>)
    1d66:	601e      	str	r6, [r3, #0]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    1d68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1d6a:	4a44      	ldr	r2, [pc, #272]	; (1e7c <xTaskGenericCreate+0x1cc>)
    1d6c:	6812      	ldr	r2, [r2, #0]
    1d6e:	4293      	cmp	r3, r2
    1d70:	d901      	bls.n	1d76 <xTaskGenericCreate+0xc6>
				uxTopUsedPriority = pxNewTCB->uxPriority;
    1d72:	4a42      	ldr	r2, [pc, #264]	; (1e7c <xTaskGenericCreate+0x1cc>)
    1d74:	6013      	str	r3, [r2, #0]
			uxTaskNumber++;
    1d76:	4942      	ldr	r1, [pc, #264]	; (1e80 <xTaskGenericCreate+0x1d0>)
    1d78:	680a      	ldr	r2, [r1, #0]
    1d7a:	3201      	adds	r2, #1
    1d7c:	600a      	str	r2, [r1, #0]
			prvAddTaskToReadyQueue( pxNewTCB );
    1d7e:	4a41      	ldr	r2, [pc, #260]	; (1e84 <xTaskGenericCreate+0x1d4>)
    1d80:	6812      	ldr	r2, [r2, #0]
    1d82:	4293      	cmp	r3, r2
    1d84:	d901      	bls.n	1d8a <xTaskGenericCreate+0xda>
    1d86:	4a3f      	ldr	r2, [pc, #252]	; (1e84 <xTaskGenericCreate+0x1d4>)
    1d88:	6013      	str	r3, [r2, #0]
    1d8a:	009a      	lsls	r2, r3, #2
    1d8c:	18d3      	adds	r3, r2, r3
    1d8e:	009b      	lsls	r3, r3, #2
    1d90:	4831      	ldr	r0, [pc, #196]	; (1e58 <xTaskGenericCreate+0x1a8>)
    1d92:	18c0      	adds	r0, r0, r3
    1d94:	9900      	ldr	r1, [sp, #0]
    1d96:	4b3c      	ldr	r3, [pc, #240]	; (1e88 <xTaskGenericCreate+0x1d8>)
    1d98:	4798      	blx	r3
		taskEXIT_CRITICAL();
    1d9a:	4b3c      	ldr	r3, [pc, #240]	; (1e8c <xTaskGenericCreate+0x1dc>)
    1d9c:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
    1d9e:	4b3c      	ldr	r3, [pc, #240]	; (1e90 <xTaskGenericCreate+0x1e0>)
    1da0:	681b      	ldr	r3, [r3, #0]
    1da2:	2001      	movs	r0, #1
    1da4:	2b00      	cmp	r3, #0
    1da6:	d007      	beq.n	1db8 <xTaskGenericCreate+0x108>
			if( pxCurrentTCB->uxPriority < uxPriority )
    1da8:	4b2a      	ldr	r3, [pc, #168]	; (1e54 <xTaskGenericCreate+0x1a4>)
    1daa:	681b      	ldr	r3, [r3, #0]
    1dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1dae:	4599      	cmp	r9, r3
    1db0:	d902      	bls.n	1db8 <xTaskGenericCreate+0x108>
				portYIELD_WITHIN_API();
    1db2:	4b38      	ldr	r3, [pc, #224]	; (1e94 <xTaskGenericCreate+0x1e4>)
    1db4:	4798      	blx	r3
    1db6:	2001      	movs	r0, #1
}
    1db8:	b003      	add	sp, #12
    1dba:	bc0c      	pop	{r2, r3}
    1dbc:	4691      	mov	r9, r2
    1dbe:	469a      	mov	sl, r3
    1dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xSchedulerRunning == pdFALSE )
    1dc2:	4b33      	ldr	r3, [pc, #204]	; (1e90 <xTaskGenericCreate+0x1e0>)
    1dc4:	681b      	ldr	r3, [r3, #0]
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d1ce      	bne.n	1d68 <xTaskGenericCreate+0xb8>
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1dca:	4b22      	ldr	r3, [pc, #136]	; (1e54 <xTaskGenericCreate+0x1a4>)
    1dcc:	681b      	ldr	r3, [r3, #0]
    1dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1dd0:	4599      	cmp	r9, r3
    1dd2:	d3c9      	bcc.n	1d68 <xTaskGenericCreate+0xb8>
						pxCurrentTCB = pxNewTCB;
    1dd4:	4b1f      	ldr	r3, [pc, #124]	; (1e54 <xTaskGenericCreate+0x1a4>)
    1dd6:	601c      	str	r4, [r3, #0]
    1dd8:	e7c6      	b.n	1d68 <xTaskGenericCreate+0xb8>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    1dda:	6307      	str	r7, [r0, #48]	; 0x30
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    1ddc:	00b2      	lsls	r2, r6, #2
    1dde:	21a5      	movs	r1, #165	; 0xa5
    1de0:	0038      	movs	r0, r7
    1de2:	4b2d      	ldr	r3, [pc, #180]	; (1e98 <xTaskGenericCreate+0x1e8>)
    1de4:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    1de6:	4b2d      	ldr	r3, [pc, #180]	; (1e9c <xTaskGenericCreate+0x1ec>)
    1de8:	18f3      	adds	r3, r6, r3
    1dea:	009b      	lsls	r3, r3, #2
    1dec:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1dee:	4694      	mov	ip, r2
    1df0:	4463      	add	r3, ip
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    1df2:	2607      	movs	r6, #7
    1df4:	43b3      	bics	r3, r6
    1df6:	469a      	mov	sl, r3
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    1df8:	0020      	movs	r0, r4
    1dfa:	3034      	adds	r0, #52	; 0x34
    1dfc:	2208      	movs	r2, #8
    1dfe:	9900      	ldr	r1, [sp, #0]
    1e00:	4b27      	ldr	r3, [pc, #156]	; (1ea0 <xTaskGenericCreate+0x1f0>)
    1e02:	4798      	blx	r3
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    1e04:	2200      	movs	r2, #0
    1e06:	233b      	movs	r3, #59	; 0x3b
    1e08:	54e2      	strb	r2, [r4, r3]
	pxTCB->uxPriority = uxPriority;
    1e0a:	464b      	mov	r3, r9
    1e0c:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
    1e0e:	63e3      	str	r3, [r4, #60]	; 0x3c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1e10:	1d23      	adds	r3, r4, #4
    1e12:	9300      	str	r3, [sp, #0]
    1e14:	0018      	movs	r0, r3
    1e16:	4f23      	ldr	r7, [pc, #140]	; (1ea4 <xTaskGenericCreate+0x1f4>)
    1e18:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    1e1a:	0020      	movs	r0, r4
    1e1c:	3018      	adds	r0, #24
    1e1e:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    1e20:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    1e22:	2305      	movs	r3, #5
    1e24:	464a      	mov	r2, r9
    1e26:	1a9b      	subs	r3, r3, r2
    1e28:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    1e2a:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1e2c:	9a01      	ldr	r2, [sp, #4]
    1e2e:	0029      	movs	r1, r5
    1e30:	4650      	mov	r0, sl
    1e32:	4b1d      	ldr	r3, [pc, #116]	; (1ea8 <xTaskGenericCreate+0x1f8>)
    1e34:	4798      	blx	r3
    1e36:	6020      	str	r0, [r4, #0]
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    1e38:	4230      	tst	r0, r6
    1e3a:	d100      	bne.n	1e3e <xTaskGenericCreate+0x18e>
    1e3c:	e761      	b.n	1d02 <xTaskGenericCreate+0x52>
    1e3e:	b672      	cpsid	i
    1e40:	e7fe      	b.n	1e40 <xTaskGenericCreate+0x190>
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	00001be1 	.word	0x00001be1
    1e48:	00001c4d 	.word	0x00001c4d
    1e4c:	00001af5 	.word	0x00001af5
    1e50:	20003bd0 	.word	0x20003bd0
    1e54:	20003b60 	.word	0x20003b60
    1e58:	20003b6c 	.word	0x20003b6c
    1e5c:	000019e5 	.word	0x000019e5
    1e60:	20003bec 	.word	0x20003bec
    1e64:	20003c00 	.word	0x20003c00
    1e68:	20003c1c 	.word	0x20003c1c
    1e6c:	20003c48 	.word	0x20003c48
    1e70:	20003c34 	.word	0x20003c34
    1e74:	20003b64 	.word	0x20003b64
    1e78:	20003b68 	.word	0x20003b68
    1e7c:	20003be8 	.word	0x20003be8
    1e80:	20003bdc 	.word	0x20003bdc
    1e84:	20003be4 	.word	0x20003be4
    1e88:	00001a01 	.word	0x00001a01
    1e8c:	00001b0d 	.word	0x00001b0d
    1e90:	20003c30 	.word	0x20003c30
    1e94:	00001add 	.word	0x00001add
    1e98:	000042e5 	.word	0x000042e5
    1e9c:	3fffffff 	.word	0x3fffffff
    1ea0:	000043c9 	.word	0x000043c9
    1ea4:	000019fb 	.word	0x000019fb
    1ea8:	00001a9d 	.word	0x00001a9d

00001eac <vTaskStartScheduler>:
{
    1eac:	b510      	push	{r4, lr}
    1eae:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    1eb0:	2300      	movs	r3, #0
    1eb2:	9303      	str	r3, [sp, #12]
    1eb4:	9302      	str	r3, [sp, #8]
    1eb6:	9301      	str	r3, [sp, #4]
    1eb8:	9300      	str	r3, [sp, #0]
    1eba:	2264      	movs	r2, #100	; 0x64
    1ebc:	490a      	ldr	r1, [pc, #40]	; (1ee8 <vTaskStartScheduler+0x3c>)
    1ebe:	480b      	ldr	r0, [pc, #44]	; (1eec <vTaskStartScheduler+0x40>)
    1ec0:	4c0b      	ldr	r4, [pc, #44]	; (1ef0 <vTaskStartScheduler+0x44>)
    1ec2:	47a0      	blx	r4
	if( xReturn == pdPASS )
    1ec4:	2801      	cmp	r0, #1
    1ec6:	d003      	beq.n	1ed0 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
    1ec8:	2800      	cmp	r0, #0
    1eca:	d10a      	bne.n	1ee2 <vTaskStartScheduler+0x36>
    1ecc:	b672      	cpsid	i
    1ece:	e7fe      	b.n	1ece <vTaskStartScheduler+0x22>
		portDISABLE_INTERRUPTS();
    1ed0:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
    1ed2:	2201      	movs	r2, #1
    1ed4:	4b07      	ldr	r3, [pc, #28]	; (1ef4 <vTaskStartScheduler+0x48>)
    1ed6:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    1ed8:	2200      	movs	r2, #0
    1eda:	4b07      	ldr	r3, [pc, #28]	; (1ef8 <vTaskStartScheduler+0x4c>)
    1edc:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    1ede:	4b07      	ldr	r3, [pc, #28]	; (1efc <vTaskStartScheduler+0x50>)
    1ee0:	4798      	blx	r3
}
    1ee2:	b004      	add	sp, #16
    1ee4:	bd10      	pop	{r4, pc}
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	00004cf4 	.word	0x00004cf4
    1eec:	000021c5 	.word	0x000021c5
    1ef0:	00001cb1 	.word	0x00001cb1
    1ef4:	20003c30 	.word	0x20003c30
    1ef8:	20003c5c 	.word	0x20003c5c
    1efc:	00001ba5 	.word	0x00001ba5

00001f00 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    1f00:	4a02      	ldr	r2, [pc, #8]	; (1f0c <vTaskSuspendAll+0xc>)
    1f02:	6813      	ldr	r3, [r2, #0]
    1f04:	3301      	adds	r3, #1
    1f06:	6013      	str	r3, [r2, #0]
}
    1f08:	4770      	bx	lr
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	20003bd8 	.word	0x20003bd8

00001f10 <xTaskGetTickCount>:
{
    1f10:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
    1f12:	4b04      	ldr	r3, [pc, #16]	; (1f24 <xTaskGetTickCount+0x14>)
    1f14:	4798      	blx	r3
		xTicks = xTickCount;
    1f16:	4b04      	ldr	r3, [pc, #16]	; (1f28 <xTaskGetTickCount+0x18>)
    1f18:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
    1f1a:	4b04      	ldr	r3, [pc, #16]	; (1f2c <xTaskGetTickCount+0x1c>)
    1f1c:	4798      	blx	r3
}
    1f1e:	0020      	movs	r0, r4
    1f20:	bd10      	pop	{r4, pc}
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	00001af5 	.word	0x00001af5
    1f28:	20003c5c 	.word	0x20003c5c
    1f2c:	00001b0d 	.word	0x00001b0d

00001f30 <vTaskIncrementTick>:
{
    1f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1f32:	4b3b      	ldr	r3, [pc, #236]	; (2020 <STACK_SIZE+0x20>)
    1f34:	681b      	ldr	r3, [r3, #0]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d16d      	bne.n	2016 <STACK_SIZE+0x16>
		++xTickCount;
    1f3a:	4b3a      	ldr	r3, [pc, #232]	; (2024 <STACK_SIZE+0x24>)
    1f3c:	681a      	ldr	r2, [r3, #0]
    1f3e:	3201      	adds	r2, #1
    1f40:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    1f42:	681b      	ldr	r3, [r3, #0]
    1f44:	2b00      	cmp	r3, #0
    1f46:	d118      	bne.n	1f7a <vTaskIncrementTick+0x4a>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
    1f48:	4b37      	ldr	r3, [pc, #220]	; (2028 <STACK_SIZE+0x28>)
    1f4a:	681b      	ldr	r3, [r3, #0]
    1f4c:	681b      	ldr	r3, [r3, #0]
    1f4e:	2b00      	cmp	r3, #0
    1f50:	d001      	beq.n	1f56 <vTaskIncrementTick+0x26>
    1f52:	b672      	cpsid	i
    1f54:	e7fe      	b.n	1f54 <vTaskIncrementTick+0x24>
			pxTemp = pxDelayedTaskList;
    1f56:	4b34      	ldr	r3, [pc, #208]	; (2028 <STACK_SIZE+0x28>)
    1f58:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    1f5a:	4a34      	ldr	r2, [pc, #208]	; (202c <STACK_SIZE+0x2c>)
    1f5c:	6810      	ldr	r0, [r2, #0]
    1f5e:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    1f60:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
    1f62:	4933      	ldr	r1, [pc, #204]	; (2030 <STACK_SIZE+0x30>)
    1f64:	680a      	ldr	r2, [r1, #0]
    1f66:	3201      	adds	r2, #1
    1f68:	600a      	str	r2, [r1, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1f6a:	681b      	ldr	r3, [r3, #0]
    1f6c:	681b      	ldr	r3, [r3, #0]
    1f6e:	2b00      	cmp	r3, #0
    1f70:	d11a      	bne.n	1fa8 <vTaskIncrementTick+0x78>
				xNextTaskUnblockTime = portMAX_DELAY;
    1f72:	2201      	movs	r2, #1
    1f74:	4252      	negs	r2, r2
    1f76:	4b2f      	ldr	r3, [pc, #188]	; (2034 <STACK_SIZE+0x34>)
    1f78:	601a      	str	r2, [r3, #0]
		prvCheckDelayedTasks();
    1f7a:	4b2a      	ldr	r3, [pc, #168]	; (2024 <STACK_SIZE+0x24>)
    1f7c:	681a      	ldr	r2, [r3, #0]
    1f7e:	4b2d      	ldr	r3, [pc, #180]	; (2034 <STACK_SIZE+0x34>)
    1f80:	681b      	ldr	r3, [r3, #0]
    1f82:	429a      	cmp	r2, r3
    1f84:	d34b      	bcc.n	201e <STACK_SIZE+0x1e>
    1f86:	4b28      	ldr	r3, [pc, #160]	; (2028 <STACK_SIZE+0x28>)
    1f88:	681b      	ldr	r3, [r3, #0]
    1f8a:	681b      	ldr	r3, [r3, #0]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d013      	beq.n	1fb8 <vTaskIncrementTick+0x88>
    1f90:	4b25      	ldr	r3, [pc, #148]	; (2028 <STACK_SIZE+0x28>)
    1f92:	681b      	ldr	r3, [r3, #0]
    1f94:	68db      	ldr	r3, [r3, #12]
    1f96:	68dc      	ldr	r4, [r3, #12]
    1f98:	6863      	ldr	r3, [r4, #4]
    1f9a:	4a22      	ldr	r2, [pc, #136]	; (2024 <STACK_SIZE+0x24>)
    1f9c:	6812      	ldr	r2, [r2, #0]
    1f9e:	4293      	cmp	r3, r2
    1fa0:	d80f      	bhi.n	1fc2 <vTaskIncrementTick+0x92>
    1fa2:	4f25      	ldr	r7, [pc, #148]	; (2038 <STACK_SIZE+0x38>)
    1fa4:	4e25      	ldr	r6, [pc, #148]	; (203c <STACK_SIZE+0x3c>)
    1fa6:	e025      	b.n	1ff4 <vTaskIncrementTick+0xc4>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1fa8:	4b1f      	ldr	r3, [pc, #124]	; (2028 <STACK_SIZE+0x28>)
    1faa:	681b      	ldr	r3, [r3, #0]
    1fac:	68db      	ldr	r3, [r3, #12]
    1fae:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    1fb0:	685a      	ldr	r2, [r3, #4]
    1fb2:	4b20      	ldr	r3, [pc, #128]	; (2034 <STACK_SIZE+0x34>)
    1fb4:	601a      	str	r2, [r3, #0]
    1fb6:	e7e0      	b.n	1f7a <vTaskIncrementTick+0x4a>
		prvCheckDelayedTasks();
    1fb8:	2201      	movs	r2, #1
    1fba:	4252      	negs	r2, r2
    1fbc:	4b1d      	ldr	r3, [pc, #116]	; (2034 <STACK_SIZE+0x34>)
    1fbe:	601a      	str	r2, [r3, #0]
    1fc0:	e02d      	b.n	201e <STACK_SIZE+0x1e>
    1fc2:	4a1c      	ldr	r2, [pc, #112]	; (2034 <STACK_SIZE+0x34>)
    1fc4:	6013      	str	r3, [r2, #0]
    1fc6:	e02a      	b.n	201e <STACK_SIZE+0x1e>
    1fc8:	0098      	lsls	r0, r3, #2
    1fca:	18c0      	adds	r0, r0, r3
    1fcc:	0080      	lsls	r0, r0, #2
    1fce:	4b1c      	ldr	r3, [pc, #112]	; (2040 <STACK_SIZE+0x40>)
    1fd0:	1818      	adds	r0, r3, r0
    1fd2:	0029      	movs	r1, r5
    1fd4:	4b1b      	ldr	r3, [pc, #108]	; (2044 <STACK_SIZE+0x44>)
    1fd6:	4798      	blx	r3
    1fd8:	4b13      	ldr	r3, [pc, #76]	; (2028 <STACK_SIZE+0x28>)
    1fda:	681b      	ldr	r3, [r3, #0]
    1fdc:	681b      	ldr	r3, [r3, #0]
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d0ea      	beq.n	1fb8 <vTaskIncrementTick+0x88>
    1fe2:	4b11      	ldr	r3, [pc, #68]	; (2028 <STACK_SIZE+0x28>)
    1fe4:	681b      	ldr	r3, [r3, #0]
    1fe6:	68db      	ldr	r3, [r3, #12]
    1fe8:	68dc      	ldr	r4, [r3, #12]
    1fea:	6863      	ldr	r3, [r4, #4]
    1fec:	4a0d      	ldr	r2, [pc, #52]	; (2024 <STACK_SIZE+0x24>)
    1fee:	6812      	ldr	r2, [r2, #0]
    1ff0:	4293      	cmp	r3, r2
    1ff2:	d8e6      	bhi.n	1fc2 <vTaskIncrementTick+0x92>
    1ff4:	1d25      	adds	r5, r4, #4
    1ff6:	0028      	movs	r0, r5
    1ff8:	47b8      	blx	r7
    1ffa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	d003      	beq.n	2008 <STACK_SIZE+0x8>
    2000:	0020      	movs	r0, r4
    2002:	3018      	adds	r0, #24
    2004:	4b0c      	ldr	r3, [pc, #48]	; (2038 <STACK_SIZE+0x38>)
    2006:	4798      	blx	r3
    2008:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    200a:	6832      	ldr	r2, [r6, #0]
    200c:	4293      	cmp	r3, r2
    200e:	d9db      	bls.n	1fc8 <vTaskIncrementTick+0x98>
    2010:	4a0a      	ldr	r2, [pc, #40]	; (203c <STACK_SIZE+0x3c>)
    2012:	6013      	str	r3, [r2, #0]
    2014:	e7d8      	b.n	1fc8 <vTaskIncrementTick+0x98>
		++uxMissedTicks;
    2016:	4a0c      	ldr	r2, [pc, #48]	; (2048 <STACK_SIZE+0x48>)
    2018:	6813      	ldr	r3, [r2, #0]
    201a:	3301      	adds	r3, #1
    201c:	6013      	str	r3, [r2, #0]
}
    201e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2020:	20003bd8 	.word	0x20003bd8
    2024:	20003c5c 	.word	0x20003c5c
    2028:	20003b64 	.word	0x20003b64
    202c:	20003b68 	.word	0x20003b68
    2030:	20003c18 	.word	0x20003c18
    2034:	20000014 	.word	0x20000014
    2038:	00001a53 	.word	0x00001a53
    203c:	20003be4 	.word	0x20003be4
    2040:	20003b6c 	.word	0x20003b6c
    2044:	00001a01 	.word	0x00001a01
    2048:	20003bd4 	.word	0x20003bd4

0000204c <xTaskResumeAll>:
{
    204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    204e:	4b2e      	ldr	r3, [pc, #184]	; (2108 <xTaskResumeAll+0xbc>)
    2050:	681b      	ldr	r3, [r3, #0]
    2052:	2b00      	cmp	r3, #0
    2054:	d101      	bne.n	205a <xTaskResumeAll+0xe>
    2056:	b672      	cpsid	i
    2058:	e7fe      	b.n	2058 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    205a:	4b2c      	ldr	r3, [pc, #176]	; (210c <xTaskResumeAll+0xc0>)
    205c:	4798      	blx	r3
		--uxSchedulerSuspended;
    205e:	4b2a      	ldr	r3, [pc, #168]	; (2108 <xTaskResumeAll+0xbc>)
    2060:	681a      	ldr	r2, [r3, #0]
    2062:	3a01      	subs	r2, #1
    2064:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2066:	681b      	ldr	r3, [r3, #0]
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    2068:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    206a:	2b00      	cmp	r3, #0
    206c:	d103      	bne.n	2076 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    206e:	4b28      	ldr	r3, [pc, #160]	; (2110 <xTaskResumeAll+0xc4>)
    2070:	681b      	ldr	r3, [r3, #0]
    2072:	2b00      	cmp	r3, #0
    2074:	d103      	bne.n	207e <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
    2076:	4b27      	ldr	r3, [pc, #156]	; (2114 <xTaskResumeAll+0xc8>)
    2078:	4798      	blx	r3
}
    207a:	0020      	movs	r0, r4
    207c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    207e:	4d26      	ldr	r5, [pc, #152]	; (2118 <xTaskResumeAll+0xcc>)
    2080:	682b      	ldr	r3, [r5, #0]
    2082:	2b00      	cmp	r3, #0
    2084:	d021      	beq.n	20ca <xTaskResumeAll+0x7e>
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    2086:	4b24      	ldr	r3, [pc, #144]	; (2118 <xTaskResumeAll+0xcc>)
    2088:	68db      	ldr	r3, [r3, #12]
    208a:	68df      	ldr	r7, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
    208c:	0038      	movs	r0, r7
    208e:	3018      	adds	r0, #24
    2090:	4b22      	ldr	r3, [pc, #136]	; (211c <xTaskResumeAll+0xd0>)
    2092:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
    2094:	1d3e      	adds	r6, r7, #4
    2096:	0030      	movs	r0, r6
    2098:	4b20      	ldr	r3, [pc, #128]	; (211c <xTaskResumeAll+0xd0>)
    209a:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
    209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    209e:	4a20      	ldr	r2, [pc, #128]	; (2120 <xTaskResumeAll+0xd4>)
    20a0:	6812      	ldr	r2, [r2, #0]
    20a2:	4293      	cmp	r3, r2
    20a4:	d901      	bls.n	20aa <xTaskResumeAll+0x5e>
    20a6:	4a1e      	ldr	r2, [pc, #120]	; (2120 <xTaskResumeAll+0xd4>)
    20a8:	6013      	str	r3, [r2, #0]
    20aa:	0098      	lsls	r0, r3, #2
    20ac:	18c0      	adds	r0, r0, r3
    20ae:	0080      	lsls	r0, r0, #2
    20b0:	4b1c      	ldr	r3, [pc, #112]	; (2124 <xTaskResumeAll+0xd8>)
    20b2:	1818      	adds	r0, r3, r0
    20b4:	0031      	movs	r1, r6
    20b6:	4b1c      	ldr	r3, [pc, #112]	; (2128 <xTaskResumeAll+0xdc>)
    20b8:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    20ba:	4b1c      	ldr	r3, [pc, #112]	; (212c <xTaskResumeAll+0xe0>)
    20bc:	681b      	ldr	r3, [r3, #0]
    20be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    20c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    20c2:	429a      	cmp	r2, r3
    20c4:	d3dc      	bcc.n	2080 <xTaskResumeAll+0x34>
						xYieldRequired = pdTRUE;
    20c6:	2401      	movs	r4, #1
    20c8:	e7da      	b.n	2080 <xTaskResumeAll+0x34>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    20ca:	4b19      	ldr	r3, [pc, #100]	; (2130 <xTaskResumeAll+0xe4>)
    20cc:	681b      	ldr	r3, [r3, #0]
    20ce:	2b00      	cmp	r3, #0
    20d0:	d013      	beq.n	20fa <xTaskResumeAll+0xae>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    20d2:	4b17      	ldr	r3, [pc, #92]	; (2130 <xTaskResumeAll+0xe4>)
    20d4:	681b      	ldr	r3, [r3, #0]
    20d6:	2b00      	cmp	r3, #0
    20d8:	d008      	beq.n	20ec <xTaskResumeAll+0xa0>
						vTaskIncrementTick();
    20da:	4d16      	ldr	r5, [pc, #88]	; (2134 <xTaskResumeAll+0xe8>)
						--uxMissedTicks;
    20dc:	4c14      	ldr	r4, [pc, #80]	; (2130 <xTaskResumeAll+0xe4>)
						vTaskIncrementTick();
    20de:	47a8      	blx	r5
						--uxMissedTicks;
    20e0:	6823      	ldr	r3, [r4, #0]
    20e2:	3b01      	subs	r3, #1
    20e4:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    20e6:	6823      	ldr	r3, [r4, #0]
    20e8:	2b00      	cmp	r3, #0
    20ea:	d1f8      	bne.n	20de <xTaskResumeAll+0x92>
					xMissedYield = pdFALSE;
    20ec:	2200      	movs	r2, #0
    20ee:	4b12      	ldr	r3, [pc, #72]	; (2138 <xTaskResumeAll+0xec>)
    20f0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    20f2:	4b12      	ldr	r3, [pc, #72]	; (213c <xTaskResumeAll+0xf0>)
    20f4:	4798      	blx	r3
					xAlreadyYielded = pdTRUE;
    20f6:	2401      	movs	r4, #1
    20f8:	e7bd      	b.n	2076 <xTaskResumeAll+0x2a>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    20fa:	2c01      	cmp	r4, #1
    20fc:	d0f6      	beq.n	20ec <xTaskResumeAll+0xa0>
    20fe:	4b0e      	ldr	r3, [pc, #56]	; (2138 <xTaskResumeAll+0xec>)
    2100:	681b      	ldr	r3, [r3, #0]
    2102:	2b01      	cmp	r3, #1
    2104:	d1b7      	bne.n	2076 <xTaskResumeAll+0x2a>
    2106:	e7f1      	b.n	20ec <xTaskResumeAll+0xa0>
    2108:	20003bd8 	.word	0x20003bd8
    210c:	00001af5 	.word	0x00001af5
    2110:	20003bd0 	.word	0x20003bd0
    2114:	00001b0d 	.word	0x00001b0d
    2118:	20003c1c 	.word	0x20003c1c
    211c:	00001a53 	.word	0x00001a53
    2120:	20003be4 	.word	0x20003be4
    2124:	20003b6c 	.word	0x20003b6c
    2128:	00001a01 	.word	0x00001a01
    212c:	20003b60 	.word	0x20003b60
    2130:	20003bd4 	.word	0x20003bd4
    2134:	00001f31 	.word	0x00001f31
    2138:	20003c14 	.word	0x20003c14
    213c:	00001add 	.word	0x00001add

00002140 <vTaskDelayUntil>:
	{
    2140:	b570      	push	{r4, r5, r6, lr}
    2142:	0005      	movs	r5, r0
    2144:	000c      	movs	r4, r1
		configASSERT( pxPreviousWakeTime );
    2146:	2800      	cmp	r0, #0
    2148:	d003      	beq.n	2152 <vTaskDelayUntil+0x12>
		configASSERT( ( xTimeIncrement > 0U ) );
    214a:	2900      	cmp	r1, #0
    214c:	d103      	bne.n	2156 <vTaskDelayUntil+0x16>
    214e:	b672      	cpsid	i
    2150:	e7fe      	b.n	2150 <vTaskDelayUntil+0x10>
		configASSERT( pxPreviousWakeTime );
    2152:	b672      	cpsid	i
    2154:	e7fe      	b.n	2154 <vTaskDelayUntil+0x14>
		vTaskSuspendAll();
    2156:	4b14      	ldr	r3, [pc, #80]	; (21a8 <vTaskDelayUntil+0x68>)
    2158:	4798      	blx	r3
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    215a:	682b      	ldr	r3, [r5, #0]
    215c:	18e4      	adds	r4, r4, r3
			if( xTickCount < *pxPreviousWakeTime )
    215e:	4a13      	ldr	r2, [pc, #76]	; (21ac <vTaskDelayUntil+0x6c>)
    2160:	6812      	ldr	r2, [r2, #0]
    2162:	4293      	cmp	r3, r2
    2164:	d915      	bls.n	2192 <vTaskDelayUntil+0x52>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    2166:	42a3      	cmp	r3, r4
    2168:	d919      	bls.n	219e <vTaskDelayUntil+0x5e>
    216a:	4b10      	ldr	r3, [pc, #64]	; (21ac <vTaskDelayUntil+0x6c>)
    216c:	681b      	ldr	r3, [r3, #0]
			*pxPreviousWakeTime = xTimeToWake;
    216e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
    2170:	429c      	cmp	r4, r3
    2172:	d907      	bls.n	2184 <vTaskDelayUntil+0x44>
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    2174:	4b0e      	ldr	r3, [pc, #56]	; (21b0 <vTaskDelayUntil+0x70>)
    2176:	6818      	ldr	r0, [r3, #0]
    2178:	3004      	adds	r0, #4
    217a:	4b0e      	ldr	r3, [pc, #56]	; (21b4 <vTaskDelayUntil+0x74>)
    217c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    217e:	0020      	movs	r0, r4
    2180:	4b0d      	ldr	r3, [pc, #52]	; (21b8 <vTaskDelayUntil+0x78>)
    2182:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    2184:	4b0d      	ldr	r3, [pc, #52]	; (21bc <vTaskDelayUntil+0x7c>)
    2186:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    2188:	2800      	cmp	r0, #0
    218a:	d101      	bne.n	2190 <vTaskDelayUntil+0x50>
			portYIELD_WITHIN_API();
    218c:	4b0c      	ldr	r3, [pc, #48]	; (21c0 <vTaskDelayUntil+0x80>)
    218e:	4798      	blx	r3
	}
    2190:	bd70      	pop	{r4, r5, r6, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    2192:	42a3      	cmp	r3, r4
    2194:	d805      	bhi.n	21a2 <vTaskDelayUntil+0x62>
    2196:	4b05      	ldr	r3, [pc, #20]	; (21ac <vTaskDelayUntil+0x6c>)
    2198:	681b      	ldr	r3, [r3, #0]
    219a:	429c      	cmp	r4, r3
    219c:	d801      	bhi.n	21a2 <vTaskDelayUntil+0x62>
			*pxPreviousWakeTime = xTimeToWake;
    219e:	602c      	str	r4, [r5, #0]
    21a0:	e7f0      	b.n	2184 <vTaskDelayUntil+0x44>
    21a2:	602c      	str	r4, [r5, #0]
    21a4:	e7e6      	b.n	2174 <vTaskDelayUntil+0x34>
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00001f01 	.word	0x00001f01
    21ac:	20003c5c 	.word	0x20003c5c
    21b0:	20003b60 	.word	0x20003b60
    21b4:	00001a53 	.word	0x00001a53
    21b8:	00001c59 	.word	0x00001c59
    21bc:	0000204d 	.word	0x0000204d
    21c0:	00001add 	.word	0x00001add

000021c4 <prvIdleTask>:
{
    21c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21c6:	46ce      	mov	lr, r9
    21c8:	4647      	mov	r7, r8
    21ca:	b580      	push	{r7, lr}
			vTaskSuspendAll();
    21cc:	4b16      	ldr	r3, [pc, #88]	; (2228 <prvIdleTask+0x64>)
    21ce:	4698      	mov	r8, r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    21d0:	4f16      	ldr	r7, [pc, #88]	; (222c <prvIdleTask+0x68>)
			xTaskResumeAll();
    21d2:	4e17      	ldr	r6, [pc, #92]	; (2230 <prvIdleTask+0x6c>)
    21d4:	e026      	b.n	2224 <prvIdleTask+0x60>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    21d6:	4b17      	ldr	r3, [pc, #92]	; (2234 <prvIdleTask+0x70>)
    21d8:	681b      	ldr	r3, [r3, #0]
    21da:	2b01      	cmp	r3, #1
    21dc:	d820      	bhi.n	2220 <prvIdleTask+0x5c>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    21de:	682b      	ldr	r3, [r5, #0]
    21e0:	2b00      	cmp	r3, #0
    21e2:	d0f8      	beq.n	21d6 <prvIdleTask+0x12>
			vTaskSuspendAll();
    21e4:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    21e6:	683c      	ldr	r4, [r7, #0]
			xTaskResumeAll();
    21e8:	47b0      	blx	r6
			if( xListIsEmpty == pdFALSE )
    21ea:	2c00      	cmp	r4, #0
    21ec:	d0f7      	beq.n	21de <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
    21ee:	4b12      	ldr	r3, [pc, #72]	; (2238 <prvIdleTask+0x74>)
    21f0:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    21f2:	4b0e      	ldr	r3, [pc, #56]	; (222c <prvIdleTask+0x68>)
    21f4:	68db      	ldr	r3, [r3, #12]
    21f6:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
    21f8:	1d20      	adds	r0, r4, #4
    21fa:	4b10      	ldr	r3, [pc, #64]	; (223c <prvIdleTask+0x78>)
    21fc:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    21fe:	4a10      	ldr	r2, [pc, #64]	; (2240 <prvIdleTask+0x7c>)
    2200:	6813      	ldr	r3, [r2, #0]
    2202:	3b01      	subs	r3, #1
    2204:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
    2206:	4a0f      	ldr	r2, [pc, #60]	; (2244 <prvIdleTask+0x80>)
    2208:	6813      	ldr	r3, [r2, #0]
    220a:	3b01      	subs	r3, #1
    220c:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
    220e:	4b0e      	ldr	r3, [pc, #56]	; (2248 <prvIdleTask+0x84>)
    2210:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    2212:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2214:	4b0d      	ldr	r3, [pc, #52]	; (224c <prvIdleTask+0x88>)
    2216:	4699      	mov	r9, r3
    2218:	4798      	blx	r3
		vPortFree( pxTCB );
    221a:	0020      	movs	r0, r4
    221c:	47c8      	blx	r9
    221e:	e7de      	b.n	21de <prvIdleTask+0x1a>
				taskYIELD();
    2220:	4b0b      	ldr	r3, [pc, #44]	; (2250 <prvIdleTask+0x8c>)
    2222:	4798      	blx	r3
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    2224:	4d07      	ldr	r5, [pc, #28]	; (2244 <prvIdleTask+0x80>)
    2226:	e7da      	b.n	21de <prvIdleTask+0x1a>
    2228:	00001f01 	.word	0x00001f01
    222c:	20003c48 	.word	0x20003c48
    2230:	0000204d 	.word	0x0000204d
    2234:	20003b6c 	.word	0x20003b6c
    2238:	00001af5 	.word	0x00001af5
    223c:	00001a53 	.word	0x00001a53
    2240:	20003bd0 	.word	0x20003bd0
    2244:	20003be0 	.word	0x20003be0
    2248:	00001b0d 	.word	0x00001b0d
    224c:	00001c4d 	.word	0x00001c4d
    2250:	00001add 	.word	0x00001add

00002254 <vTaskSwitchContext>:
{
    2254:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2256:	4b24      	ldr	r3, [pc, #144]	; (22e8 <vTaskSwitchContext+0x94>)
    2258:	681b      	ldr	r3, [r3, #0]
    225a:	2b00      	cmp	r3, #0
    225c:	d11e      	bne.n	229c <vTaskSwitchContext+0x48>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    225e:	4b23      	ldr	r3, [pc, #140]	; (22ec <vTaskSwitchContext+0x98>)
    2260:	681a      	ldr	r2, [r3, #0]
    2262:	0093      	lsls	r3, r2, #2
    2264:	189b      	adds	r3, r3, r2
    2266:	009b      	lsls	r3, r3, #2
    2268:	4a21      	ldr	r2, [pc, #132]	; (22f0 <vTaskSwitchContext+0x9c>)
    226a:	589b      	ldr	r3, [r3, r2]
    226c:	2b00      	cmp	r3, #0
    226e:	d119      	bne.n	22a4 <vTaskSwitchContext+0x50>
    2270:	4b1e      	ldr	r3, [pc, #120]	; (22ec <vTaskSwitchContext+0x98>)
    2272:	681b      	ldr	r3, [r3, #0]
    2274:	2b00      	cmp	r3, #0
    2276:	d00f      	beq.n	2298 <vTaskSwitchContext+0x44>
    2278:	4a1c      	ldr	r2, [pc, #112]	; (22ec <vTaskSwitchContext+0x98>)
    227a:	4c1d      	ldr	r4, [pc, #116]	; (22f0 <vTaskSwitchContext+0x9c>)
    227c:	0010      	movs	r0, r2
    227e:	6813      	ldr	r3, [r2, #0]
    2280:	3b01      	subs	r3, #1
    2282:	6013      	str	r3, [r2, #0]
    2284:	6811      	ldr	r1, [r2, #0]
    2286:	008b      	lsls	r3, r1, #2
    2288:	185b      	adds	r3, r3, r1
    228a:	009b      	lsls	r3, r3, #2
    228c:	591b      	ldr	r3, [r3, r4]
    228e:	2b00      	cmp	r3, #0
    2290:	d108      	bne.n	22a4 <vTaskSwitchContext+0x50>
    2292:	6803      	ldr	r3, [r0, #0]
    2294:	2b00      	cmp	r3, #0
    2296:	d1f2      	bne.n	227e <vTaskSwitchContext+0x2a>
    2298:	b672      	cpsid	i
    229a:	e7fe      	b.n	229a <vTaskSwitchContext+0x46>
		xMissedYield = pdTRUE;
    229c:	2201      	movs	r2, #1
    229e:	4b15      	ldr	r3, [pc, #84]	; (22f4 <vTaskSwitchContext+0xa0>)
    22a0:	601a      	str	r2, [r3, #0]
}
    22a2:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    22a4:	4b11      	ldr	r3, [pc, #68]	; (22ec <vTaskSwitchContext+0x98>)
    22a6:	681a      	ldr	r2, [r3, #0]
    22a8:	4811      	ldr	r0, [pc, #68]	; (22f0 <vTaskSwitchContext+0x9c>)
    22aa:	0093      	lsls	r3, r2, #2
    22ac:	1899      	adds	r1, r3, r2
    22ae:	0089      	lsls	r1, r1, #2
    22b0:	1841      	adds	r1, r0, r1
    22b2:	684c      	ldr	r4, [r1, #4]
    22b4:	6864      	ldr	r4, [r4, #4]
    22b6:	604c      	str	r4, [r1, #4]
    22b8:	189b      	adds	r3, r3, r2
    22ba:	009b      	lsls	r3, r3, #2
    22bc:	3308      	adds	r3, #8
    22be:	18c3      	adds	r3, r0, r3
    22c0:	429c      	cmp	r4, r3
    22c2:	d009      	beq.n	22d8 <vTaskSwitchContext+0x84>
    22c4:	0093      	lsls	r3, r2, #2
    22c6:	189a      	adds	r2, r3, r2
    22c8:	0092      	lsls	r2, r2, #2
    22ca:	4b09      	ldr	r3, [pc, #36]	; (22f0 <vTaskSwitchContext+0x9c>)
    22cc:	189a      	adds	r2, r3, r2
    22ce:	6853      	ldr	r3, [r2, #4]
    22d0:	68da      	ldr	r2, [r3, #12]
    22d2:	4b09      	ldr	r3, [pc, #36]	; (22f8 <vTaskSwitchContext+0xa4>)
    22d4:	601a      	str	r2, [r3, #0]
}
    22d6:	e7e4      	b.n	22a2 <vTaskSwitchContext+0x4e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    22d8:	6860      	ldr	r0, [r4, #4]
    22da:	0093      	lsls	r3, r2, #2
    22dc:	189b      	adds	r3, r3, r2
    22de:	009b      	lsls	r3, r3, #2
    22e0:	4903      	ldr	r1, [pc, #12]	; (22f0 <vTaskSwitchContext+0x9c>)
    22e2:	18cb      	adds	r3, r1, r3
    22e4:	6058      	str	r0, [r3, #4]
    22e6:	e7ed      	b.n	22c4 <vTaskSwitchContext+0x70>
    22e8:	20003bd8 	.word	0x20003bd8
    22ec:	20003be4 	.word	0x20003be4
    22f0:	20003b6c 	.word	0x20003b6c
    22f4:	20003c14 	.word	0x20003c14
    22f8:	20003b60 	.word	0x20003b60

000022fc <uart_task_handler>:
	while (1) {
	}
}

/*  usart task priority 3*/
static void uart_task_handler(void* parameters){
    22fc:	b570      	push	{r4, r5, r6, lr}
    22fe:	b082      	sub	sp, #8
	
	const portTickType xDelay = 100 / portTICK_RATE_MS;
	portTickType lastwakeup = xTaskGetTickCount();
    2300:	4b11      	ldr	r3, [pc, #68]	; (2348 <uart_task_handler+0x4c>)
    2302:	4798      	blx	r3
    2304:	9001      	str	r0, [sp, #4]
	status_code_genare_t status_tx_check = STATUS_OK;
	
	while(1){

		/*Get Data from accelerometer sensor*/
		ADXL345_get_data(&acc_sensor);
    2306:	4c11      	ldr	r4, [pc, #68]	; (234c <uart_task_handler+0x50>)
    2308:	4e11      	ldr	r6, [pc, #68]	; (2350 <uart_task_handler+0x54>)
				
		status_tx_check = usart_write_wait(&usart_master_module,acc_sensor.acc_raw[0]);
    230a:	4d12      	ldr	r5, [pc, #72]	; (2354 <uart_task_handler+0x58>)
		ADXL345_get_data(&acc_sensor);
    230c:	0020      	movs	r0, r4
    230e:	47b0      	blx	r6
		status_tx_check = usart_write_wait(&usart_master_module,acc_sensor.acc_raw[0]);
    2310:	8821      	ldrh	r1, [r4, #0]
    2312:	0028      	movs	r0, r5
    2314:	4b10      	ldr	r3, [pc, #64]	; (2358 <uart_task_handler+0x5c>)
    2316:	4798      	blx	r3
		
		if(status_tx_check != STATUS_OK){
    2318:	2800      	cmp	r0, #0
    231a:	d112      	bne.n	2342 <uart_task_handler+0x46>
			while(1);
		}
		
		status_tx_check = usart_write_wait(&usart_master_module,acc_sensor.acc_raw[1]);
    231c:	4b0b      	ldr	r3, [pc, #44]	; (234c <uart_task_handler+0x50>)
    231e:	8859      	ldrh	r1, [r3, #2]
    2320:	480c      	ldr	r0, [pc, #48]	; (2354 <uart_task_handler+0x58>)
    2322:	4b0d      	ldr	r3, [pc, #52]	; (2358 <uart_task_handler+0x5c>)
    2324:	4798      	blx	r3
		
		if(status_tx_check != STATUS_OK){
    2326:	2800      	cmp	r0, #0
    2328:	d10c      	bne.n	2344 <uart_task_handler+0x48>
			while(1);
		}
		
		status_tx_check = usart_write_wait(&usart_master_module,acc_sensor.acc_raw[2]);
    232a:	4b08      	ldr	r3, [pc, #32]	; (234c <uart_task_handler+0x50>)
    232c:	8899      	ldrh	r1, [r3, #4]
    232e:	4809      	ldr	r0, [pc, #36]	; (2354 <uart_task_handler+0x58>)
    2330:	4b09      	ldr	r3, [pc, #36]	; (2358 <uart_task_handler+0x5c>)
    2332:	4798      	blx	r3
		
		if(status_tx_check != STATUS_OK){
    2334:	2800      	cmp	r0, #0
    2336:	d106      	bne.n	2346 <uart_task_handler+0x4a>
			while(1);
		}
		
		vTaskDelayUntil(&lastwakeup,xDelay);	
    2338:	2164      	movs	r1, #100	; 0x64
    233a:	a801      	add	r0, sp, #4
    233c:	4b07      	ldr	r3, [pc, #28]	; (235c <uart_task_handler+0x60>)
    233e:	4798      	blx	r3
		ADXL345_get_data(&acc_sensor);
    2340:	e7e4      	b.n	230c <uart_task_handler+0x10>
    2342:	e7fe      	b.n	2342 <uart_task_handler+0x46>
    2344:	e7fe      	b.n	2344 <uart_task_handler+0x48>
    2346:	e7fe      	b.n	2346 <uart_task_handler+0x4a>
    2348:	00001f11 	.word	0x00001f11
    234c:	20003c68 	.word	0x20003c68
    2350:	000001e5 	.word	0x000001e5
    2354:	20003c84 	.word	0x20003c84
    2358:	00001031 	.word	0x00001031
    235c:	00002141 	.word	0x00002141

00002360 <main>:
{
    2360:	b530      	push	{r4, r5, lr}
    2362:	b095      	sub	sp, #84	; 0x54
	system_init();
    2364:	4b4e      	ldr	r3, [pc, #312]	; (24a0 <main+0x140>)
    2366:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2368:	aa04      	add	r2, sp, #16
    236a:	2380      	movs	r3, #128	; 0x80
    236c:	05db      	lsls	r3, r3, #23
    236e:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2370:	2300      	movs	r3, #0
    2372:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    2374:	21ff      	movs	r1, #255	; 0xff
    2376:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    2378:	2100      	movs	r1, #0
    237a:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    237c:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    237e:	2001      	movs	r0, #1
    2380:	2424      	movs	r4, #36	; 0x24
    2382:	5510      	strb	r0, [r2, r4]
	config->transmitter_enable = true;
    2384:	3401      	adds	r4, #1
    2386:	5510      	strb	r0, [r2, r4]
	config->clock_polarity_inverted = false;
    2388:	3025      	adds	r0, #37	; 0x25
    238a:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    238c:	3001      	adds	r0, #1
    238e:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    2390:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2392:	3005      	adds	r0, #5
    2394:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    2396:	3001      	adds	r0, #1
    2398:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    239a:	6313      	str	r3, [r2, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    239c:	6353      	str	r3, [r2, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    239e:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    23a0:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    23a2:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    23a4:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    23a6:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    23a8:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    23aa:	2313      	movs	r3, #19
    23ac:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    23ae:	7751      	strb	r1, [r2, #29]
	status_code_genare_t status_check = STATUS_OK;

	struct usart_config usart_setup;
	usart_get_config_defaults(&usart_setup);
	//configure pins and pinmux for sercom 4
	usart_setup.mux_setting = USART_RX_3_TX_2_XCK_3;
    23b0:	23c4      	movs	r3, #196	; 0xc4
    23b2:	039b      	lsls	r3, r3, #14
    23b4:	60d3      	str	r3, [r2, #12]
	usart_setup.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
    23b6:	4b3b      	ldr	r3, [pc, #236]	; (24a4 <main+0x144>)
    23b8:	6393      	str	r3, [r2, #56]	; 0x38
	usart_setup.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
    23ba:	4b3b      	ldr	r3, [pc, #236]	; (24a8 <main+0x148>)
    23bc:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_setup.baudrate = 115200;
    23be:	23e1      	movs	r3, #225	; 0xe1
    23c0:	025b      	lsls	r3, r3, #9
    23c2:	6213      	str	r3, [r2, #32]
	// write the configuration to the master module
	status_check = usart_init(&usart_master_module, SERCOM4 ,&usart_setup);
    23c4:	4939      	ldr	r1, [pc, #228]	; (24ac <main+0x14c>)
    23c6:	483a      	ldr	r0, [pc, #232]	; (24b0 <main+0x150>)
    23c8:	4b3a      	ldr	r3, [pc, #232]	; (24b4 <main+0x154>)
    23ca:	4798      	blx	r3
	if(status_check != STATUS_OK){
    23cc:	2800      	cmp	r0, #0
    23ce:	d000      	beq.n	23d2 <main+0x72>
    23d0:	e7fe      	b.n	23d0 <main+0x70>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    23d2:	4b37      	ldr	r3, [pc, #220]	; (24b0 <main+0x150>)
    23d4:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    23d6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    23d8:	2a00      	cmp	r2, #0
    23da:	d1fc      	bne.n	23d6 <main+0x76>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    23dc:	681a      	ldr	r2, [r3, #0]
    23de:	2102      	movs	r1, #2
    23e0:	430a      	orrs	r2, r1
    23e2:	601a      	str	r2, [r3, #0]
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    23e4:	aa04      	add	r2, sp, #16
    23e6:	2364      	movs	r3, #100	; 0x64
    23e8:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    23ea:	4b33      	ldr	r3, [pc, #204]	; (24b8 <main+0x158>)
    23ec:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    23ee:	2300      	movs	r3, #0
    23f0:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    23f2:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    23f4:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    23f6:	2180      	movs	r1, #128	; 0x80
    23f8:	0389      	lsls	r1, r1, #14
    23fa:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    23fc:	2101      	movs	r1, #1
    23fe:	4249      	negs	r1, r1
    2400:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    2402:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2404:	3125      	adds	r1, #37	; 0x25
    2406:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2408:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    240a:	3108      	adds	r1, #8
    240c:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    240e:	3101      	adds	r1, #1
    2410:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    2412:	3101      	adds	r1, #1
    2414:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2416:	33d7      	adds	r3, #215	; 0xd7
    2418:	8613      	strh	r3, [r2, #48]	; 0x30
	i2c_config.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0; //SDA
    241a:	4b28      	ldr	r3, [pc, #160]	; (24bc <main+0x15c>)
    241c:	61d3      	str	r3, [r2, #28]
	i2c_config.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1; //SCL
    241e:	4b28      	ldr	r3, [pc, #160]	; (24c0 <main+0x160>)
    2420:	6213      	str	r3, [r2, #32]
	status_check = i2c_master_init(&i2c_master,SERCOM0,&i2c_config);
    2422:	4928      	ldr	r1, [pc, #160]	; (24c4 <main+0x164>)
    2424:	4828      	ldr	r0, [pc, #160]	; (24c8 <main+0x168>)
    2426:	4b29      	ldr	r3, [pc, #164]	; (24cc <main+0x16c>)
    2428:	4798      	blx	r3
	if( status_check != STATUS_OK){
    242a:	2800      	cmp	r0, #0
    242c:	d004      	beq.n	2438 <main+0xd8>
			printf("Could not initialize i2c\n");
    242e:	4d28      	ldr	r5, [pc, #160]	; (24d0 <main+0x170>)
    2430:	4c28      	ldr	r4, [pc, #160]	; (24d4 <main+0x174>)
    2432:	0028      	movs	r0, r5
    2434:	47a0      	blx	r4
    2436:	e7fc      	b.n	2432 <main+0xd2>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2438:	4b23      	ldr	r3, [pc, #140]	; (24c8 <main+0x168>)
    243a:	681b      	ldr	r3, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    243c:	2207      	movs	r2, #7
    243e:	69d9      	ldr	r1, [r3, #28]
	while (i2c_master_is_syncing(module)) {
    2440:	420a      	tst	r2, r1
    2442:	d1fc      	bne.n	243e <main+0xde>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2444:	6819      	ldr	r1, [r3, #0]
    2446:	2202      	movs	r2, #2
    2448:	430a      	orrs	r2, r1
    244a:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    244c:	4a1e      	ldr	r2, [pc, #120]	; (24c8 <main+0x168>)
    244e:	88d0      	ldrh	r0, [r2, #6]
	uint32_t timeout_counter = 0;
    2450:	2200      	movs	r2, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2452:	2110      	movs	r1, #16
    2454:	e002      	b.n	245c <main+0xfc>
		timeout_counter++;
    2456:	3201      	adds	r2, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2458:	4282      	cmp	r2, r0
    245a:	d203      	bcs.n	2464 <main+0x104>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    245c:	8b5c      	ldrh	r4, [r3, #26]
    245e:	420c      	tst	r4, r1
    2460:	d0f9      	beq.n	2456 <main+0xf6>
    2462:	e001      	b.n	2468 <main+0x108>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2464:	2210      	movs	r2, #16
    2466:	835a      	strh	r2, [r3, #26]
	uint8_t err = ADXL345_init(&acc_sensor, &i2c_master, &data_packet);
    2468:	4a1b      	ldr	r2, [pc, #108]	; (24d8 <main+0x178>)
    246a:	4917      	ldr	r1, [pc, #92]	; (24c8 <main+0x168>)
    246c:	481b      	ldr	r0, [pc, #108]	; (24dc <main+0x17c>)
    246e:	4b1c      	ldr	r3, [pc, #112]	; (24e0 <main+0x180>)
    2470:	4798      	blx	r3
	if(err != 0){
    2472:	2800      	cmp	r0, #0
    2474:	d000      	beq.n	2478 <main+0x118>
    2476:	e7fe      	b.n	2476 <main+0x116>
	status = xTaskCreate(uart_task_handler, "UART_task",200,NULL,2,&uart_task_handle);
    2478:	2300      	movs	r3, #0
    247a:	9303      	str	r3, [sp, #12]
    247c:	9302      	str	r3, [sp, #8]
    247e:	4a19      	ldr	r2, [pc, #100]	; (24e4 <main+0x184>)
    2480:	9201      	str	r2, [sp, #4]
    2482:	2202      	movs	r2, #2
    2484:	9200      	str	r2, [sp, #0]
    2486:	32c6      	adds	r2, #198	; 0xc6
    2488:	4917      	ldr	r1, [pc, #92]	; (24e8 <main+0x188>)
    248a:	4818      	ldr	r0, [pc, #96]	; (24ec <main+0x18c>)
    248c:	4c18      	ldr	r4, [pc, #96]	; (24f0 <main+0x190>)
    248e:	47a0      	blx	r4
	configASSERT(status == pdPASS);
    2490:	2801      	cmp	r0, #1
    2492:	d001      	beq.n	2498 <main+0x138>
    2494:	b672      	cpsid	i
    2496:	e7fe      	b.n	2496 <main+0x136>
	vTaskStartScheduler();
    2498:	4b16      	ldr	r3, [pc, #88]	; (24f4 <main+0x194>)
    249a:	4798      	blx	r3
    249c:	e7fe      	b.n	249c <main+0x13c>
    249e:	46c0      	nop			; (mov r8, r8)
    24a0:	00001895 	.word	0x00001895
    24a4:	002a0003 	.word	0x002a0003
    24a8:	002b0003 	.word	0x002b0003
    24ac:	42001800 	.word	0x42001800
    24b0:	20003c84 	.word	0x20003c84
    24b4:	00000d3d 	.word	0x00000d3d
    24b8:	00000d48 	.word	0x00000d48
    24bc:	00080002 	.word	0x00080002
    24c0:	00090002 	.word	0x00090002
    24c4:	42000800 	.word	0x42000800
    24c8:	20003ca0 	.word	0x20003ca0
    24cc:	000003b5 	.word	0x000003b5
    24d0:	00004cfc 	.word	0x00004cfc
    24d4:	000043b5 	.word	0x000043b5
    24d8:	20003c90 	.word	0x20003c90
    24dc:	20003c68 	.word	0x20003c68
    24e0:	00000319 	.word	0x00000319
    24e4:	20003c9c 	.word	0x20003c9c
    24e8:	00004d18 	.word	0x00004d18
    24ec:	000022fd 	.word	0x000022fd
    24f0:	00001cb1 	.word	0x00001cb1
    24f4:	00001ead 	.word	0x00001ead

000024f8 <__udivsi3>:
    24f8:	2200      	movs	r2, #0
    24fa:	0843      	lsrs	r3, r0, #1
    24fc:	428b      	cmp	r3, r1
    24fe:	d374      	bcc.n	25ea <__udivsi3+0xf2>
    2500:	0903      	lsrs	r3, r0, #4
    2502:	428b      	cmp	r3, r1
    2504:	d35f      	bcc.n	25c6 <__udivsi3+0xce>
    2506:	0a03      	lsrs	r3, r0, #8
    2508:	428b      	cmp	r3, r1
    250a:	d344      	bcc.n	2596 <__udivsi3+0x9e>
    250c:	0b03      	lsrs	r3, r0, #12
    250e:	428b      	cmp	r3, r1
    2510:	d328      	bcc.n	2564 <__udivsi3+0x6c>
    2512:	0c03      	lsrs	r3, r0, #16
    2514:	428b      	cmp	r3, r1
    2516:	d30d      	bcc.n	2534 <__udivsi3+0x3c>
    2518:	22ff      	movs	r2, #255	; 0xff
    251a:	0209      	lsls	r1, r1, #8
    251c:	ba12      	rev	r2, r2
    251e:	0c03      	lsrs	r3, r0, #16
    2520:	428b      	cmp	r3, r1
    2522:	d302      	bcc.n	252a <__udivsi3+0x32>
    2524:	1212      	asrs	r2, r2, #8
    2526:	0209      	lsls	r1, r1, #8
    2528:	d065      	beq.n	25f6 <__udivsi3+0xfe>
    252a:	0b03      	lsrs	r3, r0, #12
    252c:	428b      	cmp	r3, r1
    252e:	d319      	bcc.n	2564 <__udivsi3+0x6c>
    2530:	e000      	b.n	2534 <__udivsi3+0x3c>
    2532:	0a09      	lsrs	r1, r1, #8
    2534:	0bc3      	lsrs	r3, r0, #15
    2536:	428b      	cmp	r3, r1
    2538:	d301      	bcc.n	253e <__udivsi3+0x46>
    253a:	03cb      	lsls	r3, r1, #15
    253c:	1ac0      	subs	r0, r0, r3
    253e:	4152      	adcs	r2, r2
    2540:	0b83      	lsrs	r3, r0, #14
    2542:	428b      	cmp	r3, r1
    2544:	d301      	bcc.n	254a <__udivsi3+0x52>
    2546:	038b      	lsls	r3, r1, #14
    2548:	1ac0      	subs	r0, r0, r3
    254a:	4152      	adcs	r2, r2
    254c:	0b43      	lsrs	r3, r0, #13
    254e:	428b      	cmp	r3, r1
    2550:	d301      	bcc.n	2556 <__udivsi3+0x5e>
    2552:	034b      	lsls	r3, r1, #13
    2554:	1ac0      	subs	r0, r0, r3
    2556:	4152      	adcs	r2, r2
    2558:	0b03      	lsrs	r3, r0, #12
    255a:	428b      	cmp	r3, r1
    255c:	d301      	bcc.n	2562 <__udivsi3+0x6a>
    255e:	030b      	lsls	r3, r1, #12
    2560:	1ac0      	subs	r0, r0, r3
    2562:	4152      	adcs	r2, r2
    2564:	0ac3      	lsrs	r3, r0, #11
    2566:	428b      	cmp	r3, r1
    2568:	d301      	bcc.n	256e <__udivsi3+0x76>
    256a:	02cb      	lsls	r3, r1, #11
    256c:	1ac0      	subs	r0, r0, r3
    256e:	4152      	adcs	r2, r2
    2570:	0a83      	lsrs	r3, r0, #10
    2572:	428b      	cmp	r3, r1
    2574:	d301      	bcc.n	257a <__udivsi3+0x82>
    2576:	028b      	lsls	r3, r1, #10
    2578:	1ac0      	subs	r0, r0, r3
    257a:	4152      	adcs	r2, r2
    257c:	0a43      	lsrs	r3, r0, #9
    257e:	428b      	cmp	r3, r1
    2580:	d301      	bcc.n	2586 <__udivsi3+0x8e>
    2582:	024b      	lsls	r3, r1, #9
    2584:	1ac0      	subs	r0, r0, r3
    2586:	4152      	adcs	r2, r2
    2588:	0a03      	lsrs	r3, r0, #8
    258a:	428b      	cmp	r3, r1
    258c:	d301      	bcc.n	2592 <__udivsi3+0x9a>
    258e:	020b      	lsls	r3, r1, #8
    2590:	1ac0      	subs	r0, r0, r3
    2592:	4152      	adcs	r2, r2
    2594:	d2cd      	bcs.n	2532 <__udivsi3+0x3a>
    2596:	09c3      	lsrs	r3, r0, #7
    2598:	428b      	cmp	r3, r1
    259a:	d301      	bcc.n	25a0 <__udivsi3+0xa8>
    259c:	01cb      	lsls	r3, r1, #7
    259e:	1ac0      	subs	r0, r0, r3
    25a0:	4152      	adcs	r2, r2
    25a2:	0983      	lsrs	r3, r0, #6
    25a4:	428b      	cmp	r3, r1
    25a6:	d301      	bcc.n	25ac <__udivsi3+0xb4>
    25a8:	018b      	lsls	r3, r1, #6
    25aa:	1ac0      	subs	r0, r0, r3
    25ac:	4152      	adcs	r2, r2
    25ae:	0943      	lsrs	r3, r0, #5
    25b0:	428b      	cmp	r3, r1
    25b2:	d301      	bcc.n	25b8 <__udivsi3+0xc0>
    25b4:	014b      	lsls	r3, r1, #5
    25b6:	1ac0      	subs	r0, r0, r3
    25b8:	4152      	adcs	r2, r2
    25ba:	0903      	lsrs	r3, r0, #4
    25bc:	428b      	cmp	r3, r1
    25be:	d301      	bcc.n	25c4 <__udivsi3+0xcc>
    25c0:	010b      	lsls	r3, r1, #4
    25c2:	1ac0      	subs	r0, r0, r3
    25c4:	4152      	adcs	r2, r2
    25c6:	08c3      	lsrs	r3, r0, #3
    25c8:	428b      	cmp	r3, r1
    25ca:	d301      	bcc.n	25d0 <__udivsi3+0xd8>
    25cc:	00cb      	lsls	r3, r1, #3
    25ce:	1ac0      	subs	r0, r0, r3
    25d0:	4152      	adcs	r2, r2
    25d2:	0883      	lsrs	r3, r0, #2
    25d4:	428b      	cmp	r3, r1
    25d6:	d301      	bcc.n	25dc <__udivsi3+0xe4>
    25d8:	008b      	lsls	r3, r1, #2
    25da:	1ac0      	subs	r0, r0, r3
    25dc:	4152      	adcs	r2, r2
    25de:	0843      	lsrs	r3, r0, #1
    25e0:	428b      	cmp	r3, r1
    25e2:	d301      	bcc.n	25e8 <__udivsi3+0xf0>
    25e4:	004b      	lsls	r3, r1, #1
    25e6:	1ac0      	subs	r0, r0, r3
    25e8:	4152      	adcs	r2, r2
    25ea:	1a41      	subs	r1, r0, r1
    25ec:	d200      	bcs.n	25f0 <__udivsi3+0xf8>
    25ee:	4601      	mov	r1, r0
    25f0:	4152      	adcs	r2, r2
    25f2:	4610      	mov	r0, r2
    25f4:	4770      	bx	lr
    25f6:	e7ff      	b.n	25f8 <__udivsi3+0x100>
    25f8:	b501      	push	{r0, lr}
    25fa:	2000      	movs	r0, #0
    25fc:	f000 f806 	bl	260c <__aeabi_idiv0>
    2600:	bd02      	pop	{r1, pc}
    2602:	46c0      	nop			; (mov r8, r8)

00002604 <__aeabi_uidivmod>:
    2604:	2900      	cmp	r1, #0
    2606:	d0f7      	beq.n	25f8 <__udivsi3+0x100>
    2608:	e776      	b.n	24f8 <__udivsi3>
    260a:	4770      	bx	lr

0000260c <__aeabi_idiv0>:
    260c:	4770      	bx	lr
    260e:	46c0      	nop			; (mov r8, r8)

00002610 <__aeabi_uldivmod>:
    2610:	2b00      	cmp	r3, #0
    2612:	d111      	bne.n	2638 <__aeabi_uldivmod+0x28>
    2614:	2a00      	cmp	r2, #0
    2616:	d10f      	bne.n	2638 <__aeabi_uldivmod+0x28>
    2618:	2900      	cmp	r1, #0
    261a:	d100      	bne.n	261e <__aeabi_uldivmod+0xe>
    261c:	2800      	cmp	r0, #0
    261e:	d002      	beq.n	2626 <__aeabi_uldivmod+0x16>
    2620:	2100      	movs	r1, #0
    2622:	43c9      	mvns	r1, r1
    2624:	1c08      	adds	r0, r1, #0
    2626:	b407      	push	{r0, r1, r2}
    2628:	4802      	ldr	r0, [pc, #8]	; (2634 <__aeabi_uldivmod+0x24>)
    262a:	a102      	add	r1, pc, #8	; (adr r1, 2634 <__aeabi_uldivmod+0x24>)
    262c:	1840      	adds	r0, r0, r1
    262e:	9002      	str	r0, [sp, #8]
    2630:	bd03      	pop	{r0, r1, pc}
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	ffffffd9 	.word	0xffffffd9
    2638:	b403      	push	{r0, r1}
    263a:	4668      	mov	r0, sp
    263c:	b501      	push	{r0, lr}
    263e:	9802      	ldr	r0, [sp, #8]
    2640:	f000 f830 	bl	26a4 <__udivmoddi4>
    2644:	9b01      	ldr	r3, [sp, #4]
    2646:	469e      	mov	lr, r3
    2648:	b002      	add	sp, #8
    264a:	bc0c      	pop	{r2, r3}
    264c:	4770      	bx	lr
    264e:	46c0      	nop			; (mov r8, r8)

00002650 <__aeabi_lmul>:
    2650:	b5f0      	push	{r4, r5, r6, r7, lr}
    2652:	46ce      	mov	lr, r9
    2654:	4647      	mov	r7, r8
    2656:	0415      	lsls	r5, r2, #16
    2658:	0c2d      	lsrs	r5, r5, #16
    265a:	002e      	movs	r6, r5
    265c:	b580      	push	{r7, lr}
    265e:	0407      	lsls	r7, r0, #16
    2660:	0c14      	lsrs	r4, r2, #16
    2662:	0c3f      	lsrs	r7, r7, #16
    2664:	4699      	mov	r9, r3
    2666:	0c03      	lsrs	r3, r0, #16
    2668:	437e      	muls	r6, r7
    266a:	435d      	muls	r5, r3
    266c:	4367      	muls	r7, r4
    266e:	4363      	muls	r3, r4
    2670:	197f      	adds	r7, r7, r5
    2672:	0c34      	lsrs	r4, r6, #16
    2674:	19e4      	adds	r4, r4, r7
    2676:	469c      	mov	ip, r3
    2678:	42a5      	cmp	r5, r4
    267a:	d903      	bls.n	2684 <__aeabi_lmul+0x34>
    267c:	2380      	movs	r3, #128	; 0x80
    267e:	025b      	lsls	r3, r3, #9
    2680:	4698      	mov	r8, r3
    2682:	44c4      	add	ip, r8
    2684:	464b      	mov	r3, r9
    2686:	4351      	muls	r1, r2
    2688:	4343      	muls	r3, r0
    268a:	0436      	lsls	r6, r6, #16
    268c:	0c36      	lsrs	r6, r6, #16
    268e:	0c25      	lsrs	r5, r4, #16
    2690:	0424      	lsls	r4, r4, #16
    2692:	4465      	add	r5, ip
    2694:	19a4      	adds	r4, r4, r6
    2696:	1859      	adds	r1, r3, r1
    2698:	1949      	adds	r1, r1, r5
    269a:	0020      	movs	r0, r4
    269c:	bc0c      	pop	{r2, r3}
    269e:	4690      	mov	r8, r2
    26a0:	4699      	mov	r9, r3
    26a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000026a4 <__udivmoddi4>:
    26a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26a6:	4657      	mov	r7, sl
    26a8:	464e      	mov	r6, r9
    26aa:	4645      	mov	r5, r8
    26ac:	46de      	mov	lr, fp
    26ae:	b5e0      	push	{r5, r6, r7, lr}
    26b0:	0004      	movs	r4, r0
    26b2:	b083      	sub	sp, #12
    26b4:	000d      	movs	r5, r1
    26b6:	4692      	mov	sl, r2
    26b8:	4699      	mov	r9, r3
    26ba:	428b      	cmp	r3, r1
    26bc:	d82f      	bhi.n	271e <__udivmoddi4+0x7a>
    26be:	d02c      	beq.n	271a <__udivmoddi4+0x76>
    26c0:	4649      	mov	r1, r9
    26c2:	4650      	mov	r0, sl
    26c4:	f001 fdde 	bl	4284 <__clzdi2>
    26c8:	0029      	movs	r1, r5
    26ca:	0006      	movs	r6, r0
    26cc:	0020      	movs	r0, r4
    26ce:	f001 fdd9 	bl	4284 <__clzdi2>
    26d2:	1a33      	subs	r3, r6, r0
    26d4:	4698      	mov	r8, r3
    26d6:	3b20      	subs	r3, #32
    26d8:	469b      	mov	fp, r3
    26da:	d500      	bpl.n	26de <__udivmoddi4+0x3a>
    26dc:	e074      	b.n	27c8 <__udivmoddi4+0x124>
    26de:	4653      	mov	r3, sl
    26e0:	465a      	mov	r2, fp
    26e2:	4093      	lsls	r3, r2
    26e4:	001f      	movs	r7, r3
    26e6:	4653      	mov	r3, sl
    26e8:	4642      	mov	r2, r8
    26ea:	4093      	lsls	r3, r2
    26ec:	001e      	movs	r6, r3
    26ee:	42af      	cmp	r7, r5
    26f0:	d829      	bhi.n	2746 <__udivmoddi4+0xa2>
    26f2:	d026      	beq.n	2742 <__udivmoddi4+0x9e>
    26f4:	465b      	mov	r3, fp
    26f6:	1ba4      	subs	r4, r4, r6
    26f8:	41bd      	sbcs	r5, r7
    26fa:	2b00      	cmp	r3, #0
    26fc:	da00      	bge.n	2700 <__udivmoddi4+0x5c>
    26fe:	e079      	b.n	27f4 <__udivmoddi4+0x150>
    2700:	2200      	movs	r2, #0
    2702:	2300      	movs	r3, #0
    2704:	9200      	str	r2, [sp, #0]
    2706:	9301      	str	r3, [sp, #4]
    2708:	2301      	movs	r3, #1
    270a:	465a      	mov	r2, fp
    270c:	4093      	lsls	r3, r2
    270e:	9301      	str	r3, [sp, #4]
    2710:	2301      	movs	r3, #1
    2712:	4642      	mov	r2, r8
    2714:	4093      	lsls	r3, r2
    2716:	9300      	str	r3, [sp, #0]
    2718:	e019      	b.n	274e <__udivmoddi4+0xaa>
    271a:	4282      	cmp	r2, r0
    271c:	d9d0      	bls.n	26c0 <__udivmoddi4+0x1c>
    271e:	2200      	movs	r2, #0
    2720:	2300      	movs	r3, #0
    2722:	9200      	str	r2, [sp, #0]
    2724:	9301      	str	r3, [sp, #4]
    2726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2728:	2b00      	cmp	r3, #0
    272a:	d001      	beq.n	2730 <__udivmoddi4+0x8c>
    272c:	601c      	str	r4, [r3, #0]
    272e:	605d      	str	r5, [r3, #4]
    2730:	9800      	ldr	r0, [sp, #0]
    2732:	9901      	ldr	r1, [sp, #4]
    2734:	b003      	add	sp, #12
    2736:	bc3c      	pop	{r2, r3, r4, r5}
    2738:	4690      	mov	r8, r2
    273a:	4699      	mov	r9, r3
    273c:	46a2      	mov	sl, r4
    273e:	46ab      	mov	fp, r5
    2740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2742:	42a3      	cmp	r3, r4
    2744:	d9d6      	bls.n	26f4 <__udivmoddi4+0x50>
    2746:	2200      	movs	r2, #0
    2748:	2300      	movs	r3, #0
    274a:	9200      	str	r2, [sp, #0]
    274c:	9301      	str	r3, [sp, #4]
    274e:	4643      	mov	r3, r8
    2750:	2b00      	cmp	r3, #0
    2752:	d0e8      	beq.n	2726 <__udivmoddi4+0x82>
    2754:	07fb      	lsls	r3, r7, #31
    2756:	0872      	lsrs	r2, r6, #1
    2758:	431a      	orrs	r2, r3
    275a:	4646      	mov	r6, r8
    275c:	087b      	lsrs	r3, r7, #1
    275e:	e00e      	b.n	277e <__udivmoddi4+0xda>
    2760:	42ab      	cmp	r3, r5
    2762:	d101      	bne.n	2768 <__udivmoddi4+0xc4>
    2764:	42a2      	cmp	r2, r4
    2766:	d80c      	bhi.n	2782 <__udivmoddi4+0xde>
    2768:	1aa4      	subs	r4, r4, r2
    276a:	419d      	sbcs	r5, r3
    276c:	2001      	movs	r0, #1
    276e:	1924      	adds	r4, r4, r4
    2770:	416d      	adcs	r5, r5
    2772:	2100      	movs	r1, #0
    2774:	3e01      	subs	r6, #1
    2776:	1824      	adds	r4, r4, r0
    2778:	414d      	adcs	r5, r1
    277a:	2e00      	cmp	r6, #0
    277c:	d006      	beq.n	278c <__udivmoddi4+0xe8>
    277e:	42ab      	cmp	r3, r5
    2780:	d9ee      	bls.n	2760 <__udivmoddi4+0xbc>
    2782:	3e01      	subs	r6, #1
    2784:	1924      	adds	r4, r4, r4
    2786:	416d      	adcs	r5, r5
    2788:	2e00      	cmp	r6, #0
    278a:	d1f8      	bne.n	277e <__udivmoddi4+0xda>
    278c:	465b      	mov	r3, fp
    278e:	9800      	ldr	r0, [sp, #0]
    2790:	9901      	ldr	r1, [sp, #4]
    2792:	1900      	adds	r0, r0, r4
    2794:	4169      	adcs	r1, r5
    2796:	2b00      	cmp	r3, #0
    2798:	db22      	blt.n	27e0 <__udivmoddi4+0x13c>
    279a:	002b      	movs	r3, r5
    279c:	465a      	mov	r2, fp
    279e:	40d3      	lsrs	r3, r2
    27a0:	002a      	movs	r2, r5
    27a2:	4644      	mov	r4, r8
    27a4:	40e2      	lsrs	r2, r4
    27a6:	001c      	movs	r4, r3
    27a8:	465b      	mov	r3, fp
    27aa:	0015      	movs	r5, r2
    27ac:	2b00      	cmp	r3, #0
    27ae:	db2c      	blt.n	280a <__udivmoddi4+0x166>
    27b0:	0026      	movs	r6, r4
    27b2:	409e      	lsls	r6, r3
    27b4:	0033      	movs	r3, r6
    27b6:	0026      	movs	r6, r4
    27b8:	4647      	mov	r7, r8
    27ba:	40be      	lsls	r6, r7
    27bc:	0032      	movs	r2, r6
    27be:	1a80      	subs	r0, r0, r2
    27c0:	4199      	sbcs	r1, r3
    27c2:	9000      	str	r0, [sp, #0]
    27c4:	9101      	str	r1, [sp, #4]
    27c6:	e7ae      	b.n	2726 <__udivmoddi4+0x82>
    27c8:	4642      	mov	r2, r8
    27ca:	2320      	movs	r3, #32
    27cc:	1a9b      	subs	r3, r3, r2
    27ce:	4652      	mov	r2, sl
    27d0:	40da      	lsrs	r2, r3
    27d2:	4641      	mov	r1, r8
    27d4:	0013      	movs	r3, r2
    27d6:	464a      	mov	r2, r9
    27d8:	408a      	lsls	r2, r1
    27da:	0017      	movs	r7, r2
    27dc:	431f      	orrs	r7, r3
    27de:	e782      	b.n	26e6 <__udivmoddi4+0x42>
    27e0:	4642      	mov	r2, r8
    27e2:	2320      	movs	r3, #32
    27e4:	1a9b      	subs	r3, r3, r2
    27e6:	002a      	movs	r2, r5
    27e8:	4646      	mov	r6, r8
    27ea:	409a      	lsls	r2, r3
    27ec:	0023      	movs	r3, r4
    27ee:	40f3      	lsrs	r3, r6
    27f0:	4313      	orrs	r3, r2
    27f2:	e7d5      	b.n	27a0 <__udivmoddi4+0xfc>
    27f4:	4642      	mov	r2, r8
    27f6:	2320      	movs	r3, #32
    27f8:	2100      	movs	r1, #0
    27fa:	1a9b      	subs	r3, r3, r2
    27fc:	2200      	movs	r2, #0
    27fe:	9100      	str	r1, [sp, #0]
    2800:	9201      	str	r2, [sp, #4]
    2802:	2201      	movs	r2, #1
    2804:	40da      	lsrs	r2, r3
    2806:	9201      	str	r2, [sp, #4]
    2808:	e782      	b.n	2710 <__udivmoddi4+0x6c>
    280a:	4642      	mov	r2, r8
    280c:	2320      	movs	r3, #32
    280e:	0026      	movs	r6, r4
    2810:	1a9b      	subs	r3, r3, r2
    2812:	40de      	lsrs	r6, r3
    2814:	002f      	movs	r7, r5
    2816:	46b4      	mov	ip, r6
    2818:	4097      	lsls	r7, r2
    281a:	4666      	mov	r6, ip
    281c:	003b      	movs	r3, r7
    281e:	4333      	orrs	r3, r6
    2820:	e7c9      	b.n	27b6 <__udivmoddi4+0x112>
    2822:	46c0      	nop			; (mov r8, r8)

00002824 <__aeabi_dadd>:
    2824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2826:	4645      	mov	r5, r8
    2828:	46de      	mov	lr, fp
    282a:	4657      	mov	r7, sl
    282c:	464e      	mov	r6, r9
    282e:	030c      	lsls	r4, r1, #12
    2830:	b5e0      	push	{r5, r6, r7, lr}
    2832:	004e      	lsls	r6, r1, #1
    2834:	0fc9      	lsrs	r1, r1, #31
    2836:	4688      	mov	r8, r1
    2838:	000d      	movs	r5, r1
    283a:	0a61      	lsrs	r1, r4, #9
    283c:	0f44      	lsrs	r4, r0, #29
    283e:	430c      	orrs	r4, r1
    2840:	00c7      	lsls	r7, r0, #3
    2842:	0319      	lsls	r1, r3, #12
    2844:	0058      	lsls	r0, r3, #1
    2846:	0fdb      	lsrs	r3, r3, #31
    2848:	469b      	mov	fp, r3
    284a:	0a4b      	lsrs	r3, r1, #9
    284c:	0f51      	lsrs	r1, r2, #29
    284e:	430b      	orrs	r3, r1
    2850:	0d76      	lsrs	r6, r6, #21
    2852:	0d40      	lsrs	r0, r0, #21
    2854:	0019      	movs	r1, r3
    2856:	00d2      	lsls	r2, r2, #3
    2858:	45d8      	cmp	r8, fp
    285a:	d100      	bne.n	285e <__aeabi_dadd+0x3a>
    285c:	e0ae      	b.n	29bc <__aeabi_dadd+0x198>
    285e:	1a35      	subs	r5, r6, r0
    2860:	2d00      	cmp	r5, #0
    2862:	dc00      	bgt.n	2866 <__aeabi_dadd+0x42>
    2864:	e0f6      	b.n	2a54 <__aeabi_dadd+0x230>
    2866:	2800      	cmp	r0, #0
    2868:	d10f      	bne.n	288a <__aeabi_dadd+0x66>
    286a:	4313      	orrs	r3, r2
    286c:	d100      	bne.n	2870 <__aeabi_dadd+0x4c>
    286e:	e0db      	b.n	2a28 <__aeabi_dadd+0x204>
    2870:	1e6b      	subs	r3, r5, #1
    2872:	2b00      	cmp	r3, #0
    2874:	d000      	beq.n	2878 <__aeabi_dadd+0x54>
    2876:	e137      	b.n	2ae8 <__aeabi_dadd+0x2c4>
    2878:	1aba      	subs	r2, r7, r2
    287a:	4297      	cmp	r7, r2
    287c:	41bf      	sbcs	r7, r7
    287e:	1a64      	subs	r4, r4, r1
    2880:	427f      	negs	r7, r7
    2882:	1be4      	subs	r4, r4, r7
    2884:	2601      	movs	r6, #1
    2886:	0017      	movs	r7, r2
    2888:	e024      	b.n	28d4 <__aeabi_dadd+0xb0>
    288a:	4bc6      	ldr	r3, [pc, #792]	; (2ba4 <__aeabi_dadd+0x380>)
    288c:	429e      	cmp	r6, r3
    288e:	d04d      	beq.n	292c <__aeabi_dadd+0x108>
    2890:	2380      	movs	r3, #128	; 0x80
    2892:	041b      	lsls	r3, r3, #16
    2894:	4319      	orrs	r1, r3
    2896:	2d38      	cmp	r5, #56	; 0x38
    2898:	dd00      	ble.n	289c <__aeabi_dadd+0x78>
    289a:	e107      	b.n	2aac <__aeabi_dadd+0x288>
    289c:	2d1f      	cmp	r5, #31
    289e:	dd00      	ble.n	28a2 <__aeabi_dadd+0x7e>
    28a0:	e138      	b.n	2b14 <__aeabi_dadd+0x2f0>
    28a2:	2020      	movs	r0, #32
    28a4:	1b43      	subs	r3, r0, r5
    28a6:	469a      	mov	sl, r3
    28a8:	000b      	movs	r3, r1
    28aa:	4650      	mov	r0, sl
    28ac:	4083      	lsls	r3, r0
    28ae:	4699      	mov	r9, r3
    28b0:	0013      	movs	r3, r2
    28b2:	4648      	mov	r0, r9
    28b4:	40eb      	lsrs	r3, r5
    28b6:	4318      	orrs	r0, r3
    28b8:	0003      	movs	r3, r0
    28ba:	4650      	mov	r0, sl
    28bc:	4082      	lsls	r2, r0
    28be:	1e50      	subs	r0, r2, #1
    28c0:	4182      	sbcs	r2, r0
    28c2:	40e9      	lsrs	r1, r5
    28c4:	431a      	orrs	r2, r3
    28c6:	1aba      	subs	r2, r7, r2
    28c8:	1a61      	subs	r1, r4, r1
    28ca:	4297      	cmp	r7, r2
    28cc:	41a4      	sbcs	r4, r4
    28ce:	0017      	movs	r7, r2
    28d0:	4264      	negs	r4, r4
    28d2:	1b0c      	subs	r4, r1, r4
    28d4:	0223      	lsls	r3, r4, #8
    28d6:	d562      	bpl.n	299e <__aeabi_dadd+0x17a>
    28d8:	0264      	lsls	r4, r4, #9
    28da:	0a65      	lsrs	r5, r4, #9
    28dc:	2d00      	cmp	r5, #0
    28de:	d100      	bne.n	28e2 <__aeabi_dadd+0xbe>
    28e0:	e0df      	b.n	2aa2 <__aeabi_dadd+0x27e>
    28e2:	0028      	movs	r0, r5
    28e4:	f001 fcb0 	bl	4248 <__clzsi2>
    28e8:	0003      	movs	r3, r0
    28ea:	3b08      	subs	r3, #8
    28ec:	2b1f      	cmp	r3, #31
    28ee:	dd00      	ble.n	28f2 <__aeabi_dadd+0xce>
    28f0:	e0d2      	b.n	2a98 <__aeabi_dadd+0x274>
    28f2:	2220      	movs	r2, #32
    28f4:	003c      	movs	r4, r7
    28f6:	1ad2      	subs	r2, r2, r3
    28f8:	409d      	lsls	r5, r3
    28fa:	40d4      	lsrs	r4, r2
    28fc:	409f      	lsls	r7, r3
    28fe:	4325      	orrs	r5, r4
    2900:	429e      	cmp	r6, r3
    2902:	dd00      	ble.n	2906 <__aeabi_dadd+0xe2>
    2904:	e0c4      	b.n	2a90 <__aeabi_dadd+0x26c>
    2906:	1b9e      	subs	r6, r3, r6
    2908:	1c73      	adds	r3, r6, #1
    290a:	2b1f      	cmp	r3, #31
    290c:	dd00      	ble.n	2910 <__aeabi_dadd+0xec>
    290e:	e0f1      	b.n	2af4 <__aeabi_dadd+0x2d0>
    2910:	2220      	movs	r2, #32
    2912:	0038      	movs	r0, r7
    2914:	0029      	movs	r1, r5
    2916:	1ad2      	subs	r2, r2, r3
    2918:	40d8      	lsrs	r0, r3
    291a:	4091      	lsls	r1, r2
    291c:	4097      	lsls	r7, r2
    291e:	002c      	movs	r4, r5
    2920:	4301      	orrs	r1, r0
    2922:	1e78      	subs	r0, r7, #1
    2924:	4187      	sbcs	r7, r0
    2926:	40dc      	lsrs	r4, r3
    2928:	2600      	movs	r6, #0
    292a:	430f      	orrs	r7, r1
    292c:	077b      	lsls	r3, r7, #29
    292e:	d009      	beq.n	2944 <__aeabi_dadd+0x120>
    2930:	230f      	movs	r3, #15
    2932:	403b      	ands	r3, r7
    2934:	2b04      	cmp	r3, #4
    2936:	d005      	beq.n	2944 <__aeabi_dadd+0x120>
    2938:	1d3b      	adds	r3, r7, #4
    293a:	42bb      	cmp	r3, r7
    293c:	41bf      	sbcs	r7, r7
    293e:	427f      	negs	r7, r7
    2940:	19e4      	adds	r4, r4, r7
    2942:	001f      	movs	r7, r3
    2944:	0223      	lsls	r3, r4, #8
    2946:	d52c      	bpl.n	29a2 <__aeabi_dadd+0x17e>
    2948:	4b96      	ldr	r3, [pc, #600]	; (2ba4 <__aeabi_dadd+0x380>)
    294a:	3601      	adds	r6, #1
    294c:	429e      	cmp	r6, r3
    294e:	d100      	bne.n	2952 <__aeabi_dadd+0x12e>
    2950:	e09a      	b.n	2a88 <__aeabi_dadd+0x264>
    2952:	4645      	mov	r5, r8
    2954:	4b94      	ldr	r3, [pc, #592]	; (2ba8 <__aeabi_dadd+0x384>)
    2956:	08ff      	lsrs	r7, r7, #3
    2958:	401c      	ands	r4, r3
    295a:	0760      	lsls	r0, r4, #29
    295c:	0576      	lsls	r6, r6, #21
    295e:	0264      	lsls	r4, r4, #9
    2960:	4307      	orrs	r7, r0
    2962:	0b24      	lsrs	r4, r4, #12
    2964:	0d76      	lsrs	r6, r6, #21
    2966:	2100      	movs	r1, #0
    2968:	0324      	lsls	r4, r4, #12
    296a:	0b23      	lsrs	r3, r4, #12
    296c:	0d0c      	lsrs	r4, r1, #20
    296e:	4a8f      	ldr	r2, [pc, #572]	; (2bac <__aeabi_dadd+0x388>)
    2970:	0524      	lsls	r4, r4, #20
    2972:	431c      	orrs	r4, r3
    2974:	4014      	ands	r4, r2
    2976:	0533      	lsls	r3, r6, #20
    2978:	4323      	orrs	r3, r4
    297a:	005b      	lsls	r3, r3, #1
    297c:	07ed      	lsls	r5, r5, #31
    297e:	085b      	lsrs	r3, r3, #1
    2980:	432b      	orrs	r3, r5
    2982:	0038      	movs	r0, r7
    2984:	0019      	movs	r1, r3
    2986:	bc3c      	pop	{r2, r3, r4, r5}
    2988:	4690      	mov	r8, r2
    298a:	4699      	mov	r9, r3
    298c:	46a2      	mov	sl, r4
    298e:	46ab      	mov	fp, r5
    2990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2992:	4664      	mov	r4, ip
    2994:	4304      	orrs	r4, r0
    2996:	d100      	bne.n	299a <__aeabi_dadd+0x176>
    2998:	e211      	b.n	2dbe <__aeabi_dadd+0x59a>
    299a:	0004      	movs	r4, r0
    299c:	4667      	mov	r7, ip
    299e:	077b      	lsls	r3, r7, #29
    29a0:	d1c6      	bne.n	2930 <__aeabi_dadd+0x10c>
    29a2:	4645      	mov	r5, r8
    29a4:	0760      	lsls	r0, r4, #29
    29a6:	08ff      	lsrs	r7, r7, #3
    29a8:	4307      	orrs	r7, r0
    29aa:	08e4      	lsrs	r4, r4, #3
    29ac:	4b7d      	ldr	r3, [pc, #500]	; (2ba4 <__aeabi_dadd+0x380>)
    29ae:	429e      	cmp	r6, r3
    29b0:	d030      	beq.n	2a14 <__aeabi_dadd+0x1f0>
    29b2:	0324      	lsls	r4, r4, #12
    29b4:	0576      	lsls	r6, r6, #21
    29b6:	0b24      	lsrs	r4, r4, #12
    29b8:	0d76      	lsrs	r6, r6, #21
    29ba:	e7d4      	b.n	2966 <__aeabi_dadd+0x142>
    29bc:	1a33      	subs	r3, r6, r0
    29be:	469a      	mov	sl, r3
    29c0:	2b00      	cmp	r3, #0
    29c2:	dd78      	ble.n	2ab6 <__aeabi_dadd+0x292>
    29c4:	2800      	cmp	r0, #0
    29c6:	d031      	beq.n	2a2c <__aeabi_dadd+0x208>
    29c8:	4876      	ldr	r0, [pc, #472]	; (2ba4 <__aeabi_dadd+0x380>)
    29ca:	4286      	cmp	r6, r0
    29cc:	d0ae      	beq.n	292c <__aeabi_dadd+0x108>
    29ce:	2080      	movs	r0, #128	; 0x80
    29d0:	0400      	lsls	r0, r0, #16
    29d2:	4301      	orrs	r1, r0
    29d4:	4653      	mov	r3, sl
    29d6:	2b38      	cmp	r3, #56	; 0x38
    29d8:	dc00      	bgt.n	29dc <__aeabi_dadd+0x1b8>
    29da:	e0e9      	b.n	2bb0 <__aeabi_dadd+0x38c>
    29dc:	430a      	orrs	r2, r1
    29de:	1e51      	subs	r1, r2, #1
    29e0:	418a      	sbcs	r2, r1
    29e2:	2100      	movs	r1, #0
    29e4:	19d2      	adds	r2, r2, r7
    29e6:	42ba      	cmp	r2, r7
    29e8:	41bf      	sbcs	r7, r7
    29ea:	1909      	adds	r1, r1, r4
    29ec:	427c      	negs	r4, r7
    29ee:	0017      	movs	r7, r2
    29f0:	190c      	adds	r4, r1, r4
    29f2:	0223      	lsls	r3, r4, #8
    29f4:	d5d3      	bpl.n	299e <__aeabi_dadd+0x17a>
    29f6:	4b6b      	ldr	r3, [pc, #428]	; (2ba4 <__aeabi_dadd+0x380>)
    29f8:	3601      	adds	r6, #1
    29fa:	429e      	cmp	r6, r3
    29fc:	d100      	bne.n	2a00 <__aeabi_dadd+0x1dc>
    29fe:	e13a      	b.n	2c76 <__aeabi_dadd+0x452>
    2a00:	2001      	movs	r0, #1
    2a02:	4b69      	ldr	r3, [pc, #420]	; (2ba8 <__aeabi_dadd+0x384>)
    2a04:	401c      	ands	r4, r3
    2a06:	087b      	lsrs	r3, r7, #1
    2a08:	4007      	ands	r7, r0
    2a0a:	431f      	orrs	r7, r3
    2a0c:	07e0      	lsls	r0, r4, #31
    2a0e:	4307      	orrs	r7, r0
    2a10:	0864      	lsrs	r4, r4, #1
    2a12:	e78b      	b.n	292c <__aeabi_dadd+0x108>
    2a14:	0023      	movs	r3, r4
    2a16:	433b      	orrs	r3, r7
    2a18:	d100      	bne.n	2a1c <__aeabi_dadd+0x1f8>
    2a1a:	e1cb      	b.n	2db4 <__aeabi_dadd+0x590>
    2a1c:	2280      	movs	r2, #128	; 0x80
    2a1e:	0312      	lsls	r2, r2, #12
    2a20:	4314      	orrs	r4, r2
    2a22:	0324      	lsls	r4, r4, #12
    2a24:	0b24      	lsrs	r4, r4, #12
    2a26:	e79e      	b.n	2966 <__aeabi_dadd+0x142>
    2a28:	002e      	movs	r6, r5
    2a2a:	e77f      	b.n	292c <__aeabi_dadd+0x108>
    2a2c:	0008      	movs	r0, r1
    2a2e:	4310      	orrs	r0, r2
    2a30:	d100      	bne.n	2a34 <__aeabi_dadd+0x210>
    2a32:	e0b4      	b.n	2b9e <__aeabi_dadd+0x37a>
    2a34:	1e58      	subs	r0, r3, #1
    2a36:	2800      	cmp	r0, #0
    2a38:	d000      	beq.n	2a3c <__aeabi_dadd+0x218>
    2a3a:	e0de      	b.n	2bfa <__aeabi_dadd+0x3d6>
    2a3c:	18ba      	adds	r2, r7, r2
    2a3e:	42ba      	cmp	r2, r7
    2a40:	419b      	sbcs	r3, r3
    2a42:	1864      	adds	r4, r4, r1
    2a44:	425b      	negs	r3, r3
    2a46:	18e4      	adds	r4, r4, r3
    2a48:	0017      	movs	r7, r2
    2a4a:	2601      	movs	r6, #1
    2a4c:	0223      	lsls	r3, r4, #8
    2a4e:	d5a6      	bpl.n	299e <__aeabi_dadd+0x17a>
    2a50:	2602      	movs	r6, #2
    2a52:	e7d5      	b.n	2a00 <__aeabi_dadd+0x1dc>
    2a54:	2d00      	cmp	r5, #0
    2a56:	d16e      	bne.n	2b36 <__aeabi_dadd+0x312>
    2a58:	1c70      	adds	r0, r6, #1
    2a5a:	0540      	lsls	r0, r0, #21
    2a5c:	0d40      	lsrs	r0, r0, #21
    2a5e:	2801      	cmp	r0, #1
    2a60:	dc00      	bgt.n	2a64 <__aeabi_dadd+0x240>
    2a62:	e0f9      	b.n	2c58 <__aeabi_dadd+0x434>
    2a64:	1ab8      	subs	r0, r7, r2
    2a66:	4684      	mov	ip, r0
    2a68:	4287      	cmp	r7, r0
    2a6a:	4180      	sbcs	r0, r0
    2a6c:	1ae5      	subs	r5, r4, r3
    2a6e:	4240      	negs	r0, r0
    2a70:	1a2d      	subs	r5, r5, r0
    2a72:	0228      	lsls	r0, r5, #8
    2a74:	d400      	bmi.n	2a78 <__aeabi_dadd+0x254>
    2a76:	e089      	b.n	2b8c <__aeabi_dadd+0x368>
    2a78:	1bd7      	subs	r7, r2, r7
    2a7a:	42ba      	cmp	r2, r7
    2a7c:	4192      	sbcs	r2, r2
    2a7e:	1b1c      	subs	r4, r3, r4
    2a80:	4252      	negs	r2, r2
    2a82:	1aa5      	subs	r5, r4, r2
    2a84:	46d8      	mov	r8, fp
    2a86:	e729      	b.n	28dc <__aeabi_dadd+0xb8>
    2a88:	4645      	mov	r5, r8
    2a8a:	2400      	movs	r4, #0
    2a8c:	2700      	movs	r7, #0
    2a8e:	e76a      	b.n	2966 <__aeabi_dadd+0x142>
    2a90:	4c45      	ldr	r4, [pc, #276]	; (2ba8 <__aeabi_dadd+0x384>)
    2a92:	1af6      	subs	r6, r6, r3
    2a94:	402c      	ands	r4, r5
    2a96:	e749      	b.n	292c <__aeabi_dadd+0x108>
    2a98:	003d      	movs	r5, r7
    2a9a:	3828      	subs	r0, #40	; 0x28
    2a9c:	4085      	lsls	r5, r0
    2a9e:	2700      	movs	r7, #0
    2aa0:	e72e      	b.n	2900 <__aeabi_dadd+0xdc>
    2aa2:	0038      	movs	r0, r7
    2aa4:	f001 fbd0 	bl	4248 <__clzsi2>
    2aa8:	3020      	adds	r0, #32
    2aaa:	e71d      	b.n	28e8 <__aeabi_dadd+0xc4>
    2aac:	430a      	orrs	r2, r1
    2aae:	1e51      	subs	r1, r2, #1
    2ab0:	418a      	sbcs	r2, r1
    2ab2:	2100      	movs	r1, #0
    2ab4:	e707      	b.n	28c6 <__aeabi_dadd+0xa2>
    2ab6:	2b00      	cmp	r3, #0
    2ab8:	d000      	beq.n	2abc <__aeabi_dadd+0x298>
    2aba:	e0f3      	b.n	2ca4 <__aeabi_dadd+0x480>
    2abc:	1c70      	adds	r0, r6, #1
    2abe:	0543      	lsls	r3, r0, #21
    2ac0:	0d5b      	lsrs	r3, r3, #21
    2ac2:	2b01      	cmp	r3, #1
    2ac4:	dc00      	bgt.n	2ac8 <__aeabi_dadd+0x2a4>
    2ac6:	e0ad      	b.n	2c24 <__aeabi_dadd+0x400>
    2ac8:	4b36      	ldr	r3, [pc, #216]	; (2ba4 <__aeabi_dadd+0x380>)
    2aca:	4298      	cmp	r0, r3
    2acc:	d100      	bne.n	2ad0 <__aeabi_dadd+0x2ac>
    2ace:	e0d1      	b.n	2c74 <__aeabi_dadd+0x450>
    2ad0:	18ba      	adds	r2, r7, r2
    2ad2:	42ba      	cmp	r2, r7
    2ad4:	41bf      	sbcs	r7, r7
    2ad6:	1864      	adds	r4, r4, r1
    2ad8:	427f      	negs	r7, r7
    2ada:	19e4      	adds	r4, r4, r7
    2adc:	07e7      	lsls	r7, r4, #31
    2ade:	0852      	lsrs	r2, r2, #1
    2ae0:	4317      	orrs	r7, r2
    2ae2:	0864      	lsrs	r4, r4, #1
    2ae4:	0006      	movs	r6, r0
    2ae6:	e721      	b.n	292c <__aeabi_dadd+0x108>
    2ae8:	482e      	ldr	r0, [pc, #184]	; (2ba4 <__aeabi_dadd+0x380>)
    2aea:	4285      	cmp	r5, r0
    2aec:	d100      	bne.n	2af0 <__aeabi_dadd+0x2cc>
    2aee:	e093      	b.n	2c18 <__aeabi_dadd+0x3f4>
    2af0:	001d      	movs	r5, r3
    2af2:	e6d0      	b.n	2896 <__aeabi_dadd+0x72>
    2af4:	0029      	movs	r1, r5
    2af6:	3e1f      	subs	r6, #31
    2af8:	40f1      	lsrs	r1, r6
    2afa:	2b20      	cmp	r3, #32
    2afc:	d100      	bne.n	2b00 <__aeabi_dadd+0x2dc>
    2afe:	e08d      	b.n	2c1c <__aeabi_dadd+0x3f8>
    2b00:	2240      	movs	r2, #64	; 0x40
    2b02:	1ad3      	subs	r3, r2, r3
    2b04:	409d      	lsls	r5, r3
    2b06:	432f      	orrs	r7, r5
    2b08:	1e7d      	subs	r5, r7, #1
    2b0a:	41af      	sbcs	r7, r5
    2b0c:	2400      	movs	r4, #0
    2b0e:	430f      	orrs	r7, r1
    2b10:	2600      	movs	r6, #0
    2b12:	e744      	b.n	299e <__aeabi_dadd+0x17a>
    2b14:	002b      	movs	r3, r5
    2b16:	0008      	movs	r0, r1
    2b18:	3b20      	subs	r3, #32
    2b1a:	40d8      	lsrs	r0, r3
    2b1c:	0003      	movs	r3, r0
    2b1e:	2d20      	cmp	r5, #32
    2b20:	d100      	bne.n	2b24 <__aeabi_dadd+0x300>
    2b22:	e07d      	b.n	2c20 <__aeabi_dadd+0x3fc>
    2b24:	2040      	movs	r0, #64	; 0x40
    2b26:	1b45      	subs	r5, r0, r5
    2b28:	40a9      	lsls	r1, r5
    2b2a:	430a      	orrs	r2, r1
    2b2c:	1e51      	subs	r1, r2, #1
    2b2e:	418a      	sbcs	r2, r1
    2b30:	2100      	movs	r1, #0
    2b32:	431a      	orrs	r2, r3
    2b34:	e6c7      	b.n	28c6 <__aeabi_dadd+0xa2>
    2b36:	2e00      	cmp	r6, #0
    2b38:	d050      	beq.n	2bdc <__aeabi_dadd+0x3b8>
    2b3a:	4e1a      	ldr	r6, [pc, #104]	; (2ba4 <__aeabi_dadd+0x380>)
    2b3c:	42b0      	cmp	r0, r6
    2b3e:	d057      	beq.n	2bf0 <__aeabi_dadd+0x3cc>
    2b40:	2680      	movs	r6, #128	; 0x80
    2b42:	426b      	negs	r3, r5
    2b44:	4699      	mov	r9, r3
    2b46:	0436      	lsls	r6, r6, #16
    2b48:	4334      	orrs	r4, r6
    2b4a:	464b      	mov	r3, r9
    2b4c:	2b38      	cmp	r3, #56	; 0x38
    2b4e:	dd00      	ble.n	2b52 <__aeabi_dadd+0x32e>
    2b50:	e0d6      	b.n	2d00 <__aeabi_dadd+0x4dc>
    2b52:	2b1f      	cmp	r3, #31
    2b54:	dd00      	ble.n	2b58 <__aeabi_dadd+0x334>
    2b56:	e135      	b.n	2dc4 <__aeabi_dadd+0x5a0>
    2b58:	2620      	movs	r6, #32
    2b5a:	1af5      	subs	r5, r6, r3
    2b5c:	0026      	movs	r6, r4
    2b5e:	40ae      	lsls	r6, r5
    2b60:	46b2      	mov	sl, r6
    2b62:	003e      	movs	r6, r7
    2b64:	40de      	lsrs	r6, r3
    2b66:	46ac      	mov	ip, r5
    2b68:	0035      	movs	r5, r6
    2b6a:	4656      	mov	r6, sl
    2b6c:	432e      	orrs	r6, r5
    2b6e:	4665      	mov	r5, ip
    2b70:	40af      	lsls	r7, r5
    2b72:	1e7d      	subs	r5, r7, #1
    2b74:	41af      	sbcs	r7, r5
    2b76:	40dc      	lsrs	r4, r3
    2b78:	4337      	orrs	r7, r6
    2b7a:	1bd7      	subs	r7, r2, r7
    2b7c:	42ba      	cmp	r2, r7
    2b7e:	4192      	sbcs	r2, r2
    2b80:	1b0c      	subs	r4, r1, r4
    2b82:	4252      	negs	r2, r2
    2b84:	1aa4      	subs	r4, r4, r2
    2b86:	0006      	movs	r6, r0
    2b88:	46d8      	mov	r8, fp
    2b8a:	e6a3      	b.n	28d4 <__aeabi_dadd+0xb0>
    2b8c:	4664      	mov	r4, ip
    2b8e:	4667      	mov	r7, ip
    2b90:	432c      	orrs	r4, r5
    2b92:	d000      	beq.n	2b96 <__aeabi_dadd+0x372>
    2b94:	e6a2      	b.n	28dc <__aeabi_dadd+0xb8>
    2b96:	2500      	movs	r5, #0
    2b98:	2600      	movs	r6, #0
    2b9a:	2700      	movs	r7, #0
    2b9c:	e706      	b.n	29ac <__aeabi_dadd+0x188>
    2b9e:	001e      	movs	r6, r3
    2ba0:	e6c4      	b.n	292c <__aeabi_dadd+0x108>
    2ba2:	46c0      	nop			; (mov r8, r8)
    2ba4:	000007ff 	.word	0x000007ff
    2ba8:	ff7fffff 	.word	0xff7fffff
    2bac:	800fffff 	.word	0x800fffff
    2bb0:	2b1f      	cmp	r3, #31
    2bb2:	dc63      	bgt.n	2c7c <__aeabi_dadd+0x458>
    2bb4:	2020      	movs	r0, #32
    2bb6:	1ac3      	subs	r3, r0, r3
    2bb8:	0008      	movs	r0, r1
    2bba:	4098      	lsls	r0, r3
    2bbc:	469c      	mov	ip, r3
    2bbe:	4683      	mov	fp, r0
    2bc0:	4653      	mov	r3, sl
    2bc2:	0010      	movs	r0, r2
    2bc4:	40d8      	lsrs	r0, r3
    2bc6:	0003      	movs	r3, r0
    2bc8:	4658      	mov	r0, fp
    2bca:	4318      	orrs	r0, r3
    2bcc:	4663      	mov	r3, ip
    2bce:	409a      	lsls	r2, r3
    2bd0:	1e53      	subs	r3, r2, #1
    2bd2:	419a      	sbcs	r2, r3
    2bd4:	4653      	mov	r3, sl
    2bd6:	4302      	orrs	r2, r0
    2bd8:	40d9      	lsrs	r1, r3
    2bda:	e703      	b.n	29e4 <__aeabi_dadd+0x1c0>
    2bdc:	0026      	movs	r6, r4
    2bde:	433e      	orrs	r6, r7
    2be0:	d006      	beq.n	2bf0 <__aeabi_dadd+0x3cc>
    2be2:	43eb      	mvns	r3, r5
    2be4:	4699      	mov	r9, r3
    2be6:	2b00      	cmp	r3, #0
    2be8:	d0c7      	beq.n	2b7a <__aeabi_dadd+0x356>
    2bea:	4e94      	ldr	r6, [pc, #592]	; (2e3c <__aeabi_dadd+0x618>)
    2bec:	42b0      	cmp	r0, r6
    2bee:	d1ac      	bne.n	2b4a <__aeabi_dadd+0x326>
    2bf0:	000c      	movs	r4, r1
    2bf2:	0017      	movs	r7, r2
    2bf4:	0006      	movs	r6, r0
    2bf6:	46d8      	mov	r8, fp
    2bf8:	e698      	b.n	292c <__aeabi_dadd+0x108>
    2bfa:	4b90      	ldr	r3, [pc, #576]	; (2e3c <__aeabi_dadd+0x618>)
    2bfc:	459a      	cmp	sl, r3
    2bfe:	d00b      	beq.n	2c18 <__aeabi_dadd+0x3f4>
    2c00:	4682      	mov	sl, r0
    2c02:	e6e7      	b.n	29d4 <__aeabi_dadd+0x1b0>
    2c04:	2800      	cmp	r0, #0
    2c06:	d000      	beq.n	2c0a <__aeabi_dadd+0x3e6>
    2c08:	e09e      	b.n	2d48 <__aeabi_dadd+0x524>
    2c0a:	0018      	movs	r0, r3
    2c0c:	4310      	orrs	r0, r2
    2c0e:	d100      	bne.n	2c12 <__aeabi_dadd+0x3ee>
    2c10:	e0e9      	b.n	2de6 <__aeabi_dadd+0x5c2>
    2c12:	001c      	movs	r4, r3
    2c14:	0017      	movs	r7, r2
    2c16:	46d8      	mov	r8, fp
    2c18:	4e88      	ldr	r6, [pc, #544]	; (2e3c <__aeabi_dadd+0x618>)
    2c1a:	e687      	b.n	292c <__aeabi_dadd+0x108>
    2c1c:	2500      	movs	r5, #0
    2c1e:	e772      	b.n	2b06 <__aeabi_dadd+0x2e2>
    2c20:	2100      	movs	r1, #0
    2c22:	e782      	b.n	2b2a <__aeabi_dadd+0x306>
    2c24:	0023      	movs	r3, r4
    2c26:	433b      	orrs	r3, r7
    2c28:	2e00      	cmp	r6, #0
    2c2a:	d000      	beq.n	2c2e <__aeabi_dadd+0x40a>
    2c2c:	e0ab      	b.n	2d86 <__aeabi_dadd+0x562>
    2c2e:	2b00      	cmp	r3, #0
    2c30:	d100      	bne.n	2c34 <__aeabi_dadd+0x410>
    2c32:	e0e7      	b.n	2e04 <__aeabi_dadd+0x5e0>
    2c34:	000b      	movs	r3, r1
    2c36:	4313      	orrs	r3, r2
    2c38:	d100      	bne.n	2c3c <__aeabi_dadd+0x418>
    2c3a:	e677      	b.n	292c <__aeabi_dadd+0x108>
    2c3c:	18ba      	adds	r2, r7, r2
    2c3e:	42ba      	cmp	r2, r7
    2c40:	41bf      	sbcs	r7, r7
    2c42:	1864      	adds	r4, r4, r1
    2c44:	427f      	negs	r7, r7
    2c46:	19e4      	adds	r4, r4, r7
    2c48:	0223      	lsls	r3, r4, #8
    2c4a:	d400      	bmi.n	2c4e <__aeabi_dadd+0x42a>
    2c4c:	e0f2      	b.n	2e34 <__aeabi_dadd+0x610>
    2c4e:	4b7c      	ldr	r3, [pc, #496]	; (2e40 <__aeabi_dadd+0x61c>)
    2c50:	0017      	movs	r7, r2
    2c52:	401c      	ands	r4, r3
    2c54:	0006      	movs	r6, r0
    2c56:	e669      	b.n	292c <__aeabi_dadd+0x108>
    2c58:	0020      	movs	r0, r4
    2c5a:	4338      	orrs	r0, r7
    2c5c:	2e00      	cmp	r6, #0
    2c5e:	d1d1      	bne.n	2c04 <__aeabi_dadd+0x3e0>
    2c60:	2800      	cmp	r0, #0
    2c62:	d15b      	bne.n	2d1c <__aeabi_dadd+0x4f8>
    2c64:	001c      	movs	r4, r3
    2c66:	4314      	orrs	r4, r2
    2c68:	d100      	bne.n	2c6c <__aeabi_dadd+0x448>
    2c6a:	e0a8      	b.n	2dbe <__aeabi_dadd+0x59a>
    2c6c:	001c      	movs	r4, r3
    2c6e:	0017      	movs	r7, r2
    2c70:	46d8      	mov	r8, fp
    2c72:	e65b      	b.n	292c <__aeabi_dadd+0x108>
    2c74:	0006      	movs	r6, r0
    2c76:	2400      	movs	r4, #0
    2c78:	2700      	movs	r7, #0
    2c7a:	e697      	b.n	29ac <__aeabi_dadd+0x188>
    2c7c:	4650      	mov	r0, sl
    2c7e:	000b      	movs	r3, r1
    2c80:	3820      	subs	r0, #32
    2c82:	40c3      	lsrs	r3, r0
    2c84:	4699      	mov	r9, r3
    2c86:	4653      	mov	r3, sl
    2c88:	2b20      	cmp	r3, #32
    2c8a:	d100      	bne.n	2c8e <__aeabi_dadd+0x46a>
    2c8c:	e095      	b.n	2dba <__aeabi_dadd+0x596>
    2c8e:	2340      	movs	r3, #64	; 0x40
    2c90:	4650      	mov	r0, sl
    2c92:	1a1b      	subs	r3, r3, r0
    2c94:	4099      	lsls	r1, r3
    2c96:	430a      	orrs	r2, r1
    2c98:	1e51      	subs	r1, r2, #1
    2c9a:	418a      	sbcs	r2, r1
    2c9c:	464b      	mov	r3, r9
    2c9e:	2100      	movs	r1, #0
    2ca0:	431a      	orrs	r2, r3
    2ca2:	e69f      	b.n	29e4 <__aeabi_dadd+0x1c0>
    2ca4:	2e00      	cmp	r6, #0
    2ca6:	d130      	bne.n	2d0a <__aeabi_dadd+0x4e6>
    2ca8:	0026      	movs	r6, r4
    2caa:	433e      	orrs	r6, r7
    2cac:	d067      	beq.n	2d7e <__aeabi_dadd+0x55a>
    2cae:	43db      	mvns	r3, r3
    2cb0:	469a      	mov	sl, r3
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	d01c      	beq.n	2cf0 <__aeabi_dadd+0x4cc>
    2cb6:	4e61      	ldr	r6, [pc, #388]	; (2e3c <__aeabi_dadd+0x618>)
    2cb8:	42b0      	cmp	r0, r6
    2cba:	d060      	beq.n	2d7e <__aeabi_dadd+0x55a>
    2cbc:	4653      	mov	r3, sl
    2cbe:	2b38      	cmp	r3, #56	; 0x38
    2cc0:	dd00      	ble.n	2cc4 <__aeabi_dadd+0x4a0>
    2cc2:	e096      	b.n	2df2 <__aeabi_dadd+0x5ce>
    2cc4:	2b1f      	cmp	r3, #31
    2cc6:	dd00      	ble.n	2cca <__aeabi_dadd+0x4a6>
    2cc8:	e09f      	b.n	2e0a <__aeabi_dadd+0x5e6>
    2cca:	2620      	movs	r6, #32
    2ccc:	1af3      	subs	r3, r6, r3
    2cce:	0026      	movs	r6, r4
    2cd0:	409e      	lsls	r6, r3
    2cd2:	469c      	mov	ip, r3
    2cd4:	46b3      	mov	fp, r6
    2cd6:	4653      	mov	r3, sl
    2cd8:	003e      	movs	r6, r7
    2cda:	40de      	lsrs	r6, r3
    2cdc:	0033      	movs	r3, r6
    2cde:	465e      	mov	r6, fp
    2ce0:	431e      	orrs	r6, r3
    2ce2:	4663      	mov	r3, ip
    2ce4:	409f      	lsls	r7, r3
    2ce6:	1e7b      	subs	r3, r7, #1
    2ce8:	419f      	sbcs	r7, r3
    2cea:	4653      	mov	r3, sl
    2cec:	40dc      	lsrs	r4, r3
    2cee:	4337      	orrs	r7, r6
    2cf0:	18bf      	adds	r7, r7, r2
    2cf2:	4297      	cmp	r7, r2
    2cf4:	4192      	sbcs	r2, r2
    2cf6:	1864      	adds	r4, r4, r1
    2cf8:	4252      	negs	r2, r2
    2cfa:	18a4      	adds	r4, r4, r2
    2cfc:	0006      	movs	r6, r0
    2cfe:	e678      	b.n	29f2 <__aeabi_dadd+0x1ce>
    2d00:	4327      	orrs	r7, r4
    2d02:	1e7c      	subs	r4, r7, #1
    2d04:	41a7      	sbcs	r7, r4
    2d06:	2400      	movs	r4, #0
    2d08:	e737      	b.n	2b7a <__aeabi_dadd+0x356>
    2d0a:	4e4c      	ldr	r6, [pc, #304]	; (2e3c <__aeabi_dadd+0x618>)
    2d0c:	42b0      	cmp	r0, r6
    2d0e:	d036      	beq.n	2d7e <__aeabi_dadd+0x55a>
    2d10:	2680      	movs	r6, #128	; 0x80
    2d12:	425b      	negs	r3, r3
    2d14:	0436      	lsls	r6, r6, #16
    2d16:	469a      	mov	sl, r3
    2d18:	4334      	orrs	r4, r6
    2d1a:	e7cf      	b.n	2cbc <__aeabi_dadd+0x498>
    2d1c:	0018      	movs	r0, r3
    2d1e:	4310      	orrs	r0, r2
    2d20:	d100      	bne.n	2d24 <__aeabi_dadd+0x500>
    2d22:	e603      	b.n	292c <__aeabi_dadd+0x108>
    2d24:	1ab8      	subs	r0, r7, r2
    2d26:	4684      	mov	ip, r0
    2d28:	4567      	cmp	r7, ip
    2d2a:	41ad      	sbcs	r5, r5
    2d2c:	1ae0      	subs	r0, r4, r3
    2d2e:	426d      	negs	r5, r5
    2d30:	1b40      	subs	r0, r0, r5
    2d32:	0205      	lsls	r5, r0, #8
    2d34:	d400      	bmi.n	2d38 <__aeabi_dadd+0x514>
    2d36:	e62c      	b.n	2992 <__aeabi_dadd+0x16e>
    2d38:	1bd7      	subs	r7, r2, r7
    2d3a:	42ba      	cmp	r2, r7
    2d3c:	4192      	sbcs	r2, r2
    2d3e:	1b1c      	subs	r4, r3, r4
    2d40:	4252      	negs	r2, r2
    2d42:	1aa4      	subs	r4, r4, r2
    2d44:	46d8      	mov	r8, fp
    2d46:	e5f1      	b.n	292c <__aeabi_dadd+0x108>
    2d48:	0018      	movs	r0, r3
    2d4a:	4310      	orrs	r0, r2
    2d4c:	d100      	bne.n	2d50 <__aeabi_dadd+0x52c>
    2d4e:	e763      	b.n	2c18 <__aeabi_dadd+0x3f4>
    2d50:	08f8      	lsrs	r0, r7, #3
    2d52:	0767      	lsls	r7, r4, #29
    2d54:	4307      	orrs	r7, r0
    2d56:	2080      	movs	r0, #128	; 0x80
    2d58:	08e4      	lsrs	r4, r4, #3
    2d5a:	0300      	lsls	r0, r0, #12
    2d5c:	4204      	tst	r4, r0
    2d5e:	d008      	beq.n	2d72 <__aeabi_dadd+0x54e>
    2d60:	08dd      	lsrs	r5, r3, #3
    2d62:	4205      	tst	r5, r0
    2d64:	d105      	bne.n	2d72 <__aeabi_dadd+0x54e>
    2d66:	08d2      	lsrs	r2, r2, #3
    2d68:	0759      	lsls	r1, r3, #29
    2d6a:	4311      	orrs	r1, r2
    2d6c:	000f      	movs	r7, r1
    2d6e:	002c      	movs	r4, r5
    2d70:	46d8      	mov	r8, fp
    2d72:	0f7b      	lsrs	r3, r7, #29
    2d74:	00e4      	lsls	r4, r4, #3
    2d76:	431c      	orrs	r4, r3
    2d78:	00ff      	lsls	r7, r7, #3
    2d7a:	4e30      	ldr	r6, [pc, #192]	; (2e3c <__aeabi_dadd+0x618>)
    2d7c:	e5d6      	b.n	292c <__aeabi_dadd+0x108>
    2d7e:	000c      	movs	r4, r1
    2d80:	0017      	movs	r7, r2
    2d82:	0006      	movs	r6, r0
    2d84:	e5d2      	b.n	292c <__aeabi_dadd+0x108>
    2d86:	2b00      	cmp	r3, #0
    2d88:	d038      	beq.n	2dfc <__aeabi_dadd+0x5d8>
    2d8a:	000b      	movs	r3, r1
    2d8c:	4313      	orrs	r3, r2
    2d8e:	d100      	bne.n	2d92 <__aeabi_dadd+0x56e>
    2d90:	e742      	b.n	2c18 <__aeabi_dadd+0x3f4>
    2d92:	08f8      	lsrs	r0, r7, #3
    2d94:	0767      	lsls	r7, r4, #29
    2d96:	4307      	orrs	r7, r0
    2d98:	2080      	movs	r0, #128	; 0x80
    2d9a:	08e4      	lsrs	r4, r4, #3
    2d9c:	0300      	lsls	r0, r0, #12
    2d9e:	4204      	tst	r4, r0
    2da0:	d0e7      	beq.n	2d72 <__aeabi_dadd+0x54e>
    2da2:	08cb      	lsrs	r3, r1, #3
    2da4:	4203      	tst	r3, r0
    2da6:	d1e4      	bne.n	2d72 <__aeabi_dadd+0x54e>
    2da8:	08d2      	lsrs	r2, r2, #3
    2daa:	0749      	lsls	r1, r1, #29
    2dac:	4311      	orrs	r1, r2
    2dae:	000f      	movs	r7, r1
    2db0:	001c      	movs	r4, r3
    2db2:	e7de      	b.n	2d72 <__aeabi_dadd+0x54e>
    2db4:	2700      	movs	r7, #0
    2db6:	2400      	movs	r4, #0
    2db8:	e5d5      	b.n	2966 <__aeabi_dadd+0x142>
    2dba:	2100      	movs	r1, #0
    2dbc:	e76b      	b.n	2c96 <__aeabi_dadd+0x472>
    2dbe:	2500      	movs	r5, #0
    2dc0:	2700      	movs	r7, #0
    2dc2:	e5f3      	b.n	29ac <__aeabi_dadd+0x188>
    2dc4:	464e      	mov	r6, r9
    2dc6:	0025      	movs	r5, r4
    2dc8:	3e20      	subs	r6, #32
    2dca:	40f5      	lsrs	r5, r6
    2dcc:	464b      	mov	r3, r9
    2dce:	002e      	movs	r6, r5
    2dd0:	2b20      	cmp	r3, #32
    2dd2:	d02d      	beq.n	2e30 <__aeabi_dadd+0x60c>
    2dd4:	2540      	movs	r5, #64	; 0x40
    2dd6:	1aed      	subs	r5, r5, r3
    2dd8:	40ac      	lsls	r4, r5
    2dda:	4327      	orrs	r7, r4
    2ddc:	1e7c      	subs	r4, r7, #1
    2dde:	41a7      	sbcs	r7, r4
    2de0:	2400      	movs	r4, #0
    2de2:	4337      	orrs	r7, r6
    2de4:	e6c9      	b.n	2b7a <__aeabi_dadd+0x356>
    2de6:	2480      	movs	r4, #128	; 0x80
    2de8:	2500      	movs	r5, #0
    2dea:	0324      	lsls	r4, r4, #12
    2dec:	4e13      	ldr	r6, [pc, #76]	; (2e3c <__aeabi_dadd+0x618>)
    2dee:	2700      	movs	r7, #0
    2df0:	e5dc      	b.n	29ac <__aeabi_dadd+0x188>
    2df2:	4327      	orrs	r7, r4
    2df4:	1e7c      	subs	r4, r7, #1
    2df6:	41a7      	sbcs	r7, r4
    2df8:	2400      	movs	r4, #0
    2dfa:	e779      	b.n	2cf0 <__aeabi_dadd+0x4cc>
    2dfc:	000c      	movs	r4, r1
    2dfe:	0017      	movs	r7, r2
    2e00:	4e0e      	ldr	r6, [pc, #56]	; (2e3c <__aeabi_dadd+0x618>)
    2e02:	e593      	b.n	292c <__aeabi_dadd+0x108>
    2e04:	000c      	movs	r4, r1
    2e06:	0017      	movs	r7, r2
    2e08:	e590      	b.n	292c <__aeabi_dadd+0x108>
    2e0a:	4656      	mov	r6, sl
    2e0c:	0023      	movs	r3, r4
    2e0e:	3e20      	subs	r6, #32
    2e10:	40f3      	lsrs	r3, r6
    2e12:	4699      	mov	r9, r3
    2e14:	4653      	mov	r3, sl
    2e16:	2b20      	cmp	r3, #32
    2e18:	d00e      	beq.n	2e38 <__aeabi_dadd+0x614>
    2e1a:	2340      	movs	r3, #64	; 0x40
    2e1c:	4656      	mov	r6, sl
    2e1e:	1b9b      	subs	r3, r3, r6
    2e20:	409c      	lsls	r4, r3
    2e22:	4327      	orrs	r7, r4
    2e24:	1e7c      	subs	r4, r7, #1
    2e26:	41a7      	sbcs	r7, r4
    2e28:	464b      	mov	r3, r9
    2e2a:	2400      	movs	r4, #0
    2e2c:	431f      	orrs	r7, r3
    2e2e:	e75f      	b.n	2cf0 <__aeabi_dadd+0x4cc>
    2e30:	2400      	movs	r4, #0
    2e32:	e7d2      	b.n	2dda <__aeabi_dadd+0x5b6>
    2e34:	0017      	movs	r7, r2
    2e36:	e5b2      	b.n	299e <__aeabi_dadd+0x17a>
    2e38:	2400      	movs	r4, #0
    2e3a:	e7f2      	b.n	2e22 <__aeabi_dadd+0x5fe>
    2e3c:	000007ff 	.word	0x000007ff
    2e40:	ff7fffff 	.word	0xff7fffff

00002e44 <__aeabi_ddiv>:
    2e44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e46:	4657      	mov	r7, sl
    2e48:	4645      	mov	r5, r8
    2e4a:	46de      	mov	lr, fp
    2e4c:	464e      	mov	r6, r9
    2e4e:	b5e0      	push	{r5, r6, r7, lr}
    2e50:	004c      	lsls	r4, r1, #1
    2e52:	030e      	lsls	r6, r1, #12
    2e54:	b087      	sub	sp, #28
    2e56:	4683      	mov	fp, r0
    2e58:	4692      	mov	sl, r2
    2e5a:	001d      	movs	r5, r3
    2e5c:	4680      	mov	r8, r0
    2e5e:	0b36      	lsrs	r6, r6, #12
    2e60:	0d64      	lsrs	r4, r4, #21
    2e62:	0fcf      	lsrs	r7, r1, #31
    2e64:	2c00      	cmp	r4, #0
    2e66:	d04f      	beq.n	2f08 <__aeabi_ddiv+0xc4>
    2e68:	4b6f      	ldr	r3, [pc, #444]	; (3028 <__aeabi_ddiv+0x1e4>)
    2e6a:	429c      	cmp	r4, r3
    2e6c:	d035      	beq.n	2eda <__aeabi_ddiv+0x96>
    2e6e:	2380      	movs	r3, #128	; 0x80
    2e70:	0f42      	lsrs	r2, r0, #29
    2e72:	041b      	lsls	r3, r3, #16
    2e74:	00f6      	lsls	r6, r6, #3
    2e76:	4313      	orrs	r3, r2
    2e78:	4333      	orrs	r3, r6
    2e7a:	4699      	mov	r9, r3
    2e7c:	00c3      	lsls	r3, r0, #3
    2e7e:	4698      	mov	r8, r3
    2e80:	4b6a      	ldr	r3, [pc, #424]	; (302c <__aeabi_ddiv+0x1e8>)
    2e82:	2600      	movs	r6, #0
    2e84:	469c      	mov	ip, r3
    2e86:	2300      	movs	r3, #0
    2e88:	4464      	add	r4, ip
    2e8a:	9303      	str	r3, [sp, #12]
    2e8c:	032b      	lsls	r3, r5, #12
    2e8e:	0b1b      	lsrs	r3, r3, #12
    2e90:	469b      	mov	fp, r3
    2e92:	006b      	lsls	r3, r5, #1
    2e94:	0fed      	lsrs	r5, r5, #31
    2e96:	4650      	mov	r0, sl
    2e98:	0d5b      	lsrs	r3, r3, #21
    2e9a:	9501      	str	r5, [sp, #4]
    2e9c:	d05e      	beq.n	2f5c <__aeabi_ddiv+0x118>
    2e9e:	4a62      	ldr	r2, [pc, #392]	; (3028 <__aeabi_ddiv+0x1e4>)
    2ea0:	4293      	cmp	r3, r2
    2ea2:	d053      	beq.n	2f4c <__aeabi_ddiv+0x108>
    2ea4:	465a      	mov	r2, fp
    2ea6:	00d1      	lsls	r1, r2, #3
    2ea8:	2280      	movs	r2, #128	; 0x80
    2eaa:	0f40      	lsrs	r0, r0, #29
    2eac:	0412      	lsls	r2, r2, #16
    2eae:	4302      	orrs	r2, r0
    2eb0:	430a      	orrs	r2, r1
    2eb2:	4693      	mov	fp, r2
    2eb4:	4652      	mov	r2, sl
    2eb6:	00d1      	lsls	r1, r2, #3
    2eb8:	4a5c      	ldr	r2, [pc, #368]	; (302c <__aeabi_ddiv+0x1e8>)
    2eba:	4694      	mov	ip, r2
    2ebc:	2200      	movs	r2, #0
    2ebe:	4463      	add	r3, ip
    2ec0:	0038      	movs	r0, r7
    2ec2:	4068      	eors	r0, r5
    2ec4:	4684      	mov	ip, r0
    2ec6:	9002      	str	r0, [sp, #8]
    2ec8:	1ae4      	subs	r4, r4, r3
    2eca:	4316      	orrs	r6, r2
    2ecc:	2e0f      	cmp	r6, #15
    2ece:	d900      	bls.n	2ed2 <__aeabi_ddiv+0x8e>
    2ed0:	e0b4      	b.n	303c <__aeabi_ddiv+0x1f8>
    2ed2:	4b57      	ldr	r3, [pc, #348]	; (3030 <__aeabi_ddiv+0x1ec>)
    2ed4:	00b6      	lsls	r6, r6, #2
    2ed6:	599b      	ldr	r3, [r3, r6]
    2ed8:	469f      	mov	pc, r3
    2eda:	0003      	movs	r3, r0
    2edc:	4333      	orrs	r3, r6
    2ede:	4699      	mov	r9, r3
    2ee0:	d16c      	bne.n	2fbc <__aeabi_ddiv+0x178>
    2ee2:	2300      	movs	r3, #0
    2ee4:	4698      	mov	r8, r3
    2ee6:	3302      	adds	r3, #2
    2ee8:	2608      	movs	r6, #8
    2eea:	9303      	str	r3, [sp, #12]
    2eec:	e7ce      	b.n	2e8c <__aeabi_ddiv+0x48>
    2eee:	46cb      	mov	fp, r9
    2ef0:	4641      	mov	r1, r8
    2ef2:	9a03      	ldr	r2, [sp, #12]
    2ef4:	9701      	str	r7, [sp, #4]
    2ef6:	2a02      	cmp	r2, #2
    2ef8:	d165      	bne.n	2fc6 <__aeabi_ddiv+0x182>
    2efa:	9b01      	ldr	r3, [sp, #4]
    2efc:	4c4a      	ldr	r4, [pc, #296]	; (3028 <__aeabi_ddiv+0x1e4>)
    2efe:	469c      	mov	ip, r3
    2f00:	2300      	movs	r3, #0
    2f02:	2200      	movs	r2, #0
    2f04:	4698      	mov	r8, r3
    2f06:	e06b      	b.n	2fe0 <__aeabi_ddiv+0x19c>
    2f08:	0003      	movs	r3, r0
    2f0a:	4333      	orrs	r3, r6
    2f0c:	4699      	mov	r9, r3
    2f0e:	d04e      	beq.n	2fae <__aeabi_ddiv+0x16a>
    2f10:	2e00      	cmp	r6, #0
    2f12:	d100      	bne.n	2f16 <__aeabi_ddiv+0xd2>
    2f14:	e1bc      	b.n	3290 <__aeabi_ddiv+0x44c>
    2f16:	0030      	movs	r0, r6
    2f18:	f001 f996 	bl	4248 <__clzsi2>
    2f1c:	0003      	movs	r3, r0
    2f1e:	3b0b      	subs	r3, #11
    2f20:	2b1c      	cmp	r3, #28
    2f22:	dd00      	ble.n	2f26 <__aeabi_ddiv+0xe2>
    2f24:	e1ac      	b.n	3280 <__aeabi_ddiv+0x43c>
    2f26:	221d      	movs	r2, #29
    2f28:	1ad3      	subs	r3, r2, r3
    2f2a:	465a      	mov	r2, fp
    2f2c:	0001      	movs	r1, r0
    2f2e:	40da      	lsrs	r2, r3
    2f30:	3908      	subs	r1, #8
    2f32:	408e      	lsls	r6, r1
    2f34:	0013      	movs	r3, r2
    2f36:	4333      	orrs	r3, r6
    2f38:	4699      	mov	r9, r3
    2f3a:	465b      	mov	r3, fp
    2f3c:	408b      	lsls	r3, r1
    2f3e:	4698      	mov	r8, r3
    2f40:	2300      	movs	r3, #0
    2f42:	4c3c      	ldr	r4, [pc, #240]	; (3034 <__aeabi_ddiv+0x1f0>)
    2f44:	2600      	movs	r6, #0
    2f46:	1a24      	subs	r4, r4, r0
    2f48:	9303      	str	r3, [sp, #12]
    2f4a:	e79f      	b.n	2e8c <__aeabi_ddiv+0x48>
    2f4c:	4651      	mov	r1, sl
    2f4e:	465a      	mov	r2, fp
    2f50:	4311      	orrs	r1, r2
    2f52:	d129      	bne.n	2fa8 <__aeabi_ddiv+0x164>
    2f54:	2200      	movs	r2, #0
    2f56:	4693      	mov	fp, r2
    2f58:	3202      	adds	r2, #2
    2f5a:	e7b1      	b.n	2ec0 <__aeabi_ddiv+0x7c>
    2f5c:	4659      	mov	r1, fp
    2f5e:	4301      	orrs	r1, r0
    2f60:	d01e      	beq.n	2fa0 <__aeabi_ddiv+0x15c>
    2f62:	465b      	mov	r3, fp
    2f64:	2b00      	cmp	r3, #0
    2f66:	d100      	bne.n	2f6a <__aeabi_ddiv+0x126>
    2f68:	e19e      	b.n	32a8 <__aeabi_ddiv+0x464>
    2f6a:	4658      	mov	r0, fp
    2f6c:	f001 f96c 	bl	4248 <__clzsi2>
    2f70:	0003      	movs	r3, r0
    2f72:	3b0b      	subs	r3, #11
    2f74:	2b1c      	cmp	r3, #28
    2f76:	dd00      	ble.n	2f7a <__aeabi_ddiv+0x136>
    2f78:	e18f      	b.n	329a <__aeabi_ddiv+0x456>
    2f7a:	0002      	movs	r2, r0
    2f7c:	4659      	mov	r1, fp
    2f7e:	3a08      	subs	r2, #8
    2f80:	4091      	lsls	r1, r2
    2f82:	468b      	mov	fp, r1
    2f84:	211d      	movs	r1, #29
    2f86:	1acb      	subs	r3, r1, r3
    2f88:	4651      	mov	r1, sl
    2f8a:	40d9      	lsrs	r1, r3
    2f8c:	000b      	movs	r3, r1
    2f8e:	4659      	mov	r1, fp
    2f90:	430b      	orrs	r3, r1
    2f92:	4651      	mov	r1, sl
    2f94:	469b      	mov	fp, r3
    2f96:	4091      	lsls	r1, r2
    2f98:	4b26      	ldr	r3, [pc, #152]	; (3034 <__aeabi_ddiv+0x1f0>)
    2f9a:	2200      	movs	r2, #0
    2f9c:	1a1b      	subs	r3, r3, r0
    2f9e:	e78f      	b.n	2ec0 <__aeabi_ddiv+0x7c>
    2fa0:	2300      	movs	r3, #0
    2fa2:	2201      	movs	r2, #1
    2fa4:	469b      	mov	fp, r3
    2fa6:	e78b      	b.n	2ec0 <__aeabi_ddiv+0x7c>
    2fa8:	4651      	mov	r1, sl
    2faa:	2203      	movs	r2, #3
    2fac:	e788      	b.n	2ec0 <__aeabi_ddiv+0x7c>
    2fae:	2300      	movs	r3, #0
    2fb0:	4698      	mov	r8, r3
    2fb2:	3301      	adds	r3, #1
    2fb4:	2604      	movs	r6, #4
    2fb6:	2400      	movs	r4, #0
    2fb8:	9303      	str	r3, [sp, #12]
    2fba:	e767      	b.n	2e8c <__aeabi_ddiv+0x48>
    2fbc:	2303      	movs	r3, #3
    2fbe:	46b1      	mov	r9, r6
    2fc0:	9303      	str	r3, [sp, #12]
    2fc2:	260c      	movs	r6, #12
    2fc4:	e762      	b.n	2e8c <__aeabi_ddiv+0x48>
    2fc6:	2a03      	cmp	r2, #3
    2fc8:	d100      	bne.n	2fcc <__aeabi_ddiv+0x188>
    2fca:	e25c      	b.n	3486 <__aeabi_ddiv+0x642>
    2fcc:	9b01      	ldr	r3, [sp, #4]
    2fce:	2a01      	cmp	r2, #1
    2fd0:	d000      	beq.n	2fd4 <__aeabi_ddiv+0x190>
    2fd2:	e1e4      	b.n	339e <__aeabi_ddiv+0x55a>
    2fd4:	4013      	ands	r3, r2
    2fd6:	469c      	mov	ip, r3
    2fd8:	2300      	movs	r3, #0
    2fda:	2400      	movs	r4, #0
    2fdc:	2200      	movs	r2, #0
    2fde:	4698      	mov	r8, r3
    2fe0:	2100      	movs	r1, #0
    2fe2:	0312      	lsls	r2, r2, #12
    2fe4:	0b13      	lsrs	r3, r2, #12
    2fe6:	0d0a      	lsrs	r2, r1, #20
    2fe8:	0512      	lsls	r2, r2, #20
    2fea:	431a      	orrs	r2, r3
    2fec:	0523      	lsls	r3, r4, #20
    2fee:	4c12      	ldr	r4, [pc, #72]	; (3038 <__aeabi_ddiv+0x1f4>)
    2ff0:	4640      	mov	r0, r8
    2ff2:	4022      	ands	r2, r4
    2ff4:	4313      	orrs	r3, r2
    2ff6:	4662      	mov	r2, ip
    2ff8:	005b      	lsls	r3, r3, #1
    2ffa:	07d2      	lsls	r2, r2, #31
    2ffc:	085b      	lsrs	r3, r3, #1
    2ffe:	4313      	orrs	r3, r2
    3000:	0019      	movs	r1, r3
    3002:	b007      	add	sp, #28
    3004:	bc3c      	pop	{r2, r3, r4, r5}
    3006:	4690      	mov	r8, r2
    3008:	4699      	mov	r9, r3
    300a:	46a2      	mov	sl, r4
    300c:	46ab      	mov	fp, r5
    300e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3010:	2300      	movs	r3, #0
    3012:	2280      	movs	r2, #128	; 0x80
    3014:	469c      	mov	ip, r3
    3016:	0312      	lsls	r2, r2, #12
    3018:	4698      	mov	r8, r3
    301a:	4c03      	ldr	r4, [pc, #12]	; (3028 <__aeabi_ddiv+0x1e4>)
    301c:	e7e0      	b.n	2fe0 <__aeabi_ddiv+0x19c>
    301e:	2300      	movs	r3, #0
    3020:	4c01      	ldr	r4, [pc, #4]	; (3028 <__aeabi_ddiv+0x1e4>)
    3022:	2200      	movs	r2, #0
    3024:	4698      	mov	r8, r3
    3026:	e7db      	b.n	2fe0 <__aeabi_ddiv+0x19c>
    3028:	000007ff 	.word	0x000007ff
    302c:	fffffc01 	.word	0xfffffc01
    3030:	00004d24 	.word	0x00004d24
    3034:	fffffc0d 	.word	0xfffffc0d
    3038:	800fffff 	.word	0x800fffff
    303c:	45d9      	cmp	r9, fp
    303e:	d900      	bls.n	3042 <__aeabi_ddiv+0x1fe>
    3040:	e139      	b.n	32b6 <__aeabi_ddiv+0x472>
    3042:	d100      	bne.n	3046 <__aeabi_ddiv+0x202>
    3044:	e134      	b.n	32b0 <__aeabi_ddiv+0x46c>
    3046:	2300      	movs	r3, #0
    3048:	4646      	mov	r6, r8
    304a:	464d      	mov	r5, r9
    304c:	469a      	mov	sl, r3
    304e:	3c01      	subs	r4, #1
    3050:	465b      	mov	r3, fp
    3052:	0e0a      	lsrs	r2, r1, #24
    3054:	021b      	lsls	r3, r3, #8
    3056:	431a      	orrs	r2, r3
    3058:	020b      	lsls	r3, r1, #8
    305a:	0c17      	lsrs	r7, r2, #16
    305c:	9303      	str	r3, [sp, #12]
    305e:	0413      	lsls	r3, r2, #16
    3060:	0c1b      	lsrs	r3, r3, #16
    3062:	0039      	movs	r1, r7
    3064:	0028      	movs	r0, r5
    3066:	4690      	mov	r8, r2
    3068:	9301      	str	r3, [sp, #4]
    306a:	f7ff fa45 	bl	24f8 <__udivsi3>
    306e:	0002      	movs	r2, r0
    3070:	9b01      	ldr	r3, [sp, #4]
    3072:	4683      	mov	fp, r0
    3074:	435a      	muls	r2, r3
    3076:	0028      	movs	r0, r5
    3078:	0039      	movs	r1, r7
    307a:	4691      	mov	r9, r2
    307c:	f7ff fac2 	bl	2604 <__aeabi_uidivmod>
    3080:	0c35      	lsrs	r5, r6, #16
    3082:	0409      	lsls	r1, r1, #16
    3084:	430d      	orrs	r5, r1
    3086:	45a9      	cmp	r9, r5
    3088:	d90d      	bls.n	30a6 <__aeabi_ddiv+0x262>
    308a:	465b      	mov	r3, fp
    308c:	4445      	add	r5, r8
    308e:	3b01      	subs	r3, #1
    3090:	45a8      	cmp	r8, r5
    3092:	d900      	bls.n	3096 <__aeabi_ddiv+0x252>
    3094:	e13a      	b.n	330c <__aeabi_ddiv+0x4c8>
    3096:	45a9      	cmp	r9, r5
    3098:	d800      	bhi.n	309c <__aeabi_ddiv+0x258>
    309a:	e137      	b.n	330c <__aeabi_ddiv+0x4c8>
    309c:	2302      	movs	r3, #2
    309e:	425b      	negs	r3, r3
    30a0:	469c      	mov	ip, r3
    30a2:	4445      	add	r5, r8
    30a4:	44e3      	add	fp, ip
    30a6:	464b      	mov	r3, r9
    30a8:	1aeb      	subs	r3, r5, r3
    30aa:	0039      	movs	r1, r7
    30ac:	0018      	movs	r0, r3
    30ae:	9304      	str	r3, [sp, #16]
    30b0:	f7ff fa22 	bl	24f8 <__udivsi3>
    30b4:	9b01      	ldr	r3, [sp, #4]
    30b6:	0005      	movs	r5, r0
    30b8:	4343      	muls	r3, r0
    30ba:	0039      	movs	r1, r7
    30bc:	9804      	ldr	r0, [sp, #16]
    30be:	4699      	mov	r9, r3
    30c0:	f7ff faa0 	bl	2604 <__aeabi_uidivmod>
    30c4:	0433      	lsls	r3, r6, #16
    30c6:	0409      	lsls	r1, r1, #16
    30c8:	0c1b      	lsrs	r3, r3, #16
    30ca:	430b      	orrs	r3, r1
    30cc:	4599      	cmp	r9, r3
    30ce:	d909      	bls.n	30e4 <__aeabi_ddiv+0x2a0>
    30d0:	4443      	add	r3, r8
    30d2:	1e6a      	subs	r2, r5, #1
    30d4:	4598      	cmp	r8, r3
    30d6:	d900      	bls.n	30da <__aeabi_ddiv+0x296>
    30d8:	e11a      	b.n	3310 <__aeabi_ddiv+0x4cc>
    30da:	4599      	cmp	r9, r3
    30dc:	d800      	bhi.n	30e0 <__aeabi_ddiv+0x29c>
    30de:	e117      	b.n	3310 <__aeabi_ddiv+0x4cc>
    30e0:	3d02      	subs	r5, #2
    30e2:	4443      	add	r3, r8
    30e4:	464a      	mov	r2, r9
    30e6:	1a9b      	subs	r3, r3, r2
    30e8:	465a      	mov	r2, fp
    30ea:	0412      	lsls	r2, r2, #16
    30ec:	432a      	orrs	r2, r5
    30ee:	9903      	ldr	r1, [sp, #12]
    30f0:	4693      	mov	fp, r2
    30f2:	0c10      	lsrs	r0, r2, #16
    30f4:	0c0a      	lsrs	r2, r1, #16
    30f6:	4691      	mov	r9, r2
    30f8:	0409      	lsls	r1, r1, #16
    30fa:	465a      	mov	r2, fp
    30fc:	0c09      	lsrs	r1, r1, #16
    30fe:	464e      	mov	r6, r9
    3100:	000d      	movs	r5, r1
    3102:	0412      	lsls	r2, r2, #16
    3104:	0c12      	lsrs	r2, r2, #16
    3106:	4345      	muls	r5, r0
    3108:	9105      	str	r1, [sp, #20]
    310a:	4351      	muls	r1, r2
    310c:	4372      	muls	r2, r6
    310e:	4370      	muls	r0, r6
    3110:	1952      	adds	r2, r2, r5
    3112:	0c0e      	lsrs	r6, r1, #16
    3114:	18b2      	adds	r2, r6, r2
    3116:	4295      	cmp	r5, r2
    3118:	d903      	bls.n	3122 <__aeabi_ddiv+0x2de>
    311a:	2580      	movs	r5, #128	; 0x80
    311c:	026d      	lsls	r5, r5, #9
    311e:	46ac      	mov	ip, r5
    3120:	4460      	add	r0, ip
    3122:	0c15      	lsrs	r5, r2, #16
    3124:	0409      	lsls	r1, r1, #16
    3126:	0412      	lsls	r2, r2, #16
    3128:	0c09      	lsrs	r1, r1, #16
    312a:	1828      	adds	r0, r5, r0
    312c:	1852      	adds	r2, r2, r1
    312e:	4283      	cmp	r3, r0
    3130:	d200      	bcs.n	3134 <__aeabi_ddiv+0x2f0>
    3132:	e0ce      	b.n	32d2 <__aeabi_ddiv+0x48e>
    3134:	d100      	bne.n	3138 <__aeabi_ddiv+0x2f4>
    3136:	e0c8      	b.n	32ca <__aeabi_ddiv+0x486>
    3138:	1a1d      	subs	r5, r3, r0
    313a:	4653      	mov	r3, sl
    313c:	1a9e      	subs	r6, r3, r2
    313e:	45b2      	cmp	sl, r6
    3140:	4192      	sbcs	r2, r2
    3142:	4252      	negs	r2, r2
    3144:	1aab      	subs	r3, r5, r2
    3146:	469a      	mov	sl, r3
    3148:	4598      	cmp	r8, r3
    314a:	d100      	bne.n	314e <__aeabi_ddiv+0x30a>
    314c:	e117      	b.n	337e <__aeabi_ddiv+0x53a>
    314e:	0039      	movs	r1, r7
    3150:	0018      	movs	r0, r3
    3152:	f7ff f9d1 	bl	24f8 <__udivsi3>
    3156:	9b01      	ldr	r3, [sp, #4]
    3158:	0005      	movs	r5, r0
    315a:	4343      	muls	r3, r0
    315c:	0039      	movs	r1, r7
    315e:	4650      	mov	r0, sl
    3160:	9304      	str	r3, [sp, #16]
    3162:	f7ff fa4f 	bl	2604 <__aeabi_uidivmod>
    3166:	9804      	ldr	r0, [sp, #16]
    3168:	040b      	lsls	r3, r1, #16
    316a:	0c31      	lsrs	r1, r6, #16
    316c:	4319      	orrs	r1, r3
    316e:	4288      	cmp	r0, r1
    3170:	d909      	bls.n	3186 <__aeabi_ddiv+0x342>
    3172:	4441      	add	r1, r8
    3174:	1e6b      	subs	r3, r5, #1
    3176:	4588      	cmp	r8, r1
    3178:	d900      	bls.n	317c <__aeabi_ddiv+0x338>
    317a:	e107      	b.n	338c <__aeabi_ddiv+0x548>
    317c:	4288      	cmp	r0, r1
    317e:	d800      	bhi.n	3182 <__aeabi_ddiv+0x33e>
    3180:	e104      	b.n	338c <__aeabi_ddiv+0x548>
    3182:	3d02      	subs	r5, #2
    3184:	4441      	add	r1, r8
    3186:	9b04      	ldr	r3, [sp, #16]
    3188:	1acb      	subs	r3, r1, r3
    318a:	0018      	movs	r0, r3
    318c:	0039      	movs	r1, r7
    318e:	9304      	str	r3, [sp, #16]
    3190:	f7ff f9b2 	bl	24f8 <__udivsi3>
    3194:	9b01      	ldr	r3, [sp, #4]
    3196:	4682      	mov	sl, r0
    3198:	4343      	muls	r3, r0
    319a:	0039      	movs	r1, r7
    319c:	9804      	ldr	r0, [sp, #16]
    319e:	9301      	str	r3, [sp, #4]
    31a0:	f7ff fa30 	bl	2604 <__aeabi_uidivmod>
    31a4:	9801      	ldr	r0, [sp, #4]
    31a6:	040b      	lsls	r3, r1, #16
    31a8:	0431      	lsls	r1, r6, #16
    31aa:	0c09      	lsrs	r1, r1, #16
    31ac:	4319      	orrs	r1, r3
    31ae:	4288      	cmp	r0, r1
    31b0:	d90d      	bls.n	31ce <__aeabi_ddiv+0x38a>
    31b2:	4653      	mov	r3, sl
    31b4:	4441      	add	r1, r8
    31b6:	3b01      	subs	r3, #1
    31b8:	4588      	cmp	r8, r1
    31ba:	d900      	bls.n	31be <__aeabi_ddiv+0x37a>
    31bc:	e0e8      	b.n	3390 <__aeabi_ddiv+0x54c>
    31be:	4288      	cmp	r0, r1
    31c0:	d800      	bhi.n	31c4 <__aeabi_ddiv+0x380>
    31c2:	e0e5      	b.n	3390 <__aeabi_ddiv+0x54c>
    31c4:	2302      	movs	r3, #2
    31c6:	425b      	negs	r3, r3
    31c8:	469c      	mov	ip, r3
    31ca:	4441      	add	r1, r8
    31cc:	44e2      	add	sl, ip
    31ce:	9b01      	ldr	r3, [sp, #4]
    31d0:	042d      	lsls	r5, r5, #16
    31d2:	1ace      	subs	r6, r1, r3
    31d4:	4651      	mov	r1, sl
    31d6:	4329      	orrs	r1, r5
    31d8:	9d05      	ldr	r5, [sp, #20]
    31da:	464f      	mov	r7, r9
    31dc:	002a      	movs	r2, r5
    31de:	040b      	lsls	r3, r1, #16
    31e0:	0c08      	lsrs	r0, r1, #16
    31e2:	0c1b      	lsrs	r3, r3, #16
    31e4:	435a      	muls	r2, r3
    31e6:	4345      	muls	r5, r0
    31e8:	437b      	muls	r3, r7
    31ea:	4378      	muls	r0, r7
    31ec:	195b      	adds	r3, r3, r5
    31ee:	0c17      	lsrs	r7, r2, #16
    31f0:	18fb      	adds	r3, r7, r3
    31f2:	429d      	cmp	r5, r3
    31f4:	d903      	bls.n	31fe <__aeabi_ddiv+0x3ba>
    31f6:	2580      	movs	r5, #128	; 0x80
    31f8:	026d      	lsls	r5, r5, #9
    31fa:	46ac      	mov	ip, r5
    31fc:	4460      	add	r0, ip
    31fe:	0c1d      	lsrs	r5, r3, #16
    3200:	0412      	lsls	r2, r2, #16
    3202:	041b      	lsls	r3, r3, #16
    3204:	0c12      	lsrs	r2, r2, #16
    3206:	1828      	adds	r0, r5, r0
    3208:	189b      	adds	r3, r3, r2
    320a:	4286      	cmp	r6, r0
    320c:	d200      	bcs.n	3210 <__aeabi_ddiv+0x3cc>
    320e:	e093      	b.n	3338 <__aeabi_ddiv+0x4f4>
    3210:	d100      	bne.n	3214 <__aeabi_ddiv+0x3d0>
    3212:	e08e      	b.n	3332 <__aeabi_ddiv+0x4ee>
    3214:	2301      	movs	r3, #1
    3216:	4319      	orrs	r1, r3
    3218:	4ba0      	ldr	r3, [pc, #640]	; (349c <__aeabi_ddiv+0x658>)
    321a:	18e3      	adds	r3, r4, r3
    321c:	2b00      	cmp	r3, #0
    321e:	dc00      	bgt.n	3222 <__aeabi_ddiv+0x3de>
    3220:	e099      	b.n	3356 <__aeabi_ddiv+0x512>
    3222:	074a      	lsls	r2, r1, #29
    3224:	d000      	beq.n	3228 <__aeabi_ddiv+0x3e4>
    3226:	e09e      	b.n	3366 <__aeabi_ddiv+0x522>
    3228:	465a      	mov	r2, fp
    322a:	01d2      	lsls	r2, r2, #7
    322c:	d506      	bpl.n	323c <__aeabi_ddiv+0x3f8>
    322e:	465a      	mov	r2, fp
    3230:	4b9b      	ldr	r3, [pc, #620]	; (34a0 <__aeabi_ddiv+0x65c>)
    3232:	401a      	ands	r2, r3
    3234:	2380      	movs	r3, #128	; 0x80
    3236:	4693      	mov	fp, r2
    3238:	00db      	lsls	r3, r3, #3
    323a:	18e3      	adds	r3, r4, r3
    323c:	4a99      	ldr	r2, [pc, #612]	; (34a4 <__aeabi_ddiv+0x660>)
    323e:	4293      	cmp	r3, r2
    3240:	dd68      	ble.n	3314 <__aeabi_ddiv+0x4d0>
    3242:	2301      	movs	r3, #1
    3244:	9a02      	ldr	r2, [sp, #8]
    3246:	4c98      	ldr	r4, [pc, #608]	; (34a8 <__aeabi_ddiv+0x664>)
    3248:	401a      	ands	r2, r3
    324a:	2300      	movs	r3, #0
    324c:	4694      	mov	ip, r2
    324e:	4698      	mov	r8, r3
    3250:	2200      	movs	r2, #0
    3252:	e6c5      	b.n	2fe0 <__aeabi_ddiv+0x19c>
    3254:	2280      	movs	r2, #128	; 0x80
    3256:	464b      	mov	r3, r9
    3258:	0312      	lsls	r2, r2, #12
    325a:	4213      	tst	r3, r2
    325c:	d00a      	beq.n	3274 <__aeabi_ddiv+0x430>
    325e:	465b      	mov	r3, fp
    3260:	4213      	tst	r3, r2
    3262:	d106      	bne.n	3272 <__aeabi_ddiv+0x42e>
    3264:	431a      	orrs	r2, r3
    3266:	0312      	lsls	r2, r2, #12
    3268:	0b12      	lsrs	r2, r2, #12
    326a:	46ac      	mov	ip, r5
    326c:	4688      	mov	r8, r1
    326e:	4c8e      	ldr	r4, [pc, #568]	; (34a8 <__aeabi_ddiv+0x664>)
    3270:	e6b6      	b.n	2fe0 <__aeabi_ddiv+0x19c>
    3272:	464b      	mov	r3, r9
    3274:	431a      	orrs	r2, r3
    3276:	0312      	lsls	r2, r2, #12
    3278:	0b12      	lsrs	r2, r2, #12
    327a:	46bc      	mov	ip, r7
    327c:	4c8a      	ldr	r4, [pc, #552]	; (34a8 <__aeabi_ddiv+0x664>)
    327e:	e6af      	b.n	2fe0 <__aeabi_ddiv+0x19c>
    3280:	0003      	movs	r3, r0
    3282:	465a      	mov	r2, fp
    3284:	3b28      	subs	r3, #40	; 0x28
    3286:	409a      	lsls	r2, r3
    3288:	2300      	movs	r3, #0
    328a:	4691      	mov	r9, r2
    328c:	4698      	mov	r8, r3
    328e:	e657      	b.n	2f40 <__aeabi_ddiv+0xfc>
    3290:	4658      	mov	r0, fp
    3292:	f000 ffd9 	bl	4248 <__clzsi2>
    3296:	3020      	adds	r0, #32
    3298:	e640      	b.n	2f1c <__aeabi_ddiv+0xd8>
    329a:	0003      	movs	r3, r0
    329c:	4652      	mov	r2, sl
    329e:	3b28      	subs	r3, #40	; 0x28
    32a0:	409a      	lsls	r2, r3
    32a2:	2100      	movs	r1, #0
    32a4:	4693      	mov	fp, r2
    32a6:	e677      	b.n	2f98 <__aeabi_ddiv+0x154>
    32a8:	f000 ffce 	bl	4248 <__clzsi2>
    32ac:	3020      	adds	r0, #32
    32ae:	e65f      	b.n	2f70 <__aeabi_ddiv+0x12c>
    32b0:	4588      	cmp	r8, r1
    32b2:	d200      	bcs.n	32b6 <__aeabi_ddiv+0x472>
    32b4:	e6c7      	b.n	3046 <__aeabi_ddiv+0x202>
    32b6:	464b      	mov	r3, r9
    32b8:	07de      	lsls	r6, r3, #31
    32ba:	085d      	lsrs	r5, r3, #1
    32bc:	4643      	mov	r3, r8
    32be:	085b      	lsrs	r3, r3, #1
    32c0:	431e      	orrs	r6, r3
    32c2:	4643      	mov	r3, r8
    32c4:	07db      	lsls	r3, r3, #31
    32c6:	469a      	mov	sl, r3
    32c8:	e6c2      	b.n	3050 <__aeabi_ddiv+0x20c>
    32ca:	2500      	movs	r5, #0
    32cc:	4592      	cmp	sl, r2
    32ce:	d300      	bcc.n	32d2 <__aeabi_ddiv+0x48e>
    32d0:	e733      	b.n	313a <__aeabi_ddiv+0x2f6>
    32d2:	9e03      	ldr	r6, [sp, #12]
    32d4:	4659      	mov	r1, fp
    32d6:	46b4      	mov	ip, r6
    32d8:	44e2      	add	sl, ip
    32da:	45b2      	cmp	sl, r6
    32dc:	41ad      	sbcs	r5, r5
    32de:	426d      	negs	r5, r5
    32e0:	4445      	add	r5, r8
    32e2:	18eb      	adds	r3, r5, r3
    32e4:	3901      	subs	r1, #1
    32e6:	4598      	cmp	r8, r3
    32e8:	d207      	bcs.n	32fa <__aeabi_ddiv+0x4b6>
    32ea:	4298      	cmp	r0, r3
    32ec:	d900      	bls.n	32f0 <__aeabi_ddiv+0x4ac>
    32ee:	e07f      	b.n	33f0 <__aeabi_ddiv+0x5ac>
    32f0:	d100      	bne.n	32f4 <__aeabi_ddiv+0x4b0>
    32f2:	e0bc      	b.n	346e <__aeabi_ddiv+0x62a>
    32f4:	1a1d      	subs	r5, r3, r0
    32f6:	468b      	mov	fp, r1
    32f8:	e71f      	b.n	313a <__aeabi_ddiv+0x2f6>
    32fa:	4598      	cmp	r8, r3
    32fc:	d1fa      	bne.n	32f4 <__aeabi_ddiv+0x4b0>
    32fe:	9d03      	ldr	r5, [sp, #12]
    3300:	4555      	cmp	r5, sl
    3302:	d9f2      	bls.n	32ea <__aeabi_ddiv+0x4a6>
    3304:	4643      	mov	r3, r8
    3306:	468b      	mov	fp, r1
    3308:	1a1d      	subs	r5, r3, r0
    330a:	e716      	b.n	313a <__aeabi_ddiv+0x2f6>
    330c:	469b      	mov	fp, r3
    330e:	e6ca      	b.n	30a6 <__aeabi_ddiv+0x262>
    3310:	0015      	movs	r5, r2
    3312:	e6e7      	b.n	30e4 <__aeabi_ddiv+0x2a0>
    3314:	465a      	mov	r2, fp
    3316:	08c9      	lsrs	r1, r1, #3
    3318:	0752      	lsls	r2, r2, #29
    331a:	430a      	orrs	r2, r1
    331c:	055b      	lsls	r3, r3, #21
    331e:	4690      	mov	r8, r2
    3320:	0d5c      	lsrs	r4, r3, #21
    3322:	465a      	mov	r2, fp
    3324:	2301      	movs	r3, #1
    3326:	9902      	ldr	r1, [sp, #8]
    3328:	0252      	lsls	r2, r2, #9
    332a:	4019      	ands	r1, r3
    332c:	0b12      	lsrs	r2, r2, #12
    332e:	468c      	mov	ip, r1
    3330:	e656      	b.n	2fe0 <__aeabi_ddiv+0x19c>
    3332:	2b00      	cmp	r3, #0
    3334:	d100      	bne.n	3338 <__aeabi_ddiv+0x4f4>
    3336:	e76f      	b.n	3218 <__aeabi_ddiv+0x3d4>
    3338:	4446      	add	r6, r8
    333a:	1e4a      	subs	r2, r1, #1
    333c:	45b0      	cmp	r8, r6
    333e:	d929      	bls.n	3394 <__aeabi_ddiv+0x550>
    3340:	0011      	movs	r1, r2
    3342:	4286      	cmp	r6, r0
    3344:	d000      	beq.n	3348 <__aeabi_ddiv+0x504>
    3346:	e765      	b.n	3214 <__aeabi_ddiv+0x3d0>
    3348:	9a03      	ldr	r2, [sp, #12]
    334a:	4293      	cmp	r3, r2
    334c:	d000      	beq.n	3350 <__aeabi_ddiv+0x50c>
    334e:	e761      	b.n	3214 <__aeabi_ddiv+0x3d0>
    3350:	e762      	b.n	3218 <__aeabi_ddiv+0x3d4>
    3352:	2101      	movs	r1, #1
    3354:	4249      	negs	r1, r1
    3356:	2001      	movs	r0, #1
    3358:	1ac2      	subs	r2, r0, r3
    335a:	2a38      	cmp	r2, #56	; 0x38
    335c:	dd21      	ble.n	33a2 <__aeabi_ddiv+0x55e>
    335e:	9b02      	ldr	r3, [sp, #8]
    3360:	4003      	ands	r3, r0
    3362:	469c      	mov	ip, r3
    3364:	e638      	b.n	2fd8 <__aeabi_ddiv+0x194>
    3366:	220f      	movs	r2, #15
    3368:	400a      	ands	r2, r1
    336a:	2a04      	cmp	r2, #4
    336c:	d100      	bne.n	3370 <__aeabi_ddiv+0x52c>
    336e:	e75b      	b.n	3228 <__aeabi_ddiv+0x3e4>
    3370:	000a      	movs	r2, r1
    3372:	1d11      	adds	r1, r2, #4
    3374:	4291      	cmp	r1, r2
    3376:	4192      	sbcs	r2, r2
    3378:	4252      	negs	r2, r2
    337a:	4493      	add	fp, r2
    337c:	e754      	b.n	3228 <__aeabi_ddiv+0x3e4>
    337e:	4b47      	ldr	r3, [pc, #284]	; (349c <__aeabi_ddiv+0x658>)
    3380:	18e3      	adds	r3, r4, r3
    3382:	2b00      	cmp	r3, #0
    3384:	dde5      	ble.n	3352 <__aeabi_ddiv+0x50e>
    3386:	2201      	movs	r2, #1
    3388:	4252      	negs	r2, r2
    338a:	e7f2      	b.n	3372 <__aeabi_ddiv+0x52e>
    338c:	001d      	movs	r5, r3
    338e:	e6fa      	b.n	3186 <__aeabi_ddiv+0x342>
    3390:	469a      	mov	sl, r3
    3392:	e71c      	b.n	31ce <__aeabi_ddiv+0x38a>
    3394:	42b0      	cmp	r0, r6
    3396:	d839      	bhi.n	340c <__aeabi_ddiv+0x5c8>
    3398:	d06e      	beq.n	3478 <__aeabi_ddiv+0x634>
    339a:	0011      	movs	r1, r2
    339c:	e73a      	b.n	3214 <__aeabi_ddiv+0x3d0>
    339e:	9302      	str	r3, [sp, #8]
    33a0:	e73a      	b.n	3218 <__aeabi_ddiv+0x3d4>
    33a2:	2a1f      	cmp	r2, #31
    33a4:	dc3c      	bgt.n	3420 <__aeabi_ddiv+0x5dc>
    33a6:	2320      	movs	r3, #32
    33a8:	1a9b      	subs	r3, r3, r2
    33aa:	000c      	movs	r4, r1
    33ac:	4658      	mov	r0, fp
    33ae:	4099      	lsls	r1, r3
    33b0:	4098      	lsls	r0, r3
    33b2:	1e4b      	subs	r3, r1, #1
    33b4:	4199      	sbcs	r1, r3
    33b6:	465b      	mov	r3, fp
    33b8:	40d4      	lsrs	r4, r2
    33ba:	40d3      	lsrs	r3, r2
    33bc:	4320      	orrs	r0, r4
    33be:	4308      	orrs	r0, r1
    33c0:	001a      	movs	r2, r3
    33c2:	0743      	lsls	r3, r0, #29
    33c4:	d009      	beq.n	33da <__aeabi_ddiv+0x596>
    33c6:	230f      	movs	r3, #15
    33c8:	4003      	ands	r3, r0
    33ca:	2b04      	cmp	r3, #4
    33cc:	d005      	beq.n	33da <__aeabi_ddiv+0x596>
    33ce:	0001      	movs	r1, r0
    33d0:	1d08      	adds	r0, r1, #4
    33d2:	4288      	cmp	r0, r1
    33d4:	419b      	sbcs	r3, r3
    33d6:	425b      	negs	r3, r3
    33d8:	18d2      	adds	r2, r2, r3
    33da:	0213      	lsls	r3, r2, #8
    33dc:	d53a      	bpl.n	3454 <__aeabi_ddiv+0x610>
    33de:	2301      	movs	r3, #1
    33e0:	9a02      	ldr	r2, [sp, #8]
    33e2:	2401      	movs	r4, #1
    33e4:	401a      	ands	r2, r3
    33e6:	2300      	movs	r3, #0
    33e8:	4694      	mov	ip, r2
    33ea:	4698      	mov	r8, r3
    33ec:	2200      	movs	r2, #0
    33ee:	e5f7      	b.n	2fe0 <__aeabi_ddiv+0x19c>
    33f0:	2102      	movs	r1, #2
    33f2:	4249      	negs	r1, r1
    33f4:	468c      	mov	ip, r1
    33f6:	9d03      	ldr	r5, [sp, #12]
    33f8:	44e3      	add	fp, ip
    33fa:	46ac      	mov	ip, r5
    33fc:	44e2      	add	sl, ip
    33fe:	45aa      	cmp	sl, r5
    3400:	41ad      	sbcs	r5, r5
    3402:	426d      	negs	r5, r5
    3404:	4445      	add	r5, r8
    3406:	18ed      	adds	r5, r5, r3
    3408:	1a2d      	subs	r5, r5, r0
    340a:	e696      	b.n	313a <__aeabi_ddiv+0x2f6>
    340c:	1e8a      	subs	r2, r1, #2
    340e:	9903      	ldr	r1, [sp, #12]
    3410:	004d      	lsls	r5, r1, #1
    3412:	428d      	cmp	r5, r1
    3414:	4189      	sbcs	r1, r1
    3416:	4249      	negs	r1, r1
    3418:	4441      	add	r1, r8
    341a:	1876      	adds	r6, r6, r1
    341c:	9503      	str	r5, [sp, #12]
    341e:	e78f      	b.n	3340 <__aeabi_ddiv+0x4fc>
    3420:	201f      	movs	r0, #31
    3422:	4240      	negs	r0, r0
    3424:	1ac3      	subs	r3, r0, r3
    3426:	4658      	mov	r0, fp
    3428:	40d8      	lsrs	r0, r3
    342a:	0003      	movs	r3, r0
    342c:	2a20      	cmp	r2, #32
    342e:	d028      	beq.n	3482 <__aeabi_ddiv+0x63e>
    3430:	2040      	movs	r0, #64	; 0x40
    3432:	465d      	mov	r5, fp
    3434:	1a82      	subs	r2, r0, r2
    3436:	4095      	lsls	r5, r2
    3438:	4329      	orrs	r1, r5
    343a:	1e4a      	subs	r2, r1, #1
    343c:	4191      	sbcs	r1, r2
    343e:	4319      	orrs	r1, r3
    3440:	2307      	movs	r3, #7
    3442:	2200      	movs	r2, #0
    3444:	400b      	ands	r3, r1
    3446:	d009      	beq.n	345c <__aeabi_ddiv+0x618>
    3448:	230f      	movs	r3, #15
    344a:	2200      	movs	r2, #0
    344c:	400b      	ands	r3, r1
    344e:	0008      	movs	r0, r1
    3450:	2b04      	cmp	r3, #4
    3452:	d1bd      	bne.n	33d0 <__aeabi_ddiv+0x58c>
    3454:	0001      	movs	r1, r0
    3456:	0753      	lsls	r3, r2, #29
    3458:	0252      	lsls	r2, r2, #9
    345a:	0b12      	lsrs	r2, r2, #12
    345c:	08c9      	lsrs	r1, r1, #3
    345e:	4319      	orrs	r1, r3
    3460:	2301      	movs	r3, #1
    3462:	4688      	mov	r8, r1
    3464:	9902      	ldr	r1, [sp, #8]
    3466:	2400      	movs	r4, #0
    3468:	4019      	ands	r1, r3
    346a:	468c      	mov	ip, r1
    346c:	e5b8      	b.n	2fe0 <__aeabi_ddiv+0x19c>
    346e:	4552      	cmp	r2, sl
    3470:	d8be      	bhi.n	33f0 <__aeabi_ddiv+0x5ac>
    3472:	468b      	mov	fp, r1
    3474:	2500      	movs	r5, #0
    3476:	e660      	b.n	313a <__aeabi_ddiv+0x2f6>
    3478:	9d03      	ldr	r5, [sp, #12]
    347a:	429d      	cmp	r5, r3
    347c:	d3c6      	bcc.n	340c <__aeabi_ddiv+0x5c8>
    347e:	0011      	movs	r1, r2
    3480:	e762      	b.n	3348 <__aeabi_ddiv+0x504>
    3482:	2500      	movs	r5, #0
    3484:	e7d8      	b.n	3438 <__aeabi_ddiv+0x5f4>
    3486:	2280      	movs	r2, #128	; 0x80
    3488:	465b      	mov	r3, fp
    348a:	0312      	lsls	r2, r2, #12
    348c:	431a      	orrs	r2, r3
    348e:	9b01      	ldr	r3, [sp, #4]
    3490:	0312      	lsls	r2, r2, #12
    3492:	0b12      	lsrs	r2, r2, #12
    3494:	469c      	mov	ip, r3
    3496:	4688      	mov	r8, r1
    3498:	4c03      	ldr	r4, [pc, #12]	; (34a8 <__aeabi_ddiv+0x664>)
    349a:	e5a1      	b.n	2fe0 <__aeabi_ddiv+0x19c>
    349c:	000003ff 	.word	0x000003ff
    34a0:	feffffff 	.word	0xfeffffff
    34a4:	000007fe 	.word	0x000007fe
    34a8:	000007ff 	.word	0x000007ff

000034ac <__aeabi_dmul>:
    34ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ae:	4657      	mov	r7, sl
    34b0:	4645      	mov	r5, r8
    34b2:	46de      	mov	lr, fp
    34b4:	464e      	mov	r6, r9
    34b6:	b5e0      	push	{r5, r6, r7, lr}
    34b8:	030c      	lsls	r4, r1, #12
    34ba:	4698      	mov	r8, r3
    34bc:	004e      	lsls	r6, r1, #1
    34be:	0b23      	lsrs	r3, r4, #12
    34c0:	b087      	sub	sp, #28
    34c2:	0007      	movs	r7, r0
    34c4:	4692      	mov	sl, r2
    34c6:	469b      	mov	fp, r3
    34c8:	0d76      	lsrs	r6, r6, #21
    34ca:	0fcd      	lsrs	r5, r1, #31
    34cc:	2e00      	cmp	r6, #0
    34ce:	d06b      	beq.n	35a8 <__aeabi_dmul+0xfc>
    34d0:	4b6d      	ldr	r3, [pc, #436]	; (3688 <__aeabi_dmul+0x1dc>)
    34d2:	429e      	cmp	r6, r3
    34d4:	d035      	beq.n	3542 <__aeabi_dmul+0x96>
    34d6:	2480      	movs	r4, #128	; 0x80
    34d8:	465b      	mov	r3, fp
    34da:	0f42      	lsrs	r2, r0, #29
    34dc:	0424      	lsls	r4, r4, #16
    34de:	00db      	lsls	r3, r3, #3
    34e0:	4314      	orrs	r4, r2
    34e2:	431c      	orrs	r4, r3
    34e4:	00c3      	lsls	r3, r0, #3
    34e6:	4699      	mov	r9, r3
    34e8:	4b68      	ldr	r3, [pc, #416]	; (368c <__aeabi_dmul+0x1e0>)
    34ea:	46a3      	mov	fp, r4
    34ec:	469c      	mov	ip, r3
    34ee:	2300      	movs	r3, #0
    34f0:	2700      	movs	r7, #0
    34f2:	4466      	add	r6, ip
    34f4:	9302      	str	r3, [sp, #8]
    34f6:	4643      	mov	r3, r8
    34f8:	031c      	lsls	r4, r3, #12
    34fa:	005a      	lsls	r2, r3, #1
    34fc:	0fdb      	lsrs	r3, r3, #31
    34fe:	4650      	mov	r0, sl
    3500:	0b24      	lsrs	r4, r4, #12
    3502:	0d52      	lsrs	r2, r2, #21
    3504:	4698      	mov	r8, r3
    3506:	d100      	bne.n	350a <__aeabi_dmul+0x5e>
    3508:	e076      	b.n	35f8 <__aeabi_dmul+0x14c>
    350a:	4b5f      	ldr	r3, [pc, #380]	; (3688 <__aeabi_dmul+0x1dc>)
    350c:	429a      	cmp	r2, r3
    350e:	d06d      	beq.n	35ec <__aeabi_dmul+0x140>
    3510:	2380      	movs	r3, #128	; 0x80
    3512:	0f41      	lsrs	r1, r0, #29
    3514:	041b      	lsls	r3, r3, #16
    3516:	430b      	orrs	r3, r1
    3518:	495c      	ldr	r1, [pc, #368]	; (368c <__aeabi_dmul+0x1e0>)
    351a:	00e4      	lsls	r4, r4, #3
    351c:	468c      	mov	ip, r1
    351e:	431c      	orrs	r4, r3
    3520:	00c3      	lsls	r3, r0, #3
    3522:	2000      	movs	r0, #0
    3524:	4462      	add	r2, ip
    3526:	4641      	mov	r1, r8
    3528:	18b6      	adds	r6, r6, r2
    352a:	4069      	eors	r1, r5
    352c:	1c72      	adds	r2, r6, #1
    352e:	9101      	str	r1, [sp, #4]
    3530:	4694      	mov	ip, r2
    3532:	4307      	orrs	r7, r0
    3534:	2f0f      	cmp	r7, #15
    3536:	d900      	bls.n	353a <__aeabi_dmul+0x8e>
    3538:	e0b0      	b.n	369c <__aeabi_dmul+0x1f0>
    353a:	4a55      	ldr	r2, [pc, #340]	; (3690 <__aeabi_dmul+0x1e4>)
    353c:	00bf      	lsls	r7, r7, #2
    353e:	59d2      	ldr	r2, [r2, r7]
    3540:	4697      	mov	pc, r2
    3542:	465b      	mov	r3, fp
    3544:	4303      	orrs	r3, r0
    3546:	4699      	mov	r9, r3
    3548:	d000      	beq.n	354c <__aeabi_dmul+0xa0>
    354a:	e087      	b.n	365c <__aeabi_dmul+0x1b0>
    354c:	2300      	movs	r3, #0
    354e:	469b      	mov	fp, r3
    3550:	3302      	adds	r3, #2
    3552:	2708      	movs	r7, #8
    3554:	9302      	str	r3, [sp, #8]
    3556:	e7ce      	b.n	34f6 <__aeabi_dmul+0x4a>
    3558:	4642      	mov	r2, r8
    355a:	9201      	str	r2, [sp, #4]
    355c:	2802      	cmp	r0, #2
    355e:	d067      	beq.n	3630 <__aeabi_dmul+0x184>
    3560:	2803      	cmp	r0, #3
    3562:	d100      	bne.n	3566 <__aeabi_dmul+0xba>
    3564:	e20e      	b.n	3984 <__aeabi_dmul+0x4d8>
    3566:	2801      	cmp	r0, #1
    3568:	d000      	beq.n	356c <__aeabi_dmul+0xc0>
    356a:	e162      	b.n	3832 <__aeabi_dmul+0x386>
    356c:	2300      	movs	r3, #0
    356e:	2400      	movs	r4, #0
    3570:	2200      	movs	r2, #0
    3572:	4699      	mov	r9, r3
    3574:	9901      	ldr	r1, [sp, #4]
    3576:	4001      	ands	r1, r0
    3578:	b2cd      	uxtb	r5, r1
    357a:	2100      	movs	r1, #0
    357c:	0312      	lsls	r2, r2, #12
    357e:	0d0b      	lsrs	r3, r1, #20
    3580:	0b12      	lsrs	r2, r2, #12
    3582:	051b      	lsls	r3, r3, #20
    3584:	4313      	orrs	r3, r2
    3586:	4a43      	ldr	r2, [pc, #268]	; (3694 <__aeabi_dmul+0x1e8>)
    3588:	0524      	lsls	r4, r4, #20
    358a:	4013      	ands	r3, r2
    358c:	431c      	orrs	r4, r3
    358e:	0064      	lsls	r4, r4, #1
    3590:	07ed      	lsls	r5, r5, #31
    3592:	0864      	lsrs	r4, r4, #1
    3594:	432c      	orrs	r4, r5
    3596:	4648      	mov	r0, r9
    3598:	0021      	movs	r1, r4
    359a:	b007      	add	sp, #28
    359c:	bc3c      	pop	{r2, r3, r4, r5}
    359e:	4690      	mov	r8, r2
    35a0:	4699      	mov	r9, r3
    35a2:	46a2      	mov	sl, r4
    35a4:	46ab      	mov	fp, r5
    35a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35a8:	4303      	orrs	r3, r0
    35aa:	4699      	mov	r9, r3
    35ac:	d04f      	beq.n	364e <__aeabi_dmul+0x1a2>
    35ae:	465b      	mov	r3, fp
    35b0:	2b00      	cmp	r3, #0
    35b2:	d100      	bne.n	35b6 <__aeabi_dmul+0x10a>
    35b4:	e189      	b.n	38ca <__aeabi_dmul+0x41e>
    35b6:	4658      	mov	r0, fp
    35b8:	f000 fe46 	bl	4248 <__clzsi2>
    35bc:	0003      	movs	r3, r0
    35be:	3b0b      	subs	r3, #11
    35c0:	2b1c      	cmp	r3, #28
    35c2:	dd00      	ble.n	35c6 <__aeabi_dmul+0x11a>
    35c4:	e17a      	b.n	38bc <__aeabi_dmul+0x410>
    35c6:	221d      	movs	r2, #29
    35c8:	1ad3      	subs	r3, r2, r3
    35ca:	003a      	movs	r2, r7
    35cc:	0001      	movs	r1, r0
    35ce:	465c      	mov	r4, fp
    35d0:	40da      	lsrs	r2, r3
    35d2:	3908      	subs	r1, #8
    35d4:	408c      	lsls	r4, r1
    35d6:	0013      	movs	r3, r2
    35d8:	408f      	lsls	r7, r1
    35da:	4323      	orrs	r3, r4
    35dc:	469b      	mov	fp, r3
    35de:	46b9      	mov	r9, r7
    35e0:	2300      	movs	r3, #0
    35e2:	4e2d      	ldr	r6, [pc, #180]	; (3698 <__aeabi_dmul+0x1ec>)
    35e4:	2700      	movs	r7, #0
    35e6:	1a36      	subs	r6, r6, r0
    35e8:	9302      	str	r3, [sp, #8]
    35ea:	e784      	b.n	34f6 <__aeabi_dmul+0x4a>
    35ec:	4653      	mov	r3, sl
    35ee:	4323      	orrs	r3, r4
    35f0:	d12a      	bne.n	3648 <__aeabi_dmul+0x19c>
    35f2:	2400      	movs	r4, #0
    35f4:	2002      	movs	r0, #2
    35f6:	e796      	b.n	3526 <__aeabi_dmul+0x7a>
    35f8:	4653      	mov	r3, sl
    35fa:	4323      	orrs	r3, r4
    35fc:	d020      	beq.n	3640 <__aeabi_dmul+0x194>
    35fe:	2c00      	cmp	r4, #0
    3600:	d100      	bne.n	3604 <__aeabi_dmul+0x158>
    3602:	e157      	b.n	38b4 <__aeabi_dmul+0x408>
    3604:	0020      	movs	r0, r4
    3606:	f000 fe1f 	bl	4248 <__clzsi2>
    360a:	0003      	movs	r3, r0
    360c:	3b0b      	subs	r3, #11
    360e:	2b1c      	cmp	r3, #28
    3610:	dd00      	ble.n	3614 <__aeabi_dmul+0x168>
    3612:	e149      	b.n	38a8 <__aeabi_dmul+0x3fc>
    3614:	211d      	movs	r1, #29
    3616:	1acb      	subs	r3, r1, r3
    3618:	4651      	mov	r1, sl
    361a:	0002      	movs	r2, r0
    361c:	40d9      	lsrs	r1, r3
    361e:	4653      	mov	r3, sl
    3620:	3a08      	subs	r2, #8
    3622:	4094      	lsls	r4, r2
    3624:	4093      	lsls	r3, r2
    3626:	430c      	orrs	r4, r1
    3628:	4a1b      	ldr	r2, [pc, #108]	; (3698 <__aeabi_dmul+0x1ec>)
    362a:	1a12      	subs	r2, r2, r0
    362c:	2000      	movs	r0, #0
    362e:	e77a      	b.n	3526 <__aeabi_dmul+0x7a>
    3630:	2501      	movs	r5, #1
    3632:	9b01      	ldr	r3, [sp, #4]
    3634:	4c14      	ldr	r4, [pc, #80]	; (3688 <__aeabi_dmul+0x1dc>)
    3636:	401d      	ands	r5, r3
    3638:	2300      	movs	r3, #0
    363a:	2200      	movs	r2, #0
    363c:	4699      	mov	r9, r3
    363e:	e79c      	b.n	357a <__aeabi_dmul+0xce>
    3640:	2400      	movs	r4, #0
    3642:	2200      	movs	r2, #0
    3644:	2001      	movs	r0, #1
    3646:	e76e      	b.n	3526 <__aeabi_dmul+0x7a>
    3648:	4653      	mov	r3, sl
    364a:	2003      	movs	r0, #3
    364c:	e76b      	b.n	3526 <__aeabi_dmul+0x7a>
    364e:	2300      	movs	r3, #0
    3650:	469b      	mov	fp, r3
    3652:	3301      	adds	r3, #1
    3654:	2704      	movs	r7, #4
    3656:	2600      	movs	r6, #0
    3658:	9302      	str	r3, [sp, #8]
    365a:	e74c      	b.n	34f6 <__aeabi_dmul+0x4a>
    365c:	2303      	movs	r3, #3
    365e:	4681      	mov	r9, r0
    3660:	270c      	movs	r7, #12
    3662:	9302      	str	r3, [sp, #8]
    3664:	e747      	b.n	34f6 <__aeabi_dmul+0x4a>
    3666:	2280      	movs	r2, #128	; 0x80
    3668:	2300      	movs	r3, #0
    366a:	2500      	movs	r5, #0
    366c:	0312      	lsls	r2, r2, #12
    366e:	4699      	mov	r9, r3
    3670:	4c05      	ldr	r4, [pc, #20]	; (3688 <__aeabi_dmul+0x1dc>)
    3672:	e782      	b.n	357a <__aeabi_dmul+0xce>
    3674:	465c      	mov	r4, fp
    3676:	464b      	mov	r3, r9
    3678:	9802      	ldr	r0, [sp, #8]
    367a:	e76f      	b.n	355c <__aeabi_dmul+0xb0>
    367c:	465c      	mov	r4, fp
    367e:	464b      	mov	r3, r9
    3680:	9501      	str	r5, [sp, #4]
    3682:	9802      	ldr	r0, [sp, #8]
    3684:	e76a      	b.n	355c <__aeabi_dmul+0xb0>
    3686:	46c0      	nop			; (mov r8, r8)
    3688:	000007ff 	.word	0x000007ff
    368c:	fffffc01 	.word	0xfffffc01
    3690:	00004d64 	.word	0x00004d64
    3694:	800fffff 	.word	0x800fffff
    3698:	fffffc0d 	.word	0xfffffc0d
    369c:	464a      	mov	r2, r9
    369e:	4649      	mov	r1, r9
    36a0:	0c17      	lsrs	r7, r2, #16
    36a2:	0c1a      	lsrs	r2, r3, #16
    36a4:	041b      	lsls	r3, r3, #16
    36a6:	0c1b      	lsrs	r3, r3, #16
    36a8:	0408      	lsls	r0, r1, #16
    36aa:	0019      	movs	r1, r3
    36ac:	0c00      	lsrs	r0, r0, #16
    36ae:	4341      	muls	r1, r0
    36b0:	0015      	movs	r5, r2
    36b2:	4688      	mov	r8, r1
    36b4:	0019      	movs	r1, r3
    36b6:	437d      	muls	r5, r7
    36b8:	4379      	muls	r1, r7
    36ba:	9503      	str	r5, [sp, #12]
    36bc:	4689      	mov	r9, r1
    36be:	0029      	movs	r1, r5
    36c0:	0015      	movs	r5, r2
    36c2:	4345      	muls	r5, r0
    36c4:	444d      	add	r5, r9
    36c6:	9502      	str	r5, [sp, #8]
    36c8:	4645      	mov	r5, r8
    36ca:	0c2d      	lsrs	r5, r5, #16
    36cc:	46aa      	mov	sl, r5
    36ce:	9d02      	ldr	r5, [sp, #8]
    36d0:	4455      	add	r5, sl
    36d2:	45a9      	cmp	r9, r5
    36d4:	d906      	bls.n	36e4 <__aeabi_dmul+0x238>
    36d6:	468a      	mov	sl, r1
    36d8:	2180      	movs	r1, #128	; 0x80
    36da:	0249      	lsls	r1, r1, #9
    36dc:	4689      	mov	r9, r1
    36de:	44ca      	add	sl, r9
    36e0:	4651      	mov	r1, sl
    36e2:	9103      	str	r1, [sp, #12]
    36e4:	0c29      	lsrs	r1, r5, #16
    36e6:	9104      	str	r1, [sp, #16]
    36e8:	4641      	mov	r1, r8
    36ea:	0409      	lsls	r1, r1, #16
    36ec:	042d      	lsls	r5, r5, #16
    36ee:	0c09      	lsrs	r1, r1, #16
    36f0:	4688      	mov	r8, r1
    36f2:	0029      	movs	r1, r5
    36f4:	0c25      	lsrs	r5, r4, #16
    36f6:	0424      	lsls	r4, r4, #16
    36f8:	4441      	add	r1, r8
    36fa:	0c24      	lsrs	r4, r4, #16
    36fc:	9105      	str	r1, [sp, #20]
    36fe:	0021      	movs	r1, r4
    3700:	4341      	muls	r1, r0
    3702:	4688      	mov	r8, r1
    3704:	0021      	movs	r1, r4
    3706:	4379      	muls	r1, r7
    3708:	468a      	mov	sl, r1
    370a:	4368      	muls	r0, r5
    370c:	4641      	mov	r1, r8
    370e:	4450      	add	r0, sl
    3710:	4681      	mov	r9, r0
    3712:	0c08      	lsrs	r0, r1, #16
    3714:	4448      	add	r0, r9
    3716:	436f      	muls	r7, r5
    3718:	4582      	cmp	sl, r0
    371a:	d903      	bls.n	3724 <__aeabi_dmul+0x278>
    371c:	2180      	movs	r1, #128	; 0x80
    371e:	0249      	lsls	r1, r1, #9
    3720:	4689      	mov	r9, r1
    3722:	444f      	add	r7, r9
    3724:	0c01      	lsrs	r1, r0, #16
    3726:	4689      	mov	r9, r1
    3728:	0039      	movs	r1, r7
    372a:	4449      	add	r1, r9
    372c:	9102      	str	r1, [sp, #8]
    372e:	4641      	mov	r1, r8
    3730:	040f      	lsls	r7, r1, #16
    3732:	9904      	ldr	r1, [sp, #16]
    3734:	0c3f      	lsrs	r7, r7, #16
    3736:	4688      	mov	r8, r1
    3738:	0400      	lsls	r0, r0, #16
    373a:	19c0      	adds	r0, r0, r7
    373c:	4480      	add	r8, r0
    373e:	4641      	mov	r1, r8
    3740:	9104      	str	r1, [sp, #16]
    3742:	4659      	mov	r1, fp
    3744:	0c0f      	lsrs	r7, r1, #16
    3746:	0409      	lsls	r1, r1, #16
    3748:	0c09      	lsrs	r1, r1, #16
    374a:	4688      	mov	r8, r1
    374c:	4359      	muls	r1, r3
    374e:	468a      	mov	sl, r1
    3750:	0039      	movs	r1, r7
    3752:	4351      	muls	r1, r2
    3754:	4689      	mov	r9, r1
    3756:	4641      	mov	r1, r8
    3758:	434a      	muls	r2, r1
    375a:	4651      	mov	r1, sl
    375c:	0c09      	lsrs	r1, r1, #16
    375e:	468b      	mov	fp, r1
    3760:	437b      	muls	r3, r7
    3762:	18d2      	adds	r2, r2, r3
    3764:	445a      	add	r2, fp
    3766:	4293      	cmp	r3, r2
    3768:	d903      	bls.n	3772 <__aeabi_dmul+0x2c6>
    376a:	2380      	movs	r3, #128	; 0x80
    376c:	025b      	lsls	r3, r3, #9
    376e:	469b      	mov	fp, r3
    3770:	44d9      	add	r9, fp
    3772:	4651      	mov	r1, sl
    3774:	0409      	lsls	r1, r1, #16
    3776:	0c09      	lsrs	r1, r1, #16
    3778:	468a      	mov	sl, r1
    377a:	4641      	mov	r1, r8
    377c:	4361      	muls	r1, r4
    377e:	437c      	muls	r4, r7
    3780:	0c13      	lsrs	r3, r2, #16
    3782:	0412      	lsls	r2, r2, #16
    3784:	444b      	add	r3, r9
    3786:	4452      	add	r2, sl
    3788:	46a1      	mov	r9, r4
    378a:	468a      	mov	sl, r1
    378c:	003c      	movs	r4, r7
    378e:	4641      	mov	r1, r8
    3790:	436c      	muls	r4, r5
    3792:	434d      	muls	r5, r1
    3794:	4651      	mov	r1, sl
    3796:	444d      	add	r5, r9
    3798:	0c0f      	lsrs	r7, r1, #16
    379a:	197d      	adds	r5, r7, r5
    379c:	45a9      	cmp	r9, r5
    379e:	d903      	bls.n	37a8 <__aeabi_dmul+0x2fc>
    37a0:	2180      	movs	r1, #128	; 0x80
    37a2:	0249      	lsls	r1, r1, #9
    37a4:	4688      	mov	r8, r1
    37a6:	4444      	add	r4, r8
    37a8:	9f04      	ldr	r7, [sp, #16]
    37aa:	9903      	ldr	r1, [sp, #12]
    37ac:	46b8      	mov	r8, r7
    37ae:	4441      	add	r1, r8
    37b0:	468b      	mov	fp, r1
    37b2:	4583      	cmp	fp, r0
    37b4:	4180      	sbcs	r0, r0
    37b6:	4241      	negs	r1, r0
    37b8:	4688      	mov	r8, r1
    37ba:	4651      	mov	r1, sl
    37bc:	0408      	lsls	r0, r1, #16
    37be:	042f      	lsls	r7, r5, #16
    37c0:	0c00      	lsrs	r0, r0, #16
    37c2:	183f      	adds	r7, r7, r0
    37c4:	4658      	mov	r0, fp
    37c6:	9902      	ldr	r1, [sp, #8]
    37c8:	1810      	adds	r0, r2, r0
    37ca:	4689      	mov	r9, r1
    37cc:	4290      	cmp	r0, r2
    37ce:	4192      	sbcs	r2, r2
    37d0:	444f      	add	r7, r9
    37d2:	46ba      	mov	sl, r7
    37d4:	4252      	negs	r2, r2
    37d6:	4699      	mov	r9, r3
    37d8:	4693      	mov	fp, r2
    37da:	44c2      	add	sl, r8
    37dc:	44d1      	add	r9, sl
    37de:	44cb      	add	fp, r9
    37e0:	428f      	cmp	r7, r1
    37e2:	41bf      	sbcs	r7, r7
    37e4:	45c2      	cmp	sl, r8
    37e6:	4189      	sbcs	r1, r1
    37e8:	4599      	cmp	r9, r3
    37ea:	419b      	sbcs	r3, r3
    37ec:	4593      	cmp	fp, r2
    37ee:	4192      	sbcs	r2, r2
    37f0:	427f      	negs	r7, r7
    37f2:	4249      	negs	r1, r1
    37f4:	0c2d      	lsrs	r5, r5, #16
    37f6:	4252      	negs	r2, r2
    37f8:	430f      	orrs	r7, r1
    37fa:	425b      	negs	r3, r3
    37fc:	4313      	orrs	r3, r2
    37fe:	197f      	adds	r7, r7, r5
    3800:	18ff      	adds	r7, r7, r3
    3802:	465b      	mov	r3, fp
    3804:	193c      	adds	r4, r7, r4
    3806:	0ddb      	lsrs	r3, r3, #23
    3808:	9a05      	ldr	r2, [sp, #20]
    380a:	0264      	lsls	r4, r4, #9
    380c:	431c      	orrs	r4, r3
    380e:	0243      	lsls	r3, r0, #9
    3810:	4313      	orrs	r3, r2
    3812:	1e5d      	subs	r5, r3, #1
    3814:	41ab      	sbcs	r3, r5
    3816:	465a      	mov	r2, fp
    3818:	0dc0      	lsrs	r0, r0, #23
    381a:	4303      	orrs	r3, r0
    381c:	0252      	lsls	r2, r2, #9
    381e:	4313      	orrs	r3, r2
    3820:	01e2      	lsls	r2, r4, #7
    3822:	d556      	bpl.n	38d2 <__aeabi_dmul+0x426>
    3824:	2001      	movs	r0, #1
    3826:	085a      	lsrs	r2, r3, #1
    3828:	4003      	ands	r3, r0
    382a:	4313      	orrs	r3, r2
    382c:	07e2      	lsls	r2, r4, #31
    382e:	4313      	orrs	r3, r2
    3830:	0864      	lsrs	r4, r4, #1
    3832:	485a      	ldr	r0, [pc, #360]	; (399c <__aeabi_dmul+0x4f0>)
    3834:	4460      	add	r0, ip
    3836:	2800      	cmp	r0, #0
    3838:	dd4d      	ble.n	38d6 <__aeabi_dmul+0x42a>
    383a:	075a      	lsls	r2, r3, #29
    383c:	d009      	beq.n	3852 <__aeabi_dmul+0x3a6>
    383e:	220f      	movs	r2, #15
    3840:	401a      	ands	r2, r3
    3842:	2a04      	cmp	r2, #4
    3844:	d005      	beq.n	3852 <__aeabi_dmul+0x3a6>
    3846:	1d1a      	adds	r2, r3, #4
    3848:	429a      	cmp	r2, r3
    384a:	419b      	sbcs	r3, r3
    384c:	425b      	negs	r3, r3
    384e:	18e4      	adds	r4, r4, r3
    3850:	0013      	movs	r3, r2
    3852:	01e2      	lsls	r2, r4, #7
    3854:	d504      	bpl.n	3860 <__aeabi_dmul+0x3b4>
    3856:	2080      	movs	r0, #128	; 0x80
    3858:	4a51      	ldr	r2, [pc, #324]	; (39a0 <__aeabi_dmul+0x4f4>)
    385a:	00c0      	lsls	r0, r0, #3
    385c:	4014      	ands	r4, r2
    385e:	4460      	add	r0, ip
    3860:	4a50      	ldr	r2, [pc, #320]	; (39a4 <__aeabi_dmul+0x4f8>)
    3862:	4290      	cmp	r0, r2
    3864:	dd00      	ble.n	3868 <__aeabi_dmul+0x3bc>
    3866:	e6e3      	b.n	3630 <__aeabi_dmul+0x184>
    3868:	2501      	movs	r5, #1
    386a:	08db      	lsrs	r3, r3, #3
    386c:	0762      	lsls	r2, r4, #29
    386e:	431a      	orrs	r2, r3
    3870:	0264      	lsls	r4, r4, #9
    3872:	9b01      	ldr	r3, [sp, #4]
    3874:	4691      	mov	r9, r2
    3876:	0b22      	lsrs	r2, r4, #12
    3878:	0544      	lsls	r4, r0, #21
    387a:	0d64      	lsrs	r4, r4, #21
    387c:	401d      	ands	r5, r3
    387e:	e67c      	b.n	357a <__aeabi_dmul+0xce>
    3880:	2280      	movs	r2, #128	; 0x80
    3882:	4659      	mov	r1, fp
    3884:	0312      	lsls	r2, r2, #12
    3886:	4211      	tst	r1, r2
    3888:	d008      	beq.n	389c <__aeabi_dmul+0x3f0>
    388a:	4214      	tst	r4, r2
    388c:	d106      	bne.n	389c <__aeabi_dmul+0x3f0>
    388e:	4322      	orrs	r2, r4
    3890:	0312      	lsls	r2, r2, #12
    3892:	0b12      	lsrs	r2, r2, #12
    3894:	4645      	mov	r5, r8
    3896:	4699      	mov	r9, r3
    3898:	4c43      	ldr	r4, [pc, #268]	; (39a8 <__aeabi_dmul+0x4fc>)
    389a:	e66e      	b.n	357a <__aeabi_dmul+0xce>
    389c:	465b      	mov	r3, fp
    389e:	431a      	orrs	r2, r3
    38a0:	0312      	lsls	r2, r2, #12
    38a2:	0b12      	lsrs	r2, r2, #12
    38a4:	4c40      	ldr	r4, [pc, #256]	; (39a8 <__aeabi_dmul+0x4fc>)
    38a6:	e668      	b.n	357a <__aeabi_dmul+0xce>
    38a8:	0003      	movs	r3, r0
    38aa:	4654      	mov	r4, sl
    38ac:	3b28      	subs	r3, #40	; 0x28
    38ae:	409c      	lsls	r4, r3
    38b0:	2300      	movs	r3, #0
    38b2:	e6b9      	b.n	3628 <__aeabi_dmul+0x17c>
    38b4:	f000 fcc8 	bl	4248 <__clzsi2>
    38b8:	3020      	adds	r0, #32
    38ba:	e6a6      	b.n	360a <__aeabi_dmul+0x15e>
    38bc:	0003      	movs	r3, r0
    38be:	3b28      	subs	r3, #40	; 0x28
    38c0:	409f      	lsls	r7, r3
    38c2:	2300      	movs	r3, #0
    38c4:	46bb      	mov	fp, r7
    38c6:	4699      	mov	r9, r3
    38c8:	e68a      	b.n	35e0 <__aeabi_dmul+0x134>
    38ca:	f000 fcbd 	bl	4248 <__clzsi2>
    38ce:	3020      	adds	r0, #32
    38d0:	e674      	b.n	35bc <__aeabi_dmul+0x110>
    38d2:	46b4      	mov	ip, r6
    38d4:	e7ad      	b.n	3832 <__aeabi_dmul+0x386>
    38d6:	2501      	movs	r5, #1
    38d8:	1a2a      	subs	r2, r5, r0
    38da:	2a38      	cmp	r2, #56	; 0x38
    38dc:	dd06      	ble.n	38ec <__aeabi_dmul+0x440>
    38de:	9b01      	ldr	r3, [sp, #4]
    38e0:	2400      	movs	r4, #0
    38e2:	401d      	ands	r5, r3
    38e4:	2300      	movs	r3, #0
    38e6:	2200      	movs	r2, #0
    38e8:	4699      	mov	r9, r3
    38ea:	e646      	b.n	357a <__aeabi_dmul+0xce>
    38ec:	2a1f      	cmp	r2, #31
    38ee:	dc21      	bgt.n	3934 <__aeabi_dmul+0x488>
    38f0:	2520      	movs	r5, #32
    38f2:	0020      	movs	r0, r4
    38f4:	1aad      	subs	r5, r5, r2
    38f6:	001e      	movs	r6, r3
    38f8:	40ab      	lsls	r3, r5
    38fa:	40a8      	lsls	r0, r5
    38fc:	40d6      	lsrs	r6, r2
    38fe:	1e5d      	subs	r5, r3, #1
    3900:	41ab      	sbcs	r3, r5
    3902:	4330      	orrs	r0, r6
    3904:	4318      	orrs	r0, r3
    3906:	40d4      	lsrs	r4, r2
    3908:	0743      	lsls	r3, r0, #29
    390a:	d009      	beq.n	3920 <__aeabi_dmul+0x474>
    390c:	230f      	movs	r3, #15
    390e:	4003      	ands	r3, r0
    3910:	2b04      	cmp	r3, #4
    3912:	d005      	beq.n	3920 <__aeabi_dmul+0x474>
    3914:	0003      	movs	r3, r0
    3916:	1d18      	adds	r0, r3, #4
    3918:	4298      	cmp	r0, r3
    391a:	419b      	sbcs	r3, r3
    391c:	425b      	negs	r3, r3
    391e:	18e4      	adds	r4, r4, r3
    3920:	0223      	lsls	r3, r4, #8
    3922:	d521      	bpl.n	3968 <__aeabi_dmul+0x4bc>
    3924:	2501      	movs	r5, #1
    3926:	9b01      	ldr	r3, [sp, #4]
    3928:	2401      	movs	r4, #1
    392a:	401d      	ands	r5, r3
    392c:	2300      	movs	r3, #0
    392e:	2200      	movs	r2, #0
    3930:	4699      	mov	r9, r3
    3932:	e622      	b.n	357a <__aeabi_dmul+0xce>
    3934:	251f      	movs	r5, #31
    3936:	0021      	movs	r1, r4
    3938:	426d      	negs	r5, r5
    393a:	1a28      	subs	r0, r5, r0
    393c:	40c1      	lsrs	r1, r0
    393e:	0008      	movs	r0, r1
    3940:	2a20      	cmp	r2, #32
    3942:	d01d      	beq.n	3980 <__aeabi_dmul+0x4d4>
    3944:	355f      	adds	r5, #95	; 0x5f
    3946:	1aaa      	subs	r2, r5, r2
    3948:	4094      	lsls	r4, r2
    394a:	4323      	orrs	r3, r4
    394c:	1e5c      	subs	r4, r3, #1
    394e:	41a3      	sbcs	r3, r4
    3950:	2507      	movs	r5, #7
    3952:	4303      	orrs	r3, r0
    3954:	401d      	ands	r5, r3
    3956:	2200      	movs	r2, #0
    3958:	2d00      	cmp	r5, #0
    395a:	d009      	beq.n	3970 <__aeabi_dmul+0x4c4>
    395c:	220f      	movs	r2, #15
    395e:	2400      	movs	r4, #0
    3960:	401a      	ands	r2, r3
    3962:	0018      	movs	r0, r3
    3964:	2a04      	cmp	r2, #4
    3966:	d1d6      	bne.n	3916 <__aeabi_dmul+0x46a>
    3968:	0003      	movs	r3, r0
    396a:	0765      	lsls	r5, r4, #29
    396c:	0264      	lsls	r4, r4, #9
    396e:	0b22      	lsrs	r2, r4, #12
    3970:	08db      	lsrs	r3, r3, #3
    3972:	432b      	orrs	r3, r5
    3974:	2501      	movs	r5, #1
    3976:	4699      	mov	r9, r3
    3978:	9b01      	ldr	r3, [sp, #4]
    397a:	2400      	movs	r4, #0
    397c:	401d      	ands	r5, r3
    397e:	e5fc      	b.n	357a <__aeabi_dmul+0xce>
    3980:	2400      	movs	r4, #0
    3982:	e7e2      	b.n	394a <__aeabi_dmul+0x49e>
    3984:	2280      	movs	r2, #128	; 0x80
    3986:	2501      	movs	r5, #1
    3988:	0312      	lsls	r2, r2, #12
    398a:	4322      	orrs	r2, r4
    398c:	9901      	ldr	r1, [sp, #4]
    398e:	0312      	lsls	r2, r2, #12
    3990:	0b12      	lsrs	r2, r2, #12
    3992:	400d      	ands	r5, r1
    3994:	4699      	mov	r9, r3
    3996:	4c04      	ldr	r4, [pc, #16]	; (39a8 <__aeabi_dmul+0x4fc>)
    3998:	e5ef      	b.n	357a <__aeabi_dmul+0xce>
    399a:	46c0      	nop			; (mov r8, r8)
    399c:	000003ff 	.word	0x000003ff
    39a0:	feffffff 	.word	0xfeffffff
    39a4:	000007fe 	.word	0x000007fe
    39a8:	000007ff 	.word	0x000007ff

000039ac <__aeabi_dsub>:
    39ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ae:	4646      	mov	r6, r8
    39b0:	46d6      	mov	lr, sl
    39b2:	464f      	mov	r7, r9
    39b4:	030c      	lsls	r4, r1, #12
    39b6:	b5c0      	push	{r6, r7, lr}
    39b8:	0fcd      	lsrs	r5, r1, #31
    39ba:	004e      	lsls	r6, r1, #1
    39bc:	0a61      	lsrs	r1, r4, #9
    39be:	0f44      	lsrs	r4, r0, #29
    39c0:	430c      	orrs	r4, r1
    39c2:	00c1      	lsls	r1, r0, #3
    39c4:	0058      	lsls	r0, r3, #1
    39c6:	0d40      	lsrs	r0, r0, #21
    39c8:	4684      	mov	ip, r0
    39ca:	468a      	mov	sl, r1
    39cc:	000f      	movs	r7, r1
    39ce:	0319      	lsls	r1, r3, #12
    39d0:	0f50      	lsrs	r0, r2, #29
    39d2:	0a49      	lsrs	r1, r1, #9
    39d4:	4301      	orrs	r1, r0
    39d6:	48c6      	ldr	r0, [pc, #792]	; (3cf0 <__aeabi_dsub+0x344>)
    39d8:	0d76      	lsrs	r6, r6, #21
    39da:	46a8      	mov	r8, r5
    39dc:	0fdb      	lsrs	r3, r3, #31
    39de:	00d2      	lsls	r2, r2, #3
    39e0:	4584      	cmp	ip, r0
    39e2:	d100      	bne.n	39e6 <__aeabi_dsub+0x3a>
    39e4:	e0d8      	b.n	3b98 <__aeabi_dsub+0x1ec>
    39e6:	2001      	movs	r0, #1
    39e8:	4043      	eors	r3, r0
    39ea:	42ab      	cmp	r3, r5
    39ec:	d100      	bne.n	39f0 <__aeabi_dsub+0x44>
    39ee:	e0a6      	b.n	3b3e <__aeabi_dsub+0x192>
    39f0:	4660      	mov	r0, ip
    39f2:	1a35      	subs	r5, r6, r0
    39f4:	2d00      	cmp	r5, #0
    39f6:	dc00      	bgt.n	39fa <__aeabi_dsub+0x4e>
    39f8:	e105      	b.n	3c06 <__aeabi_dsub+0x25a>
    39fa:	2800      	cmp	r0, #0
    39fc:	d110      	bne.n	3a20 <__aeabi_dsub+0x74>
    39fe:	000b      	movs	r3, r1
    3a00:	4313      	orrs	r3, r2
    3a02:	d100      	bne.n	3a06 <__aeabi_dsub+0x5a>
    3a04:	e0d7      	b.n	3bb6 <__aeabi_dsub+0x20a>
    3a06:	1e6b      	subs	r3, r5, #1
    3a08:	2b00      	cmp	r3, #0
    3a0a:	d000      	beq.n	3a0e <__aeabi_dsub+0x62>
    3a0c:	e14b      	b.n	3ca6 <__aeabi_dsub+0x2fa>
    3a0e:	4653      	mov	r3, sl
    3a10:	1a9f      	subs	r7, r3, r2
    3a12:	45ba      	cmp	sl, r7
    3a14:	4180      	sbcs	r0, r0
    3a16:	1a64      	subs	r4, r4, r1
    3a18:	4240      	negs	r0, r0
    3a1a:	1a24      	subs	r4, r4, r0
    3a1c:	2601      	movs	r6, #1
    3a1e:	e01e      	b.n	3a5e <__aeabi_dsub+0xb2>
    3a20:	4bb3      	ldr	r3, [pc, #716]	; (3cf0 <__aeabi_dsub+0x344>)
    3a22:	429e      	cmp	r6, r3
    3a24:	d048      	beq.n	3ab8 <__aeabi_dsub+0x10c>
    3a26:	2380      	movs	r3, #128	; 0x80
    3a28:	041b      	lsls	r3, r3, #16
    3a2a:	4319      	orrs	r1, r3
    3a2c:	2d38      	cmp	r5, #56	; 0x38
    3a2e:	dd00      	ble.n	3a32 <__aeabi_dsub+0x86>
    3a30:	e119      	b.n	3c66 <__aeabi_dsub+0x2ba>
    3a32:	2d1f      	cmp	r5, #31
    3a34:	dd00      	ble.n	3a38 <__aeabi_dsub+0x8c>
    3a36:	e14c      	b.n	3cd2 <__aeabi_dsub+0x326>
    3a38:	2320      	movs	r3, #32
    3a3a:	000f      	movs	r7, r1
    3a3c:	1b5b      	subs	r3, r3, r5
    3a3e:	0010      	movs	r0, r2
    3a40:	409a      	lsls	r2, r3
    3a42:	409f      	lsls	r7, r3
    3a44:	40e8      	lsrs	r0, r5
    3a46:	1e53      	subs	r3, r2, #1
    3a48:	419a      	sbcs	r2, r3
    3a4a:	40e9      	lsrs	r1, r5
    3a4c:	4307      	orrs	r7, r0
    3a4e:	4317      	orrs	r7, r2
    3a50:	4653      	mov	r3, sl
    3a52:	1bdf      	subs	r7, r3, r7
    3a54:	1a61      	subs	r1, r4, r1
    3a56:	45ba      	cmp	sl, r7
    3a58:	41a4      	sbcs	r4, r4
    3a5a:	4264      	negs	r4, r4
    3a5c:	1b0c      	subs	r4, r1, r4
    3a5e:	0223      	lsls	r3, r4, #8
    3a60:	d400      	bmi.n	3a64 <__aeabi_dsub+0xb8>
    3a62:	e0c5      	b.n	3bf0 <__aeabi_dsub+0x244>
    3a64:	0264      	lsls	r4, r4, #9
    3a66:	0a65      	lsrs	r5, r4, #9
    3a68:	2d00      	cmp	r5, #0
    3a6a:	d100      	bne.n	3a6e <__aeabi_dsub+0xc2>
    3a6c:	e0f6      	b.n	3c5c <__aeabi_dsub+0x2b0>
    3a6e:	0028      	movs	r0, r5
    3a70:	f000 fbea 	bl	4248 <__clzsi2>
    3a74:	0003      	movs	r3, r0
    3a76:	3b08      	subs	r3, #8
    3a78:	2b1f      	cmp	r3, #31
    3a7a:	dd00      	ble.n	3a7e <__aeabi_dsub+0xd2>
    3a7c:	e0e9      	b.n	3c52 <__aeabi_dsub+0x2a6>
    3a7e:	2220      	movs	r2, #32
    3a80:	003c      	movs	r4, r7
    3a82:	1ad2      	subs	r2, r2, r3
    3a84:	409d      	lsls	r5, r3
    3a86:	40d4      	lsrs	r4, r2
    3a88:	409f      	lsls	r7, r3
    3a8a:	4325      	orrs	r5, r4
    3a8c:	429e      	cmp	r6, r3
    3a8e:	dd00      	ble.n	3a92 <__aeabi_dsub+0xe6>
    3a90:	e0db      	b.n	3c4a <__aeabi_dsub+0x29e>
    3a92:	1b9e      	subs	r6, r3, r6
    3a94:	1c73      	adds	r3, r6, #1
    3a96:	2b1f      	cmp	r3, #31
    3a98:	dd00      	ble.n	3a9c <__aeabi_dsub+0xf0>
    3a9a:	e10a      	b.n	3cb2 <__aeabi_dsub+0x306>
    3a9c:	2220      	movs	r2, #32
    3a9e:	0038      	movs	r0, r7
    3aa0:	1ad2      	subs	r2, r2, r3
    3aa2:	0029      	movs	r1, r5
    3aa4:	4097      	lsls	r7, r2
    3aa6:	002c      	movs	r4, r5
    3aa8:	4091      	lsls	r1, r2
    3aaa:	40d8      	lsrs	r0, r3
    3aac:	1e7a      	subs	r2, r7, #1
    3aae:	4197      	sbcs	r7, r2
    3ab0:	40dc      	lsrs	r4, r3
    3ab2:	2600      	movs	r6, #0
    3ab4:	4301      	orrs	r1, r0
    3ab6:	430f      	orrs	r7, r1
    3ab8:	077b      	lsls	r3, r7, #29
    3aba:	d009      	beq.n	3ad0 <__aeabi_dsub+0x124>
    3abc:	230f      	movs	r3, #15
    3abe:	403b      	ands	r3, r7
    3ac0:	2b04      	cmp	r3, #4
    3ac2:	d005      	beq.n	3ad0 <__aeabi_dsub+0x124>
    3ac4:	1d3b      	adds	r3, r7, #4
    3ac6:	42bb      	cmp	r3, r7
    3ac8:	41bf      	sbcs	r7, r7
    3aca:	427f      	negs	r7, r7
    3acc:	19e4      	adds	r4, r4, r7
    3ace:	001f      	movs	r7, r3
    3ad0:	0223      	lsls	r3, r4, #8
    3ad2:	d525      	bpl.n	3b20 <__aeabi_dsub+0x174>
    3ad4:	4b86      	ldr	r3, [pc, #536]	; (3cf0 <__aeabi_dsub+0x344>)
    3ad6:	3601      	adds	r6, #1
    3ad8:	429e      	cmp	r6, r3
    3ada:	d100      	bne.n	3ade <__aeabi_dsub+0x132>
    3adc:	e0af      	b.n	3c3e <__aeabi_dsub+0x292>
    3ade:	4b85      	ldr	r3, [pc, #532]	; (3cf4 <__aeabi_dsub+0x348>)
    3ae0:	2501      	movs	r5, #1
    3ae2:	401c      	ands	r4, r3
    3ae4:	4643      	mov	r3, r8
    3ae6:	0762      	lsls	r2, r4, #29
    3ae8:	08ff      	lsrs	r7, r7, #3
    3aea:	0264      	lsls	r4, r4, #9
    3aec:	0576      	lsls	r6, r6, #21
    3aee:	4317      	orrs	r7, r2
    3af0:	0b24      	lsrs	r4, r4, #12
    3af2:	0d76      	lsrs	r6, r6, #21
    3af4:	401d      	ands	r5, r3
    3af6:	2100      	movs	r1, #0
    3af8:	0324      	lsls	r4, r4, #12
    3afa:	0b23      	lsrs	r3, r4, #12
    3afc:	0d0c      	lsrs	r4, r1, #20
    3afe:	4a7e      	ldr	r2, [pc, #504]	; (3cf8 <__aeabi_dsub+0x34c>)
    3b00:	0524      	lsls	r4, r4, #20
    3b02:	431c      	orrs	r4, r3
    3b04:	4014      	ands	r4, r2
    3b06:	0533      	lsls	r3, r6, #20
    3b08:	4323      	orrs	r3, r4
    3b0a:	005b      	lsls	r3, r3, #1
    3b0c:	07ed      	lsls	r5, r5, #31
    3b0e:	085b      	lsrs	r3, r3, #1
    3b10:	432b      	orrs	r3, r5
    3b12:	0038      	movs	r0, r7
    3b14:	0019      	movs	r1, r3
    3b16:	bc1c      	pop	{r2, r3, r4}
    3b18:	4690      	mov	r8, r2
    3b1a:	4699      	mov	r9, r3
    3b1c:	46a2      	mov	sl, r4
    3b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b20:	2501      	movs	r5, #1
    3b22:	4643      	mov	r3, r8
    3b24:	0762      	lsls	r2, r4, #29
    3b26:	08ff      	lsrs	r7, r7, #3
    3b28:	4317      	orrs	r7, r2
    3b2a:	08e4      	lsrs	r4, r4, #3
    3b2c:	401d      	ands	r5, r3
    3b2e:	4b70      	ldr	r3, [pc, #448]	; (3cf0 <__aeabi_dsub+0x344>)
    3b30:	429e      	cmp	r6, r3
    3b32:	d036      	beq.n	3ba2 <__aeabi_dsub+0x1f6>
    3b34:	0324      	lsls	r4, r4, #12
    3b36:	0576      	lsls	r6, r6, #21
    3b38:	0b24      	lsrs	r4, r4, #12
    3b3a:	0d76      	lsrs	r6, r6, #21
    3b3c:	e7db      	b.n	3af6 <__aeabi_dsub+0x14a>
    3b3e:	4663      	mov	r3, ip
    3b40:	1af3      	subs	r3, r6, r3
    3b42:	2b00      	cmp	r3, #0
    3b44:	dc00      	bgt.n	3b48 <__aeabi_dsub+0x19c>
    3b46:	e094      	b.n	3c72 <__aeabi_dsub+0x2c6>
    3b48:	4660      	mov	r0, ip
    3b4a:	2800      	cmp	r0, #0
    3b4c:	d035      	beq.n	3bba <__aeabi_dsub+0x20e>
    3b4e:	4868      	ldr	r0, [pc, #416]	; (3cf0 <__aeabi_dsub+0x344>)
    3b50:	4286      	cmp	r6, r0
    3b52:	d0b1      	beq.n	3ab8 <__aeabi_dsub+0x10c>
    3b54:	2780      	movs	r7, #128	; 0x80
    3b56:	043f      	lsls	r7, r7, #16
    3b58:	4339      	orrs	r1, r7
    3b5a:	2b38      	cmp	r3, #56	; 0x38
    3b5c:	dc00      	bgt.n	3b60 <__aeabi_dsub+0x1b4>
    3b5e:	e0fd      	b.n	3d5c <__aeabi_dsub+0x3b0>
    3b60:	430a      	orrs	r2, r1
    3b62:	0017      	movs	r7, r2
    3b64:	2100      	movs	r1, #0
    3b66:	1e7a      	subs	r2, r7, #1
    3b68:	4197      	sbcs	r7, r2
    3b6a:	4457      	add	r7, sl
    3b6c:	4557      	cmp	r7, sl
    3b6e:	4180      	sbcs	r0, r0
    3b70:	1909      	adds	r1, r1, r4
    3b72:	4244      	negs	r4, r0
    3b74:	190c      	adds	r4, r1, r4
    3b76:	0223      	lsls	r3, r4, #8
    3b78:	d53a      	bpl.n	3bf0 <__aeabi_dsub+0x244>
    3b7a:	4b5d      	ldr	r3, [pc, #372]	; (3cf0 <__aeabi_dsub+0x344>)
    3b7c:	3601      	adds	r6, #1
    3b7e:	429e      	cmp	r6, r3
    3b80:	d100      	bne.n	3b84 <__aeabi_dsub+0x1d8>
    3b82:	e14b      	b.n	3e1c <__aeabi_dsub+0x470>
    3b84:	2201      	movs	r2, #1
    3b86:	4b5b      	ldr	r3, [pc, #364]	; (3cf4 <__aeabi_dsub+0x348>)
    3b88:	401c      	ands	r4, r3
    3b8a:	087b      	lsrs	r3, r7, #1
    3b8c:	4017      	ands	r7, r2
    3b8e:	431f      	orrs	r7, r3
    3b90:	07e2      	lsls	r2, r4, #31
    3b92:	4317      	orrs	r7, r2
    3b94:	0864      	lsrs	r4, r4, #1
    3b96:	e78f      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3b98:	0008      	movs	r0, r1
    3b9a:	4310      	orrs	r0, r2
    3b9c:	d000      	beq.n	3ba0 <__aeabi_dsub+0x1f4>
    3b9e:	e724      	b.n	39ea <__aeabi_dsub+0x3e>
    3ba0:	e721      	b.n	39e6 <__aeabi_dsub+0x3a>
    3ba2:	0023      	movs	r3, r4
    3ba4:	433b      	orrs	r3, r7
    3ba6:	d100      	bne.n	3baa <__aeabi_dsub+0x1fe>
    3ba8:	e1b9      	b.n	3f1e <__aeabi_dsub+0x572>
    3baa:	2280      	movs	r2, #128	; 0x80
    3bac:	0312      	lsls	r2, r2, #12
    3bae:	4314      	orrs	r4, r2
    3bb0:	0324      	lsls	r4, r4, #12
    3bb2:	0b24      	lsrs	r4, r4, #12
    3bb4:	e79f      	b.n	3af6 <__aeabi_dsub+0x14a>
    3bb6:	002e      	movs	r6, r5
    3bb8:	e77e      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3bba:	0008      	movs	r0, r1
    3bbc:	4310      	orrs	r0, r2
    3bbe:	d100      	bne.n	3bc2 <__aeabi_dsub+0x216>
    3bc0:	e0ca      	b.n	3d58 <__aeabi_dsub+0x3ac>
    3bc2:	1e58      	subs	r0, r3, #1
    3bc4:	4684      	mov	ip, r0
    3bc6:	2800      	cmp	r0, #0
    3bc8:	d000      	beq.n	3bcc <__aeabi_dsub+0x220>
    3bca:	e0e7      	b.n	3d9c <__aeabi_dsub+0x3f0>
    3bcc:	4452      	add	r2, sl
    3bce:	4552      	cmp	r2, sl
    3bd0:	4180      	sbcs	r0, r0
    3bd2:	1864      	adds	r4, r4, r1
    3bd4:	4240      	negs	r0, r0
    3bd6:	1824      	adds	r4, r4, r0
    3bd8:	0017      	movs	r7, r2
    3bda:	2601      	movs	r6, #1
    3bdc:	0223      	lsls	r3, r4, #8
    3bde:	d507      	bpl.n	3bf0 <__aeabi_dsub+0x244>
    3be0:	2602      	movs	r6, #2
    3be2:	e7cf      	b.n	3b84 <__aeabi_dsub+0x1d8>
    3be4:	4664      	mov	r4, ip
    3be6:	432c      	orrs	r4, r5
    3be8:	d100      	bne.n	3bec <__aeabi_dsub+0x240>
    3bea:	e1b3      	b.n	3f54 <__aeabi_dsub+0x5a8>
    3bec:	002c      	movs	r4, r5
    3bee:	4667      	mov	r7, ip
    3bf0:	077b      	lsls	r3, r7, #29
    3bf2:	d000      	beq.n	3bf6 <__aeabi_dsub+0x24a>
    3bf4:	e762      	b.n	3abc <__aeabi_dsub+0x110>
    3bf6:	0763      	lsls	r3, r4, #29
    3bf8:	08ff      	lsrs	r7, r7, #3
    3bfa:	431f      	orrs	r7, r3
    3bfc:	2501      	movs	r5, #1
    3bfe:	4643      	mov	r3, r8
    3c00:	08e4      	lsrs	r4, r4, #3
    3c02:	401d      	ands	r5, r3
    3c04:	e793      	b.n	3b2e <__aeabi_dsub+0x182>
    3c06:	2d00      	cmp	r5, #0
    3c08:	d178      	bne.n	3cfc <__aeabi_dsub+0x350>
    3c0a:	1c75      	adds	r5, r6, #1
    3c0c:	056d      	lsls	r5, r5, #21
    3c0e:	0d6d      	lsrs	r5, r5, #21
    3c10:	2d01      	cmp	r5, #1
    3c12:	dc00      	bgt.n	3c16 <__aeabi_dsub+0x26a>
    3c14:	e0f2      	b.n	3dfc <__aeabi_dsub+0x450>
    3c16:	4650      	mov	r0, sl
    3c18:	1a80      	subs	r0, r0, r2
    3c1a:	4582      	cmp	sl, r0
    3c1c:	41bf      	sbcs	r7, r7
    3c1e:	1a65      	subs	r5, r4, r1
    3c20:	427f      	negs	r7, r7
    3c22:	1bed      	subs	r5, r5, r7
    3c24:	4684      	mov	ip, r0
    3c26:	0228      	lsls	r0, r5, #8
    3c28:	d400      	bmi.n	3c2c <__aeabi_dsub+0x280>
    3c2a:	e08c      	b.n	3d46 <__aeabi_dsub+0x39a>
    3c2c:	4650      	mov	r0, sl
    3c2e:	1a17      	subs	r7, r2, r0
    3c30:	42ba      	cmp	r2, r7
    3c32:	4192      	sbcs	r2, r2
    3c34:	1b0c      	subs	r4, r1, r4
    3c36:	4255      	negs	r5, r2
    3c38:	1b65      	subs	r5, r4, r5
    3c3a:	4698      	mov	r8, r3
    3c3c:	e714      	b.n	3a68 <__aeabi_dsub+0xbc>
    3c3e:	2501      	movs	r5, #1
    3c40:	4643      	mov	r3, r8
    3c42:	2400      	movs	r4, #0
    3c44:	401d      	ands	r5, r3
    3c46:	2700      	movs	r7, #0
    3c48:	e755      	b.n	3af6 <__aeabi_dsub+0x14a>
    3c4a:	4c2a      	ldr	r4, [pc, #168]	; (3cf4 <__aeabi_dsub+0x348>)
    3c4c:	1af6      	subs	r6, r6, r3
    3c4e:	402c      	ands	r4, r5
    3c50:	e732      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3c52:	003d      	movs	r5, r7
    3c54:	3828      	subs	r0, #40	; 0x28
    3c56:	4085      	lsls	r5, r0
    3c58:	2700      	movs	r7, #0
    3c5a:	e717      	b.n	3a8c <__aeabi_dsub+0xe0>
    3c5c:	0038      	movs	r0, r7
    3c5e:	f000 faf3 	bl	4248 <__clzsi2>
    3c62:	3020      	adds	r0, #32
    3c64:	e706      	b.n	3a74 <__aeabi_dsub+0xc8>
    3c66:	430a      	orrs	r2, r1
    3c68:	0017      	movs	r7, r2
    3c6a:	2100      	movs	r1, #0
    3c6c:	1e7a      	subs	r2, r7, #1
    3c6e:	4197      	sbcs	r7, r2
    3c70:	e6ee      	b.n	3a50 <__aeabi_dsub+0xa4>
    3c72:	2b00      	cmp	r3, #0
    3c74:	d000      	beq.n	3c78 <__aeabi_dsub+0x2cc>
    3c76:	e0e5      	b.n	3e44 <__aeabi_dsub+0x498>
    3c78:	1c73      	adds	r3, r6, #1
    3c7a:	469c      	mov	ip, r3
    3c7c:	055b      	lsls	r3, r3, #21
    3c7e:	0d5b      	lsrs	r3, r3, #21
    3c80:	2b01      	cmp	r3, #1
    3c82:	dc00      	bgt.n	3c86 <__aeabi_dsub+0x2da>
    3c84:	e09f      	b.n	3dc6 <__aeabi_dsub+0x41a>
    3c86:	4b1a      	ldr	r3, [pc, #104]	; (3cf0 <__aeabi_dsub+0x344>)
    3c88:	459c      	cmp	ip, r3
    3c8a:	d100      	bne.n	3c8e <__aeabi_dsub+0x2e2>
    3c8c:	e0c5      	b.n	3e1a <__aeabi_dsub+0x46e>
    3c8e:	4452      	add	r2, sl
    3c90:	4552      	cmp	r2, sl
    3c92:	4180      	sbcs	r0, r0
    3c94:	1864      	adds	r4, r4, r1
    3c96:	4240      	negs	r0, r0
    3c98:	1824      	adds	r4, r4, r0
    3c9a:	07e7      	lsls	r7, r4, #31
    3c9c:	0852      	lsrs	r2, r2, #1
    3c9e:	4317      	orrs	r7, r2
    3ca0:	0864      	lsrs	r4, r4, #1
    3ca2:	4666      	mov	r6, ip
    3ca4:	e708      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3ca6:	4812      	ldr	r0, [pc, #72]	; (3cf0 <__aeabi_dsub+0x344>)
    3ca8:	4285      	cmp	r5, r0
    3caa:	d100      	bne.n	3cae <__aeabi_dsub+0x302>
    3cac:	e085      	b.n	3dba <__aeabi_dsub+0x40e>
    3cae:	001d      	movs	r5, r3
    3cb0:	e6bc      	b.n	3a2c <__aeabi_dsub+0x80>
    3cb2:	0029      	movs	r1, r5
    3cb4:	3e1f      	subs	r6, #31
    3cb6:	40f1      	lsrs	r1, r6
    3cb8:	2b20      	cmp	r3, #32
    3cba:	d100      	bne.n	3cbe <__aeabi_dsub+0x312>
    3cbc:	e07f      	b.n	3dbe <__aeabi_dsub+0x412>
    3cbe:	2240      	movs	r2, #64	; 0x40
    3cc0:	1ad3      	subs	r3, r2, r3
    3cc2:	409d      	lsls	r5, r3
    3cc4:	432f      	orrs	r7, r5
    3cc6:	1e7d      	subs	r5, r7, #1
    3cc8:	41af      	sbcs	r7, r5
    3cca:	2400      	movs	r4, #0
    3ccc:	430f      	orrs	r7, r1
    3cce:	2600      	movs	r6, #0
    3cd0:	e78e      	b.n	3bf0 <__aeabi_dsub+0x244>
    3cd2:	002b      	movs	r3, r5
    3cd4:	000f      	movs	r7, r1
    3cd6:	3b20      	subs	r3, #32
    3cd8:	40df      	lsrs	r7, r3
    3cda:	2d20      	cmp	r5, #32
    3cdc:	d071      	beq.n	3dc2 <__aeabi_dsub+0x416>
    3cde:	2340      	movs	r3, #64	; 0x40
    3ce0:	1b5d      	subs	r5, r3, r5
    3ce2:	40a9      	lsls	r1, r5
    3ce4:	430a      	orrs	r2, r1
    3ce6:	1e51      	subs	r1, r2, #1
    3ce8:	418a      	sbcs	r2, r1
    3cea:	2100      	movs	r1, #0
    3cec:	4317      	orrs	r7, r2
    3cee:	e6af      	b.n	3a50 <__aeabi_dsub+0xa4>
    3cf0:	000007ff 	.word	0x000007ff
    3cf4:	ff7fffff 	.word	0xff7fffff
    3cf8:	800fffff 	.word	0x800fffff
    3cfc:	2e00      	cmp	r6, #0
    3cfe:	d03e      	beq.n	3d7e <__aeabi_dsub+0x3d2>
    3d00:	4eb3      	ldr	r6, [pc, #716]	; (3fd0 <__aeabi_dsub+0x624>)
    3d02:	45b4      	cmp	ip, r6
    3d04:	d045      	beq.n	3d92 <__aeabi_dsub+0x3e6>
    3d06:	2680      	movs	r6, #128	; 0x80
    3d08:	0436      	lsls	r6, r6, #16
    3d0a:	426d      	negs	r5, r5
    3d0c:	4334      	orrs	r4, r6
    3d0e:	2d38      	cmp	r5, #56	; 0x38
    3d10:	dd00      	ble.n	3d14 <__aeabi_dsub+0x368>
    3d12:	e0a8      	b.n	3e66 <__aeabi_dsub+0x4ba>
    3d14:	2d1f      	cmp	r5, #31
    3d16:	dd00      	ble.n	3d1a <__aeabi_dsub+0x36e>
    3d18:	e11f      	b.n	3f5a <__aeabi_dsub+0x5ae>
    3d1a:	2620      	movs	r6, #32
    3d1c:	0027      	movs	r7, r4
    3d1e:	4650      	mov	r0, sl
    3d20:	1b76      	subs	r6, r6, r5
    3d22:	40b7      	lsls	r7, r6
    3d24:	40e8      	lsrs	r0, r5
    3d26:	4307      	orrs	r7, r0
    3d28:	4650      	mov	r0, sl
    3d2a:	40b0      	lsls	r0, r6
    3d2c:	1e46      	subs	r6, r0, #1
    3d2e:	41b0      	sbcs	r0, r6
    3d30:	40ec      	lsrs	r4, r5
    3d32:	4338      	orrs	r0, r7
    3d34:	1a17      	subs	r7, r2, r0
    3d36:	42ba      	cmp	r2, r7
    3d38:	4192      	sbcs	r2, r2
    3d3a:	1b0c      	subs	r4, r1, r4
    3d3c:	4252      	negs	r2, r2
    3d3e:	1aa4      	subs	r4, r4, r2
    3d40:	4666      	mov	r6, ip
    3d42:	4698      	mov	r8, r3
    3d44:	e68b      	b.n	3a5e <__aeabi_dsub+0xb2>
    3d46:	4664      	mov	r4, ip
    3d48:	4667      	mov	r7, ip
    3d4a:	432c      	orrs	r4, r5
    3d4c:	d000      	beq.n	3d50 <__aeabi_dsub+0x3a4>
    3d4e:	e68b      	b.n	3a68 <__aeabi_dsub+0xbc>
    3d50:	2500      	movs	r5, #0
    3d52:	2600      	movs	r6, #0
    3d54:	2700      	movs	r7, #0
    3d56:	e6ea      	b.n	3b2e <__aeabi_dsub+0x182>
    3d58:	001e      	movs	r6, r3
    3d5a:	e6ad      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3d5c:	2b1f      	cmp	r3, #31
    3d5e:	dc60      	bgt.n	3e22 <__aeabi_dsub+0x476>
    3d60:	2720      	movs	r7, #32
    3d62:	1af8      	subs	r0, r7, r3
    3d64:	000f      	movs	r7, r1
    3d66:	4684      	mov	ip, r0
    3d68:	4087      	lsls	r7, r0
    3d6a:	0010      	movs	r0, r2
    3d6c:	40d8      	lsrs	r0, r3
    3d6e:	4307      	orrs	r7, r0
    3d70:	4660      	mov	r0, ip
    3d72:	4082      	lsls	r2, r0
    3d74:	1e50      	subs	r0, r2, #1
    3d76:	4182      	sbcs	r2, r0
    3d78:	40d9      	lsrs	r1, r3
    3d7a:	4317      	orrs	r7, r2
    3d7c:	e6f5      	b.n	3b6a <__aeabi_dsub+0x1be>
    3d7e:	0026      	movs	r6, r4
    3d80:	4650      	mov	r0, sl
    3d82:	4306      	orrs	r6, r0
    3d84:	d005      	beq.n	3d92 <__aeabi_dsub+0x3e6>
    3d86:	43ed      	mvns	r5, r5
    3d88:	2d00      	cmp	r5, #0
    3d8a:	d0d3      	beq.n	3d34 <__aeabi_dsub+0x388>
    3d8c:	4e90      	ldr	r6, [pc, #576]	; (3fd0 <__aeabi_dsub+0x624>)
    3d8e:	45b4      	cmp	ip, r6
    3d90:	d1bd      	bne.n	3d0e <__aeabi_dsub+0x362>
    3d92:	000c      	movs	r4, r1
    3d94:	0017      	movs	r7, r2
    3d96:	4666      	mov	r6, ip
    3d98:	4698      	mov	r8, r3
    3d9a:	e68d      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3d9c:	488c      	ldr	r0, [pc, #560]	; (3fd0 <__aeabi_dsub+0x624>)
    3d9e:	4283      	cmp	r3, r0
    3da0:	d00b      	beq.n	3dba <__aeabi_dsub+0x40e>
    3da2:	4663      	mov	r3, ip
    3da4:	e6d9      	b.n	3b5a <__aeabi_dsub+0x1ae>
    3da6:	2d00      	cmp	r5, #0
    3da8:	d000      	beq.n	3dac <__aeabi_dsub+0x400>
    3daa:	e096      	b.n	3eda <__aeabi_dsub+0x52e>
    3dac:	0008      	movs	r0, r1
    3dae:	4310      	orrs	r0, r2
    3db0:	d100      	bne.n	3db4 <__aeabi_dsub+0x408>
    3db2:	e0e2      	b.n	3f7a <__aeabi_dsub+0x5ce>
    3db4:	000c      	movs	r4, r1
    3db6:	0017      	movs	r7, r2
    3db8:	4698      	mov	r8, r3
    3dba:	4e85      	ldr	r6, [pc, #532]	; (3fd0 <__aeabi_dsub+0x624>)
    3dbc:	e67c      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3dbe:	2500      	movs	r5, #0
    3dc0:	e780      	b.n	3cc4 <__aeabi_dsub+0x318>
    3dc2:	2100      	movs	r1, #0
    3dc4:	e78e      	b.n	3ce4 <__aeabi_dsub+0x338>
    3dc6:	0023      	movs	r3, r4
    3dc8:	4650      	mov	r0, sl
    3dca:	4303      	orrs	r3, r0
    3dcc:	2e00      	cmp	r6, #0
    3dce:	d000      	beq.n	3dd2 <__aeabi_dsub+0x426>
    3dd0:	e0a8      	b.n	3f24 <__aeabi_dsub+0x578>
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d100      	bne.n	3dd8 <__aeabi_dsub+0x42c>
    3dd6:	e0de      	b.n	3f96 <__aeabi_dsub+0x5ea>
    3dd8:	000b      	movs	r3, r1
    3dda:	4313      	orrs	r3, r2
    3ddc:	d100      	bne.n	3de0 <__aeabi_dsub+0x434>
    3dde:	e66b      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3de0:	4452      	add	r2, sl
    3de2:	4552      	cmp	r2, sl
    3de4:	4180      	sbcs	r0, r0
    3de6:	1864      	adds	r4, r4, r1
    3de8:	4240      	negs	r0, r0
    3dea:	1824      	adds	r4, r4, r0
    3dec:	0017      	movs	r7, r2
    3dee:	0223      	lsls	r3, r4, #8
    3df0:	d400      	bmi.n	3df4 <__aeabi_dsub+0x448>
    3df2:	e6fd      	b.n	3bf0 <__aeabi_dsub+0x244>
    3df4:	4b77      	ldr	r3, [pc, #476]	; (3fd4 <__aeabi_dsub+0x628>)
    3df6:	4666      	mov	r6, ip
    3df8:	401c      	ands	r4, r3
    3dfa:	e65d      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3dfc:	0025      	movs	r5, r4
    3dfe:	4650      	mov	r0, sl
    3e00:	4305      	orrs	r5, r0
    3e02:	2e00      	cmp	r6, #0
    3e04:	d1cf      	bne.n	3da6 <__aeabi_dsub+0x3fa>
    3e06:	2d00      	cmp	r5, #0
    3e08:	d14f      	bne.n	3eaa <__aeabi_dsub+0x4fe>
    3e0a:	000c      	movs	r4, r1
    3e0c:	4314      	orrs	r4, r2
    3e0e:	d100      	bne.n	3e12 <__aeabi_dsub+0x466>
    3e10:	e0a0      	b.n	3f54 <__aeabi_dsub+0x5a8>
    3e12:	000c      	movs	r4, r1
    3e14:	0017      	movs	r7, r2
    3e16:	4698      	mov	r8, r3
    3e18:	e64e      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3e1a:	4666      	mov	r6, ip
    3e1c:	2400      	movs	r4, #0
    3e1e:	2700      	movs	r7, #0
    3e20:	e685      	b.n	3b2e <__aeabi_dsub+0x182>
    3e22:	001f      	movs	r7, r3
    3e24:	0008      	movs	r0, r1
    3e26:	3f20      	subs	r7, #32
    3e28:	40f8      	lsrs	r0, r7
    3e2a:	0007      	movs	r7, r0
    3e2c:	2b20      	cmp	r3, #32
    3e2e:	d100      	bne.n	3e32 <__aeabi_dsub+0x486>
    3e30:	e08e      	b.n	3f50 <__aeabi_dsub+0x5a4>
    3e32:	2040      	movs	r0, #64	; 0x40
    3e34:	1ac3      	subs	r3, r0, r3
    3e36:	4099      	lsls	r1, r3
    3e38:	430a      	orrs	r2, r1
    3e3a:	1e51      	subs	r1, r2, #1
    3e3c:	418a      	sbcs	r2, r1
    3e3e:	2100      	movs	r1, #0
    3e40:	4317      	orrs	r7, r2
    3e42:	e692      	b.n	3b6a <__aeabi_dsub+0x1be>
    3e44:	2e00      	cmp	r6, #0
    3e46:	d114      	bne.n	3e72 <__aeabi_dsub+0x4c6>
    3e48:	0026      	movs	r6, r4
    3e4a:	4650      	mov	r0, sl
    3e4c:	4306      	orrs	r6, r0
    3e4e:	d062      	beq.n	3f16 <__aeabi_dsub+0x56a>
    3e50:	43db      	mvns	r3, r3
    3e52:	2b00      	cmp	r3, #0
    3e54:	d15c      	bne.n	3f10 <__aeabi_dsub+0x564>
    3e56:	1887      	adds	r7, r0, r2
    3e58:	4297      	cmp	r7, r2
    3e5a:	4192      	sbcs	r2, r2
    3e5c:	1864      	adds	r4, r4, r1
    3e5e:	4252      	negs	r2, r2
    3e60:	18a4      	adds	r4, r4, r2
    3e62:	4666      	mov	r6, ip
    3e64:	e687      	b.n	3b76 <__aeabi_dsub+0x1ca>
    3e66:	4650      	mov	r0, sl
    3e68:	4320      	orrs	r0, r4
    3e6a:	1e44      	subs	r4, r0, #1
    3e6c:	41a0      	sbcs	r0, r4
    3e6e:	2400      	movs	r4, #0
    3e70:	e760      	b.n	3d34 <__aeabi_dsub+0x388>
    3e72:	4e57      	ldr	r6, [pc, #348]	; (3fd0 <__aeabi_dsub+0x624>)
    3e74:	45b4      	cmp	ip, r6
    3e76:	d04e      	beq.n	3f16 <__aeabi_dsub+0x56a>
    3e78:	2680      	movs	r6, #128	; 0x80
    3e7a:	0436      	lsls	r6, r6, #16
    3e7c:	425b      	negs	r3, r3
    3e7e:	4334      	orrs	r4, r6
    3e80:	2b38      	cmp	r3, #56	; 0x38
    3e82:	dd00      	ble.n	3e86 <__aeabi_dsub+0x4da>
    3e84:	e07f      	b.n	3f86 <__aeabi_dsub+0x5da>
    3e86:	2b1f      	cmp	r3, #31
    3e88:	dd00      	ble.n	3e8c <__aeabi_dsub+0x4e0>
    3e8a:	e08b      	b.n	3fa4 <__aeabi_dsub+0x5f8>
    3e8c:	2620      	movs	r6, #32
    3e8e:	0027      	movs	r7, r4
    3e90:	4650      	mov	r0, sl
    3e92:	1af6      	subs	r6, r6, r3
    3e94:	40b7      	lsls	r7, r6
    3e96:	40d8      	lsrs	r0, r3
    3e98:	4307      	orrs	r7, r0
    3e9a:	4650      	mov	r0, sl
    3e9c:	40b0      	lsls	r0, r6
    3e9e:	1e46      	subs	r6, r0, #1
    3ea0:	41b0      	sbcs	r0, r6
    3ea2:	4307      	orrs	r7, r0
    3ea4:	40dc      	lsrs	r4, r3
    3ea6:	18bf      	adds	r7, r7, r2
    3ea8:	e7d6      	b.n	3e58 <__aeabi_dsub+0x4ac>
    3eaa:	000d      	movs	r5, r1
    3eac:	4315      	orrs	r5, r2
    3eae:	d100      	bne.n	3eb2 <__aeabi_dsub+0x506>
    3eb0:	e602      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3eb2:	4650      	mov	r0, sl
    3eb4:	1a80      	subs	r0, r0, r2
    3eb6:	4582      	cmp	sl, r0
    3eb8:	41bf      	sbcs	r7, r7
    3eba:	1a65      	subs	r5, r4, r1
    3ebc:	427f      	negs	r7, r7
    3ebe:	1bed      	subs	r5, r5, r7
    3ec0:	4684      	mov	ip, r0
    3ec2:	0228      	lsls	r0, r5, #8
    3ec4:	d400      	bmi.n	3ec8 <__aeabi_dsub+0x51c>
    3ec6:	e68d      	b.n	3be4 <__aeabi_dsub+0x238>
    3ec8:	4650      	mov	r0, sl
    3eca:	1a17      	subs	r7, r2, r0
    3ecc:	42ba      	cmp	r2, r7
    3ece:	4192      	sbcs	r2, r2
    3ed0:	1b0c      	subs	r4, r1, r4
    3ed2:	4252      	negs	r2, r2
    3ed4:	1aa4      	subs	r4, r4, r2
    3ed6:	4698      	mov	r8, r3
    3ed8:	e5ee      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3eda:	000d      	movs	r5, r1
    3edc:	4315      	orrs	r5, r2
    3ede:	d100      	bne.n	3ee2 <__aeabi_dsub+0x536>
    3ee0:	e76b      	b.n	3dba <__aeabi_dsub+0x40e>
    3ee2:	4650      	mov	r0, sl
    3ee4:	0767      	lsls	r7, r4, #29
    3ee6:	08c0      	lsrs	r0, r0, #3
    3ee8:	4307      	orrs	r7, r0
    3eea:	2080      	movs	r0, #128	; 0x80
    3eec:	08e4      	lsrs	r4, r4, #3
    3eee:	0300      	lsls	r0, r0, #12
    3ef0:	4204      	tst	r4, r0
    3ef2:	d007      	beq.n	3f04 <__aeabi_dsub+0x558>
    3ef4:	08cd      	lsrs	r5, r1, #3
    3ef6:	4205      	tst	r5, r0
    3ef8:	d104      	bne.n	3f04 <__aeabi_dsub+0x558>
    3efa:	002c      	movs	r4, r5
    3efc:	4698      	mov	r8, r3
    3efe:	08d7      	lsrs	r7, r2, #3
    3f00:	0749      	lsls	r1, r1, #29
    3f02:	430f      	orrs	r7, r1
    3f04:	0f7b      	lsrs	r3, r7, #29
    3f06:	00e4      	lsls	r4, r4, #3
    3f08:	431c      	orrs	r4, r3
    3f0a:	00ff      	lsls	r7, r7, #3
    3f0c:	4e30      	ldr	r6, [pc, #192]	; (3fd0 <__aeabi_dsub+0x624>)
    3f0e:	e5d3      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3f10:	4e2f      	ldr	r6, [pc, #188]	; (3fd0 <__aeabi_dsub+0x624>)
    3f12:	45b4      	cmp	ip, r6
    3f14:	d1b4      	bne.n	3e80 <__aeabi_dsub+0x4d4>
    3f16:	000c      	movs	r4, r1
    3f18:	0017      	movs	r7, r2
    3f1a:	4666      	mov	r6, ip
    3f1c:	e5cc      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3f1e:	2700      	movs	r7, #0
    3f20:	2400      	movs	r4, #0
    3f22:	e5e8      	b.n	3af6 <__aeabi_dsub+0x14a>
    3f24:	2b00      	cmp	r3, #0
    3f26:	d039      	beq.n	3f9c <__aeabi_dsub+0x5f0>
    3f28:	000b      	movs	r3, r1
    3f2a:	4313      	orrs	r3, r2
    3f2c:	d100      	bne.n	3f30 <__aeabi_dsub+0x584>
    3f2e:	e744      	b.n	3dba <__aeabi_dsub+0x40e>
    3f30:	08c0      	lsrs	r0, r0, #3
    3f32:	0767      	lsls	r7, r4, #29
    3f34:	4307      	orrs	r7, r0
    3f36:	2080      	movs	r0, #128	; 0x80
    3f38:	08e4      	lsrs	r4, r4, #3
    3f3a:	0300      	lsls	r0, r0, #12
    3f3c:	4204      	tst	r4, r0
    3f3e:	d0e1      	beq.n	3f04 <__aeabi_dsub+0x558>
    3f40:	08cb      	lsrs	r3, r1, #3
    3f42:	4203      	tst	r3, r0
    3f44:	d1de      	bne.n	3f04 <__aeabi_dsub+0x558>
    3f46:	08d7      	lsrs	r7, r2, #3
    3f48:	0749      	lsls	r1, r1, #29
    3f4a:	430f      	orrs	r7, r1
    3f4c:	001c      	movs	r4, r3
    3f4e:	e7d9      	b.n	3f04 <__aeabi_dsub+0x558>
    3f50:	2100      	movs	r1, #0
    3f52:	e771      	b.n	3e38 <__aeabi_dsub+0x48c>
    3f54:	2500      	movs	r5, #0
    3f56:	2700      	movs	r7, #0
    3f58:	e5e9      	b.n	3b2e <__aeabi_dsub+0x182>
    3f5a:	002e      	movs	r6, r5
    3f5c:	0027      	movs	r7, r4
    3f5e:	3e20      	subs	r6, #32
    3f60:	40f7      	lsrs	r7, r6
    3f62:	2d20      	cmp	r5, #32
    3f64:	d02f      	beq.n	3fc6 <__aeabi_dsub+0x61a>
    3f66:	2640      	movs	r6, #64	; 0x40
    3f68:	1b75      	subs	r5, r6, r5
    3f6a:	40ac      	lsls	r4, r5
    3f6c:	4650      	mov	r0, sl
    3f6e:	4320      	orrs	r0, r4
    3f70:	1e44      	subs	r4, r0, #1
    3f72:	41a0      	sbcs	r0, r4
    3f74:	2400      	movs	r4, #0
    3f76:	4338      	orrs	r0, r7
    3f78:	e6dc      	b.n	3d34 <__aeabi_dsub+0x388>
    3f7a:	2480      	movs	r4, #128	; 0x80
    3f7c:	2500      	movs	r5, #0
    3f7e:	0324      	lsls	r4, r4, #12
    3f80:	4e13      	ldr	r6, [pc, #76]	; (3fd0 <__aeabi_dsub+0x624>)
    3f82:	2700      	movs	r7, #0
    3f84:	e5d3      	b.n	3b2e <__aeabi_dsub+0x182>
    3f86:	4650      	mov	r0, sl
    3f88:	4320      	orrs	r0, r4
    3f8a:	0007      	movs	r7, r0
    3f8c:	1e78      	subs	r0, r7, #1
    3f8e:	4187      	sbcs	r7, r0
    3f90:	2400      	movs	r4, #0
    3f92:	18bf      	adds	r7, r7, r2
    3f94:	e760      	b.n	3e58 <__aeabi_dsub+0x4ac>
    3f96:	000c      	movs	r4, r1
    3f98:	0017      	movs	r7, r2
    3f9a:	e58d      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3f9c:	000c      	movs	r4, r1
    3f9e:	0017      	movs	r7, r2
    3fa0:	4e0b      	ldr	r6, [pc, #44]	; (3fd0 <__aeabi_dsub+0x624>)
    3fa2:	e589      	b.n	3ab8 <__aeabi_dsub+0x10c>
    3fa4:	001e      	movs	r6, r3
    3fa6:	0027      	movs	r7, r4
    3fa8:	3e20      	subs	r6, #32
    3faa:	40f7      	lsrs	r7, r6
    3fac:	2b20      	cmp	r3, #32
    3fae:	d00c      	beq.n	3fca <__aeabi_dsub+0x61e>
    3fb0:	2640      	movs	r6, #64	; 0x40
    3fb2:	1af3      	subs	r3, r6, r3
    3fb4:	409c      	lsls	r4, r3
    3fb6:	4650      	mov	r0, sl
    3fb8:	4320      	orrs	r0, r4
    3fba:	1e44      	subs	r4, r0, #1
    3fbc:	41a0      	sbcs	r0, r4
    3fbe:	4307      	orrs	r7, r0
    3fc0:	2400      	movs	r4, #0
    3fc2:	18bf      	adds	r7, r7, r2
    3fc4:	e748      	b.n	3e58 <__aeabi_dsub+0x4ac>
    3fc6:	2400      	movs	r4, #0
    3fc8:	e7d0      	b.n	3f6c <__aeabi_dsub+0x5c0>
    3fca:	2400      	movs	r4, #0
    3fcc:	e7f3      	b.n	3fb6 <__aeabi_dsub+0x60a>
    3fce:	46c0      	nop			; (mov r8, r8)
    3fd0:	000007ff 	.word	0x000007ff
    3fd4:	ff7fffff 	.word	0xff7fffff

00003fd8 <__aeabi_d2iz>:
    3fd8:	b530      	push	{r4, r5, lr}
    3fda:	4d13      	ldr	r5, [pc, #76]	; (4028 <__aeabi_d2iz+0x50>)
    3fdc:	030a      	lsls	r2, r1, #12
    3fde:	004b      	lsls	r3, r1, #1
    3fe0:	0b12      	lsrs	r2, r2, #12
    3fe2:	0d5b      	lsrs	r3, r3, #21
    3fe4:	0fc9      	lsrs	r1, r1, #31
    3fe6:	2400      	movs	r4, #0
    3fe8:	42ab      	cmp	r3, r5
    3fea:	dd10      	ble.n	400e <__aeabi_d2iz+0x36>
    3fec:	4c0f      	ldr	r4, [pc, #60]	; (402c <__aeabi_d2iz+0x54>)
    3fee:	42a3      	cmp	r3, r4
    3ff0:	dc0f      	bgt.n	4012 <__aeabi_d2iz+0x3a>
    3ff2:	2480      	movs	r4, #128	; 0x80
    3ff4:	4d0e      	ldr	r5, [pc, #56]	; (4030 <__aeabi_d2iz+0x58>)
    3ff6:	0364      	lsls	r4, r4, #13
    3ff8:	4322      	orrs	r2, r4
    3ffa:	1aed      	subs	r5, r5, r3
    3ffc:	2d1f      	cmp	r5, #31
    3ffe:	dd0b      	ble.n	4018 <__aeabi_d2iz+0x40>
    4000:	480c      	ldr	r0, [pc, #48]	; (4034 <__aeabi_d2iz+0x5c>)
    4002:	1ac3      	subs	r3, r0, r3
    4004:	40da      	lsrs	r2, r3
    4006:	4254      	negs	r4, r2
    4008:	2900      	cmp	r1, #0
    400a:	d100      	bne.n	400e <__aeabi_d2iz+0x36>
    400c:	0014      	movs	r4, r2
    400e:	0020      	movs	r0, r4
    4010:	bd30      	pop	{r4, r5, pc}
    4012:	4b09      	ldr	r3, [pc, #36]	; (4038 <__aeabi_d2iz+0x60>)
    4014:	18cc      	adds	r4, r1, r3
    4016:	e7fa      	b.n	400e <__aeabi_d2iz+0x36>
    4018:	4c08      	ldr	r4, [pc, #32]	; (403c <__aeabi_d2iz+0x64>)
    401a:	40e8      	lsrs	r0, r5
    401c:	46a4      	mov	ip, r4
    401e:	4463      	add	r3, ip
    4020:	409a      	lsls	r2, r3
    4022:	4302      	orrs	r2, r0
    4024:	e7ef      	b.n	4006 <__aeabi_d2iz+0x2e>
    4026:	46c0      	nop			; (mov r8, r8)
    4028:	000003fe 	.word	0x000003fe
    402c:	0000041d 	.word	0x0000041d
    4030:	00000433 	.word	0x00000433
    4034:	00000413 	.word	0x00000413
    4038:	7fffffff 	.word	0x7fffffff
    403c:	fffffbed 	.word	0xfffffbed

00004040 <__aeabi_i2d>:
    4040:	b570      	push	{r4, r5, r6, lr}
    4042:	2800      	cmp	r0, #0
    4044:	d030      	beq.n	40a8 <__aeabi_i2d+0x68>
    4046:	17c3      	asrs	r3, r0, #31
    4048:	18c4      	adds	r4, r0, r3
    404a:	405c      	eors	r4, r3
    404c:	0fc5      	lsrs	r5, r0, #31
    404e:	0020      	movs	r0, r4
    4050:	f000 f8fa 	bl	4248 <__clzsi2>
    4054:	4b17      	ldr	r3, [pc, #92]	; (40b4 <__aeabi_i2d+0x74>)
    4056:	4a18      	ldr	r2, [pc, #96]	; (40b8 <__aeabi_i2d+0x78>)
    4058:	1a1b      	subs	r3, r3, r0
    405a:	1ad2      	subs	r2, r2, r3
    405c:	2a1f      	cmp	r2, #31
    405e:	dd18      	ble.n	4092 <__aeabi_i2d+0x52>
    4060:	4a16      	ldr	r2, [pc, #88]	; (40bc <__aeabi_i2d+0x7c>)
    4062:	1ad2      	subs	r2, r2, r3
    4064:	4094      	lsls	r4, r2
    4066:	2200      	movs	r2, #0
    4068:	0324      	lsls	r4, r4, #12
    406a:	055b      	lsls	r3, r3, #21
    406c:	0b24      	lsrs	r4, r4, #12
    406e:	0d5b      	lsrs	r3, r3, #21
    4070:	2100      	movs	r1, #0
    4072:	0010      	movs	r0, r2
    4074:	0324      	lsls	r4, r4, #12
    4076:	0d0a      	lsrs	r2, r1, #20
    4078:	0b24      	lsrs	r4, r4, #12
    407a:	0512      	lsls	r2, r2, #20
    407c:	4322      	orrs	r2, r4
    407e:	4c10      	ldr	r4, [pc, #64]	; (40c0 <__aeabi_i2d+0x80>)
    4080:	051b      	lsls	r3, r3, #20
    4082:	4022      	ands	r2, r4
    4084:	4313      	orrs	r3, r2
    4086:	005b      	lsls	r3, r3, #1
    4088:	07ed      	lsls	r5, r5, #31
    408a:	085b      	lsrs	r3, r3, #1
    408c:	432b      	orrs	r3, r5
    408e:	0019      	movs	r1, r3
    4090:	bd70      	pop	{r4, r5, r6, pc}
    4092:	0021      	movs	r1, r4
    4094:	4091      	lsls	r1, r2
    4096:	000a      	movs	r2, r1
    4098:	210b      	movs	r1, #11
    409a:	1a08      	subs	r0, r1, r0
    409c:	40c4      	lsrs	r4, r0
    409e:	055b      	lsls	r3, r3, #21
    40a0:	0324      	lsls	r4, r4, #12
    40a2:	0b24      	lsrs	r4, r4, #12
    40a4:	0d5b      	lsrs	r3, r3, #21
    40a6:	e7e3      	b.n	4070 <__aeabi_i2d+0x30>
    40a8:	2500      	movs	r5, #0
    40aa:	2300      	movs	r3, #0
    40ac:	2400      	movs	r4, #0
    40ae:	2200      	movs	r2, #0
    40b0:	e7de      	b.n	4070 <__aeabi_i2d+0x30>
    40b2:	46c0      	nop			; (mov r8, r8)
    40b4:	0000041e 	.word	0x0000041e
    40b8:	00000433 	.word	0x00000433
    40bc:	00000413 	.word	0x00000413
    40c0:	800fffff 	.word	0x800fffff

000040c4 <__aeabi_ui2d>:
    40c4:	b510      	push	{r4, lr}
    40c6:	1e04      	subs	r4, r0, #0
    40c8:	d028      	beq.n	411c <__aeabi_ui2d+0x58>
    40ca:	f000 f8bd 	bl	4248 <__clzsi2>
    40ce:	4b15      	ldr	r3, [pc, #84]	; (4124 <__aeabi_ui2d+0x60>)
    40d0:	4a15      	ldr	r2, [pc, #84]	; (4128 <__aeabi_ui2d+0x64>)
    40d2:	1a1b      	subs	r3, r3, r0
    40d4:	1ad2      	subs	r2, r2, r3
    40d6:	2a1f      	cmp	r2, #31
    40d8:	dd15      	ble.n	4106 <__aeabi_ui2d+0x42>
    40da:	4a14      	ldr	r2, [pc, #80]	; (412c <__aeabi_ui2d+0x68>)
    40dc:	1ad2      	subs	r2, r2, r3
    40de:	4094      	lsls	r4, r2
    40e0:	2200      	movs	r2, #0
    40e2:	0324      	lsls	r4, r4, #12
    40e4:	055b      	lsls	r3, r3, #21
    40e6:	0b24      	lsrs	r4, r4, #12
    40e8:	0d5b      	lsrs	r3, r3, #21
    40ea:	2100      	movs	r1, #0
    40ec:	0010      	movs	r0, r2
    40ee:	0324      	lsls	r4, r4, #12
    40f0:	0d0a      	lsrs	r2, r1, #20
    40f2:	0b24      	lsrs	r4, r4, #12
    40f4:	0512      	lsls	r2, r2, #20
    40f6:	4322      	orrs	r2, r4
    40f8:	4c0d      	ldr	r4, [pc, #52]	; (4130 <__aeabi_ui2d+0x6c>)
    40fa:	051b      	lsls	r3, r3, #20
    40fc:	4022      	ands	r2, r4
    40fe:	4313      	orrs	r3, r2
    4100:	005b      	lsls	r3, r3, #1
    4102:	0859      	lsrs	r1, r3, #1
    4104:	bd10      	pop	{r4, pc}
    4106:	0021      	movs	r1, r4
    4108:	4091      	lsls	r1, r2
    410a:	000a      	movs	r2, r1
    410c:	210b      	movs	r1, #11
    410e:	1a08      	subs	r0, r1, r0
    4110:	40c4      	lsrs	r4, r0
    4112:	055b      	lsls	r3, r3, #21
    4114:	0324      	lsls	r4, r4, #12
    4116:	0b24      	lsrs	r4, r4, #12
    4118:	0d5b      	lsrs	r3, r3, #21
    411a:	e7e6      	b.n	40ea <__aeabi_ui2d+0x26>
    411c:	2300      	movs	r3, #0
    411e:	2400      	movs	r4, #0
    4120:	2200      	movs	r2, #0
    4122:	e7e2      	b.n	40ea <__aeabi_ui2d+0x26>
    4124:	0000041e 	.word	0x0000041e
    4128:	00000433 	.word	0x00000433
    412c:	00000413 	.word	0x00000413
    4130:	800fffff 	.word	0x800fffff

00004134 <__aeabi_d2f>:
    4134:	b5f0      	push	{r4, r5, r6, r7, lr}
    4136:	004c      	lsls	r4, r1, #1
    4138:	0d64      	lsrs	r4, r4, #21
    413a:	030b      	lsls	r3, r1, #12
    413c:	1c62      	adds	r2, r4, #1
    413e:	0f45      	lsrs	r5, r0, #29
    4140:	0a5b      	lsrs	r3, r3, #9
    4142:	0552      	lsls	r2, r2, #21
    4144:	432b      	orrs	r3, r5
    4146:	0fc9      	lsrs	r1, r1, #31
    4148:	00c5      	lsls	r5, r0, #3
    414a:	0d52      	lsrs	r2, r2, #21
    414c:	2a01      	cmp	r2, #1
    414e:	dd28      	ble.n	41a2 <__aeabi_d2f+0x6e>
    4150:	4a3a      	ldr	r2, [pc, #232]	; (423c <__aeabi_d2f+0x108>)
    4152:	18a6      	adds	r6, r4, r2
    4154:	2efe      	cmp	r6, #254	; 0xfe
    4156:	dc1b      	bgt.n	4190 <__aeabi_d2f+0x5c>
    4158:	2e00      	cmp	r6, #0
    415a:	dd3e      	ble.n	41da <__aeabi_d2f+0xa6>
    415c:	0180      	lsls	r0, r0, #6
    415e:	0002      	movs	r2, r0
    4160:	1e50      	subs	r0, r2, #1
    4162:	4182      	sbcs	r2, r0
    4164:	0f6d      	lsrs	r5, r5, #29
    4166:	432a      	orrs	r2, r5
    4168:	00db      	lsls	r3, r3, #3
    416a:	4313      	orrs	r3, r2
    416c:	075a      	lsls	r2, r3, #29
    416e:	d004      	beq.n	417a <__aeabi_d2f+0x46>
    4170:	220f      	movs	r2, #15
    4172:	401a      	ands	r2, r3
    4174:	2a04      	cmp	r2, #4
    4176:	d000      	beq.n	417a <__aeabi_d2f+0x46>
    4178:	3304      	adds	r3, #4
    417a:	2280      	movs	r2, #128	; 0x80
    417c:	04d2      	lsls	r2, r2, #19
    417e:	401a      	ands	r2, r3
    4180:	d05a      	beq.n	4238 <__aeabi_d2f+0x104>
    4182:	3601      	adds	r6, #1
    4184:	2eff      	cmp	r6, #255	; 0xff
    4186:	d003      	beq.n	4190 <__aeabi_d2f+0x5c>
    4188:	019b      	lsls	r3, r3, #6
    418a:	0a5b      	lsrs	r3, r3, #9
    418c:	b2f4      	uxtb	r4, r6
    418e:	e001      	b.n	4194 <__aeabi_d2f+0x60>
    4190:	24ff      	movs	r4, #255	; 0xff
    4192:	2300      	movs	r3, #0
    4194:	0258      	lsls	r0, r3, #9
    4196:	05e4      	lsls	r4, r4, #23
    4198:	0a40      	lsrs	r0, r0, #9
    419a:	07c9      	lsls	r1, r1, #31
    419c:	4320      	orrs	r0, r4
    419e:	4308      	orrs	r0, r1
    41a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41a2:	2c00      	cmp	r4, #0
    41a4:	d007      	beq.n	41b6 <__aeabi_d2f+0x82>
    41a6:	431d      	orrs	r5, r3
    41a8:	d0f2      	beq.n	4190 <__aeabi_d2f+0x5c>
    41aa:	2080      	movs	r0, #128	; 0x80
    41ac:	00db      	lsls	r3, r3, #3
    41ae:	0480      	lsls	r0, r0, #18
    41b0:	4303      	orrs	r3, r0
    41b2:	26ff      	movs	r6, #255	; 0xff
    41b4:	e7da      	b.n	416c <__aeabi_d2f+0x38>
    41b6:	432b      	orrs	r3, r5
    41b8:	d003      	beq.n	41c2 <__aeabi_d2f+0x8e>
    41ba:	2305      	movs	r3, #5
    41bc:	08db      	lsrs	r3, r3, #3
    41be:	2cff      	cmp	r4, #255	; 0xff
    41c0:	d003      	beq.n	41ca <__aeabi_d2f+0x96>
    41c2:	025b      	lsls	r3, r3, #9
    41c4:	0a5b      	lsrs	r3, r3, #9
    41c6:	b2e4      	uxtb	r4, r4
    41c8:	e7e4      	b.n	4194 <__aeabi_d2f+0x60>
    41ca:	2b00      	cmp	r3, #0
    41cc:	d032      	beq.n	4234 <__aeabi_d2f+0x100>
    41ce:	2080      	movs	r0, #128	; 0x80
    41d0:	03c0      	lsls	r0, r0, #15
    41d2:	4303      	orrs	r3, r0
    41d4:	025b      	lsls	r3, r3, #9
    41d6:	0a5b      	lsrs	r3, r3, #9
    41d8:	e7dc      	b.n	4194 <__aeabi_d2f+0x60>
    41da:	0032      	movs	r2, r6
    41dc:	3217      	adds	r2, #23
    41de:	db14      	blt.n	420a <__aeabi_d2f+0xd6>
    41e0:	2280      	movs	r2, #128	; 0x80
    41e2:	271e      	movs	r7, #30
    41e4:	0412      	lsls	r2, r2, #16
    41e6:	4313      	orrs	r3, r2
    41e8:	1bbf      	subs	r7, r7, r6
    41ea:	2f1f      	cmp	r7, #31
    41ec:	dc0f      	bgt.n	420e <__aeabi_d2f+0xda>
    41ee:	4a14      	ldr	r2, [pc, #80]	; (4240 <__aeabi_d2f+0x10c>)
    41f0:	4694      	mov	ip, r2
    41f2:	4464      	add	r4, ip
    41f4:	002a      	movs	r2, r5
    41f6:	40a5      	lsls	r5, r4
    41f8:	002e      	movs	r6, r5
    41fa:	40a3      	lsls	r3, r4
    41fc:	1e75      	subs	r5, r6, #1
    41fe:	41ae      	sbcs	r6, r5
    4200:	40fa      	lsrs	r2, r7
    4202:	4333      	orrs	r3, r6
    4204:	4313      	orrs	r3, r2
    4206:	2600      	movs	r6, #0
    4208:	e7b0      	b.n	416c <__aeabi_d2f+0x38>
    420a:	2400      	movs	r4, #0
    420c:	e7d5      	b.n	41ba <__aeabi_d2f+0x86>
    420e:	2202      	movs	r2, #2
    4210:	4252      	negs	r2, r2
    4212:	1b96      	subs	r6, r2, r6
    4214:	001a      	movs	r2, r3
    4216:	40f2      	lsrs	r2, r6
    4218:	2f20      	cmp	r7, #32
    421a:	d009      	beq.n	4230 <__aeabi_d2f+0xfc>
    421c:	4809      	ldr	r0, [pc, #36]	; (4244 <__aeabi_d2f+0x110>)
    421e:	4684      	mov	ip, r0
    4220:	4464      	add	r4, ip
    4222:	40a3      	lsls	r3, r4
    4224:	432b      	orrs	r3, r5
    4226:	1e5d      	subs	r5, r3, #1
    4228:	41ab      	sbcs	r3, r5
    422a:	2600      	movs	r6, #0
    422c:	4313      	orrs	r3, r2
    422e:	e79d      	b.n	416c <__aeabi_d2f+0x38>
    4230:	2300      	movs	r3, #0
    4232:	e7f7      	b.n	4224 <__aeabi_d2f+0xf0>
    4234:	2300      	movs	r3, #0
    4236:	e7ad      	b.n	4194 <__aeabi_d2f+0x60>
    4238:	0034      	movs	r4, r6
    423a:	e7bf      	b.n	41bc <__aeabi_d2f+0x88>
    423c:	fffffc80 	.word	0xfffffc80
    4240:	fffffc82 	.word	0xfffffc82
    4244:	fffffca2 	.word	0xfffffca2

00004248 <__clzsi2>:
    4248:	211c      	movs	r1, #28
    424a:	2301      	movs	r3, #1
    424c:	041b      	lsls	r3, r3, #16
    424e:	4298      	cmp	r0, r3
    4250:	d301      	bcc.n	4256 <__clzsi2+0xe>
    4252:	0c00      	lsrs	r0, r0, #16
    4254:	3910      	subs	r1, #16
    4256:	0a1b      	lsrs	r3, r3, #8
    4258:	4298      	cmp	r0, r3
    425a:	d301      	bcc.n	4260 <__clzsi2+0x18>
    425c:	0a00      	lsrs	r0, r0, #8
    425e:	3908      	subs	r1, #8
    4260:	091b      	lsrs	r3, r3, #4
    4262:	4298      	cmp	r0, r3
    4264:	d301      	bcc.n	426a <__clzsi2+0x22>
    4266:	0900      	lsrs	r0, r0, #4
    4268:	3904      	subs	r1, #4
    426a:	a202      	add	r2, pc, #8	; (adr r2, 4274 <__clzsi2+0x2c>)
    426c:	5c10      	ldrb	r0, [r2, r0]
    426e:	1840      	adds	r0, r0, r1
    4270:	4770      	bx	lr
    4272:	46c0      	nop			; (mov r8, r8)
    4274:	02020304 	.word	0x02020304
    4278:	01010101 	.word	0x01010101
	...

00004284 <__clzdi2>:
    4284:	b510      	push	{r4, lr}
    4286:	2900      	cmp	r1, #0
    4288:	d103      	bne.n	4292 <__clzdi2+0xe>
    428a:	f7ff ffdd 	bl	4248 <__clzsi2>
    428e:	3020      	adds	r0, #32
    4290:	e002      	b.n	4298 <__clzdi2+0x14>
    4292:	1c08      	adds	r0, r1, #0
    4294:	f7ff ffd8 	bl	4248 <__clzsi2>
    4298:	bd10      	pop	{r4, pc}
    429a:	46c0      	nop			; (mov r8, r8)

0000429c <__libc_init_array>:
    429c:	b570      	push	{r4, r5, r6, lr}
    429e:	2600      	movs	r6, #0
    42a0:	4d0c      	ldr	r5, [pc, #48]	; (42d4 <__libc_init_array+0x38>)
    42a2:	4c0d      	ldr	r4, [pc, #52]	; (42d8 <__libc_init_array+0x3c>)
    42a4:	1b64      	subs	r4, r4, r5
    42a6:	10a4      	asrs	r4, r4, #2
    42a8:	42a6      	cmp	r6, r4
    42aa:	d109      	bne.n	42c0 <__libc_init_array+0x24>
    42ac:	2600      	movs	r6, #0
    42ae:	f000 fdab 	bl	4e08 <_init>
    42b2:	4d0a      	ldr	r5, [pc, #40]	; (42dc <__libc_init_array+0x40>)
    42b4:	4c0a      	ldr	r4, [pc, #40]	; (42e0 <__libc_init_array+0x44>)
    42b6:	1b64      	subs	r4, r4, r5
    42b8:	10a4      	asrs	r4, r4, #2
    42ba:	42a6      	cmp	r6, r4
    42bc:	d105      	bne.n	42ca <__libc_init_array+0x2e>
    42be:	bd70      	pop	{r4, r5, r6, pc}
    42c0:	00b3      	lsls	r3, r6, #2
    42c2:	58eb      	ldr	r3, [r5, r3]
    42c4:	4798      	blx	r3
    42c6:	3601      	adds	r6, #1
    42c8:	e7ee      	b.n	42a8 <__libc_init_array+0xc>
    42ca:	00b3      	lsls	r3, r6, #2
    42cc:	58eb      	ldr	r3, [r5, r3]
    42ce:	4798      	blx	r3
    42d0:	3601      	adds	r6, #1
    42d2:	e7f2      	b.n	42ba <__libc_init_array+0x1e>
    42d4:	00004e14 	.word	0x00004e14
    42d8:	00004e14 	.word	0x00004e14
    42dc:	00004e14 	.word	0x00004e14
    42e0:	00004e18 	.word	0x00004e18

000042e4 <memset>:
    42e4:	0003      	movs	r3, r0
    42e6:	1882      	adds	r2, r0, r2
    42e8:	4293      	cmp	r3, r2
    42ea:	d100      	bne.n	42ee <memset+0xa>
    42ec:	4770      	bx	lr
    42ee:	7019      	strb	r1, [r3, #0]
    42f0:	3301      	adds	r3, #1
    42f2:	e7f9      	b.n	42e8 <memset+0x4>

000042f4 <_puts_r>:
    42f4:	b570      	push	{r4, r5, r6, lr}
    42f6:	0005      	movs	r5, r0
    42f8:	000e      	movs	r6, r1
    42fa:	2800      	cmp	r0, #0
    42fc:	d004      	beq.n	4308 <_puts_r+0x14>
    42fe:	6983      	ldr	r3, [r0, #24]
    4300:	2b00      	cmp	r3, #0
    4302:	d101      	bne.n	4308 <_puts_r+0x14>
    4304:	f000 fa3a 	bl	477c <__sinit>
    4308:	69ab      	ldr	r3, [r5, #24]
    430a:	68ac      	ldr	r4, [r5, #8]
    430c:	2b00      	cmp	r3, #0
    430e:	d102      	bne.n	4316 <_puts_r+0x22>
    4310:	0028      	movs	r0, r5
    4312:	f000 fa33 	bl	477c <__sinit>
    4316:	4b24      	ldr	r3, [pc, #144]	; (43a8 <_puts_r+0xb4>)
    4318:	429c      	cmp	r4, r3
    431a:	d10f      	bne.n	433c <_puts_r+0x48>
    431c:	686c      	ldr	r4, [r5, #4]
    431e:	89a3      	ldrh	r3, [r4, #12]
    4320:	071b      	lsls	r3, r3, #28
    4322:	d502      	bpl.n	432a <_puts_r+0x36>
    4324:	6923      	ldr	r3, [r4, #16]
    4326:	2b00      	cmp	r3, #0
    4328:	d120      	bne.n	436c <_puts_r+0x78>
    432a:	0021      	movs	r1, r4
    432c:	0028      	movs	r0, r5
    432e:	f000 f8b7 	bl	44a0 <__swsetup_r>
    4332:	2800      	cmp	r0, #0
    4334:	d01a      	beq.n	436c <_puts_r+0x78>
    4336:	2001      	movs	r0, #1
    4338:	4240      	negs	r0, r0
    433a:	bd70      	pop	{r4, r5, r6, pc}
    433c:	4b1b      	ldr	r3, [pc, #108]	; (43ac <_puts_r+0xb8>)
    433e:	429c      	cmp	r4, r3
    4340:	d101      	bne.n	4346 <_puts_r+0x52>
    4342:	68ac      	ldr	r4, [r5, #8]
    4344:	e7eb      	b.n	431e <_puts_r+0x2a>
    4346:	4b1a      	ldr	r3, [pc, #104]	; (43b0 <_puts_r+0xbc>)
    4348:	429c      	cmp	r4, r3
    434a:	d1e8      	bne.n	431e <_puts_r+0x2a>
    434c:	68ec      	ldr	r4, [r5, #12]
    434e:	e7e6      	b.n	431e <_puts_r+0x2a>
    4350:	3b01      	subs	r3, #1
    4352:	3601      	adds	r6, #1
    4354:	60a3      	str	r3, [r4, #8]
    4356:	2b00      	cmp	r3, #0
    4358:	da04      	bge.n	4364 <_puts_r+0x70>
    435a:	69a2      	ldr	r2, [r4, #24]
    435c:	4293      	cmp	r3, r2
    435e:	db16      	blt.n	438e <_puts_r+0x9a>
    4360:	290a      	cmp	r1, #10
    4362:	d014      	beq.n	438e <_puts_r+0x9a>
    4364:	6823      	ldr	r3, [r4, #0]
    4366:	1c5a      	adds	r2, r3, #1
    4368:	6022      	str	r2, [r4, #0]
    436a:	7019      	strb	r1, [r3, #0]
    436c:	7831      	ldrb	r1, [r6, #0]
    436e:	68a3      	ldr	r3, [r4, #8]
    4370:	2900      	cmp	r1, #0
    4372:	d1ed      	bne.n	4350 <_puts_r+0x5c>
    4374:	3b01      	subs	r3, #1
    4376:	60a3      	str	r3, [r4, #8]
    4378:	2b00      	cmp	r3, #0
    437a:	da0f      	bge.n	439c <_puts_r+0xa8>
    437c:	0022      	movs	r2, r4
    437e:	310a      	adds	r1, #10
    4380:	0028      	movs	r0, r5
    4382:	f000 f837 	bl	43f4 <__swbuf_r>
    4386:	1c43      	adds	r3, r0, #1
    4388:	d0d5      	beq.n	4336 <_puts_r+0x42>
    438a:	200a      	movs	r0, #10
    438c:	e7d5      	b.n	433a <_puts_r+0x46>
    438e:	0022      	movs	r2, r4
    4390:	0028      	movs	r0, r5
    4392:	f000 f82f 	bl	43f4 <__swbuf_r>
    4396:	1c43      	adds	r3, r0, #1
    4398:	d1e8      	bne.n	436c <_puts_r+0x78>
    439a:	e7cc      	b.n	4336 <_puts_r+0x42>
    439c:	200a      	movs	r0, #10
    439e:	6823      	ldr	r3, [r4, #0]
    43a0:	1c5a      	adds	r2, r3, #1
    43a2:	6022      	str	r2, [r4, #0]
    43a4:	7018      	strb	r0, [r3, #0]
    43a6:	e7c8      	b.n	433a <_puts_r+0x46>
    43a8:	00004dc8 	.word	0x00004dc8
    43ac:	00004de8 	.word	0x00004de8
    43b0:	00004da8 	.word	0x00004da8

000043b4 <puts>:
    43b4:	b510      	push	{r4, lr}
    43b6:	4b03      	ldr	r3, [pc, #12]	; (43c4 <puts+0x10>)
    43b8:	0001      	movs	r1, r0
    43ba:	6818      	ldr	r0, [r3, #0]
    43bc:	f7ff ff9a 	bl	42f4 <_puts_r>
    43c0:	bd10      	pop	{r4, pc}
    43c2:	46c0      	nop			; (mov r8, r8)
    43c4:	20000018 	.word	0x20000018

000043c8 <strncpy>:
    43c8:	b570      	push	{r4, r5, r6, lr}
    43ca:	0004      	movs	r4, r0
    43cc:	2a00      	cmp	r2, #0
    43ce:	d100      	bne.n	43d2 <strncpy+0xa>
    43d0:	bd70      	pop	{r4, r5, r6, pc}
    43d2:	780d      	ldrb	r5, [r1, #0]
    43d4:	1e56      	subs	r6, r2, #1
    43d6:	1c63      	adds	r3, r4, #1
    43d8:	7025      	strb	r5, [r4, #0]
    43da:	3101      	adds	r1, #1
    43dc:	2d00      	cmp	r5, #0
    43de:	d105      	bne.n	43ec <strncpy+0x24>
    43e0:	18a4      	adds	r4, r4, r2
    43e2:	429c      	cmp	r4, r3
    43e4:	d0f4      	beq.n	43d0 <strncpy+0x8>
    43e6:	701d      	strb	r5, [r3, #0]
    43e8:	3301      	adds	r3, #1
    43ea:	e7fa      	b.n	43e2 <strncpy+0x1a>
    43ec:	001c      	movs	r4, r3
    43ee:	0032      	movs	r2, r6
    43f0:	e7ec      	b.n	43cc <strncpy+0x4>
	...

000043f4 <__swbuf_r>:
    43f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43f6:	0005      	movs	r5, r0
    43f8:	000e      	movs	r6, r1
    43fa:	0014      	movs	r4, r2
    43fc:	2800      	cmp	r0, #0
    43fe:	d004      	beq.n	440a <__swbuf_r+0x16>
    4400:	6983      	ldr	r3, [r0, #24]
    4402:	2b00      	cmp	r3, #0
    4404:	d101      	bne.n	440a <__swbuf_r+0x16>
    4406:	f000 f9b9 	bl	477c <__sinit>
    440a:	4b22      	ldr	r3, [pc, #136]	; (4494 <__swbuf_r+0xa0>)
    440c:	429c      	cmp	r4, r3
    440e:	d12d      	bne.n	446c <__swbuf_r+0x78>
    4410:	686c      	ldr	r4, [r5, #4]
    4412:	69a3      	ldr	r3, [r4, #24]
    4414:	60a3      	str	r3, [r4, #8]
    4416:	89a3      	ldrh	r3, [r4, #12]
    4418:	071b      	lsls	r3, r3, #28
    441a:	d531      	bpl.n	4480 <__swbuf_r+0x8c>
    441c:	6923      	ldr	r3, [r4, #16]
    441e:	2b00      	cmp	r3, #0
    4420:	d02e      	beq.n	4480 <__swbuf_r+0x8c>
    4422:	6823      	ldr	r3, [r4, #0]
    4424:	6922      	ldr	r2, [r4, #16]
    4426:	b2f7      	uxtb	r7, r6
    4428:	1a98      	subs	r0, r3, r2
    442a:	6963      	ldr	r3, [r4, #20]
    442c:	b2f6      	uxtb	r6, r6
    442e:	4298      	cmp	r0, r3
    4430:	db05      	blt.n	443e <__swbuf_r+0x4a>
    4432:	0021      	movs	r1, r4
    4434:	0028      	movs	r0, r5
    4436:	f000 f933 	bl	46a0 <_fflush_r>
    443a:	2800      	cmp	r0, #0
    443c:	d126      	bne.n	448c <__swbuf_r+0x98>
    443e:	68a3      	ldr	r3, [r4, #8]
    4440:	3001      	adds	r0, #1
    4442:	3b01      	subs	r3, #1
    4444:	60a3      	str	r3, [r4, #8]
    4446:	6823      	ldr	r3, [r4, #0]
    4448:	1c5a      	adds	r2, r3, #1
    444a:	6022      	str	r2, [r4, #0]
    444c:	701f      	strb	r7, [r3, #0]
    444e:	6963      	ldr	r3, [r4, #20]
    4450:	4298      	cmp	r0, r3
    4452:	d004      	beq.n	445e <__swbuf_r+0x6a>
    4454:	89a3      	ldrh	r3, [r4, #12]
    4456:	07db      	lsls	r3, r3, #31
    4458:	d51a      	bpl.n	4490 <__swbuf_r+0x9c>
    445a:	2e0a      	cmp	r6, #10
    445c:	d118      	bne.n	4490 <__swbuf_r+0x9c>
    445e:	0021      	movs	r1, r4
    4460:	0028      	movs	r0, r5
    4462:	f000 f91d 	bl	46a0 <_fflush_r>
    4466:	2800      	cmp	r0, #0
    4468:	d012      	beq.n	4490 <__swbuf_r+0x9c>
    446a:	e00f      	b.n	448c <__swbuf_r+0x98>
    446c:	4b0a      	ldr	r3, [pc, #40]	; (4498 <__swbuf_r+0xa4>)
    446e:	429c      	cmp	r4, r3
    4470:	d101      	bne.n	4476 <__swbuf_r+0x82>
    4472:	68ac      	ldr	r4, [r5, #8]
    4474:	e7cd      	b.n	4412 <__swbuf_r+0x1e>
    4476:	4b09      	ldr	r3, [pc, #36]	; (449c <__swbuf_r+0xa8>)
    4478:	429c      	cmp	r4, r3
    447a:	d1ca      	bne.n	4412 <__swbuf_r+0x1e>
    447c:	68ec      	ldr	r4, [r5, #12]
    447e:	e7c8      	b.n	4412 <__swbuf_r+0x1e>
    4480:	0021      	movs	r1, r4
    4482:	0028      	movs	r0, r5
    4484:	f000 f80c 	bl	44a0 <__swsetup_r>
    4488:	2800      	cmp	r0, #0
    448a:	d0ca      	beq.n	4422 <__swbuf_r+0x2e>
    448c:	2601      	movs	r6, #1
    448e:	4276      	negs	r6, r6
    4490:	0030      	movs	r0, r6
    4492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4494:	00004dc8 	.word	0x00004dc8
    4498:	00004de8 	.word	0x00004de8
    449c:	00004da8 	.word	0x00004da8

000044a0 <__swsetup_r>:
    44a0:	4b36      	ldr	r3, [pc, #216]	; (457c <__swsetup_r+0xdc>)
    44a2:	b570      	push	{r4, r5, r6, lr}
    44a4:	681d      	ldr	r5, [r3, #0]
    44a6:	0006      	movs	r6, r0
    44a8:	000c      	movs	r4, r1
    44aa:	2d00      	cmp	r5, #0
    44ac:	d005      	beq.n	44ba <__swsetup_r+0x1a>
    44ae:	69ab      	ldr	r3, [r5, #24]
    44b0:	2b00      	cmp	r3, #0
    44b2:	d102      	bne.n	44ba <__swsetup_r+0x1a>
    44b4:	0028      	movs	r0, r5
    44b6:	f000 f961 	bl	477c <__sinit>
    44ba:	4b31      	ldr	r3, [pc, #196]	; (4580 <__swsetup_r+0xe0>)
    44bc:	429c      	cmp	r4, r3
    44be:	d10f      	bne.n	44e0 <__swsetup_r+0x40>
    44c0:	686c      	ldr	r4, [r5, #4]
    44c2:	230c      	movs	r3, #12
    44c4:	5ee2      	ldrsh	r2, [r4, r3]
    44c6:	b293      	uxth	r3, r2
    44c8:	0719      	lsls	r1, r3, #28
    44ca:	d42d      	bmi.n	4528 <__swsetup_r+0x88>
    44cc:	06d9      	lsls	r1, r3, #27
    44ce:	d411      	bmi.n	44f4 <__swsetup_r+0x54>
    44d0:	2309      	movs	r3, #9
    44d2:	2001      	movs	r0, #1
    44d4:	6033      	str	r3, [r6, #0]
    44d6:	3337      	adds	r3, #55	; 0x37
    44d8:	4313      	orrs	r3, r2
    44da:	81a3      	strh	r3, [r4, #12]
    44dc:	4240      	negs	r0, r0
    44de:	bd70      	pop	{r4, r5, r6, pc}
    44e0:	4b28      	ldr	r3, [pc, #160]	; (4584 <__swsetup_r+0xe4>)
    44e2:	429c      	cmp	r4, r3
    44e4:	d101      	bne.n	44ea <__swsetup_r+0x4a>
    44e6:	68ac      	ldr	r4, [r5, #8]
    44e8:	e7eb      	b.n	44c2 <__swsetup_r+0x22>
    44ea:	4b27      	ldr	r3, [pc, #156]	; (4588 <__swsetup_r+0xe8>)
    44ec:	429c      	cmp	r4, r3
    44ee:	d1e8      	bne.n	44c2 <__swsetup_r+0x22>
    44f0:	68ec      	ldr	r4, [r5, #12]
    44f2:	e7e6      	b.n	44c2 <__swsetup_r+0x22>
    44f4:	075b      	lsls	r3, r3, #29
    44f6:	d513      	bpl.n	4520 <__swsetup_r+0x80>
    44f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    44fa:	2900      	cmp	r1, #0
    44fc:	d008      	beq.n	4510 <__swsetup_r+0x70>
    44fe:	0023      	movs	r3, r4
    4500:	3344      	adds	r3, #68	; 0x44
    4502:	4299      	cmp	r1, r3
    4504:	d002      	beq.n	450c <__swsetup_r+0x6c>
    4506:	0030      	movs	r0, r6
    4508:	f000 fa3a 	bl	4980 <_free_r>
    450c:	2300      	movs	r3, #0
    450e:	6363      	str	r3, [r4, #52]	; 0x34
    4510:	2224      	movs	r2, #36	; 0x24
    4512:	89a3      	ldrh	r3, [r4, #12]
    4514:	4393      	bics	r3, r2
    4516:	81a3      	strh	r3, [r4, #12]
    4518:	2300      	movs	r3, #0
    451a:	6063      	str	r3, [r4, #4]
    451c:	6923      	ldr	r3, [r4, #16]
    451e:	6023      	str	r3, [r4, #0]
    4520:	2308      	movs	r3, #8
    4522:	89a2      	ldrh	r2, [r4, #12]
    4524:	4313      	orrs	r3, r2
    4526:	81a3      	strh	r3, [r4, #12]
    4528:	6923      	ldr	r3, [r4, #16]
    452a:	2b00      	cmp	r3, #0
    452c:	d10b      	bne.n	4546 <__swsetup_r+0xa6>
    452e:	21a0      	movs	r1, #160	; 0xa0
    4530:	2280      	movs	r2, #128	; 0x80
    4532:	89a3      	ldrh	r3, [r4, #12]
    4534:	0089      	lsls	r1, r1, #2
    4536:	0092      	lsls	r2, r2, #2
    4538:	400b      	ands	r3, r1
    453a:	4293      	cmp	r3, r2
    453c:	d003      	beq.n	4546 <__swsetup_r+0xa6>
    453e:	0021      	movs	r1, r4
    4540:	0030      	movs	r0, r6
    4542:	f000 f9d9 	bl	48f8 <__smakebuf_r>
    4546:	2301      	movs	r3, #1
    4548:	89a2      	ldrh	r2, [r4, #12]
    454a:	4013      	ands	r3, r2
    454c:	d011      	beq.n	4572 <__swsetup_r+0xd2>
    454e:	2300      	movs	r3, #0
    4550:	60a3      	str	r3, [r4, #8]
    4552:	6963      	ldr	r3, [r4, #20]
    4554:	425b      	negs	r3, r3
    4556:	61a3      	str	r3, [r4, #24]
    4558:	2000      	movs	r0, #0
    455a:	6923      	ldr	r3, [r4, #16]
    455c:	4283      	cmp	r3, r0
    455e:	d1be      	bne.n	44de <__swsetup_r+0x3e>
    4560:	230c      	movs	r3, #12
    4562:	5ee2      	ldrsh	r2, [r4, r3]
    4564:	0613      	lsls	r3, r2, #24
    4566:	d5ba      	bpl.n	44de <__swsetup_r+0x3e>
    4568:	2340      	movs	r3, #64	; 0x40
    456a:	4313      	orrs	r3, r2
    456c:	81a3      	strh	r3, [r4, #12]
    456e:	3801      	subs	r0, #1
    4570:	e7b5      	b.n	44de <__swsetup_r+0x3e>
    4572:	0792      	lsls	r2, r2, #30
    4574:	d400      	bmi.n	4578 <__swsetup_r+0xd8>
    4576:	6963      	ldr	r3, [r4, #20]
    4578:	60a3      	str	r3, [r4, #8]
    457a:	e7ed      	b.n	4558 <__swsetup_r+0xb8>
    457c:	20000018 	.word	0x20000018
    4580:	00004dc8 	.word	0x00004dc8
    4584:	00004de8 	.word	0x00004de8
    4588:	00004da8 	.word	0x00004da8

0000458c <__sflush_r>:
    458c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    458e:	898a      	ldrh	r2, [r1, #12]
    4590:	0005      	movs	r5, r0
    4592:	000c      	movs	r4, r1
    4594:	0713      	lsls	r3, r2, #28
    4596:	d460      	bmi.n	465a <__sflush_r+0xce>
    4598:	684b      	ldr	r3, [r1, #4]
    459a:	2b00      	cmp	r3, #0
    459c:	dc04      	bgt.n	45a8 <__sflush_r+0x1c>
    459e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    45a0:	2b00      	cmp	r3, #0
    45a2:	dc01      	bgt.n	45a8 <__sflush_r+0x1c>
    45a4:	2000      	movs	r0, #0
    45a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    45a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    45aa:	2f00      	cmp	r7, #0
    45ac:	d0fa      	beq.n	45a4 <__sflush_r+0x18>
    45ae:	2300      	movs	r3, #0
    45b0:	682e      	ldr	r6, [r5, #0]
    45b2:	602b      	str	r3, [r5, #0]
    45b4:	2380      	movs	r3, #128	; 0x80
    45b6:	015b      	lsls	r3, r3, #5
    45b8:	401a      	ands	r2, r3
    45ba:	d034      	beq.n	4626 <__sflush_r+0x9a>
    45bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    45be:	89a3      	ldrh	r3, [r4, #12]
    45c0:	075b      	lsls	r3, r3, #29
    45c2:	d506      	bpl.n	45d2 <__sflush_r+0x46>
    45c4:	6863      	ldr	r3, [r4, #4]
    45c6:	1ac0      	subs	r0, r0, r3
    45c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    45ca:	2b00      	cmp	r3, #0
    45cc:	d001      	beq.n	45d2 <__sflush_r+0x46>
    45ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
    45d0:	1ac0      	subs	r0, r0, r3
    45d2:	0002      	movs	r2, r0
    45d4:	6a21      	ldr	r1, [r4, #32]
    45d6:	2300      	movs	r3, #0
    45d8:	0028      	movs	r0, r5
    45da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    45dc:	47b8      	blx	r7
    45de:	89a1      	ldrh	r1, [r4, #12]
    45e0:	1c43      	adds	r3, r0, #1
    45e2:	d106      	bne.n	45f2 <__sflush_r+0x66>
    45e4:	682b      	ldr	r3, [r5, #0]
    45e6:	2b1d      	cmp	r3, #29
    45e8:	d831      	bhi.n	464e <__sflush_r+0xc2>
    45ea:	4a2c      	ldr	r2, [pc, #176]	; (469c <__sflush_r+0x110>)
    45ec:	40da      	lsrs	r2, r3
    45ee:	07d3      	lsls	r3, r2, #31
    45f0:	d52d      	bpl.n	464e <__sflush_r+0xc2>
    45f2:	2300      	movs	r3, #0
    45f4:	6063      	str	r3, [r4, #4]
    45f6:	6923      	ldr	r3, [r4, #16]
    45f8:	6023      	str	r3, [r4, #0]
    45fa:	04cb      	lsls	r3, r1, #19
    45fc:	d505      	bpl.n	460a <__sflush_r+0x7e>
    45fe:	1c43      	adds	r3, r0, #1
    4600:	d102      	bne.n	4608 <__sflush_r+0x7c>
    4602:	682b      	ldr	r3, [r5, #0]
    4604:	2b00      	cmp	r3, #0
    4606:	d100      	bne.n	460a <__sflush_r+0x7e>
    4608:	6560      	str	r0, [r4, #84]	; 0x54
    460a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    460c:	602e      	str	r6, [r5, #0]
    460e:	2900      	cmp	r1, #0
    4610:	d0c8      	beq.n	45a4 <__sflush_r+0x18>
    4612:	0023      	movs	r3, r4
    4614:	3344      	adds	r3, #68	; 0x44
    4616:	4299      	cmp	r1, r3
    4618:	d002      	beq.n	4620 <__sflush_r+0x94>
    461a:	0028      	movs	r0, r5
    461c:	f000 f9b0 	bl	4980 <_free_r>
    4620:	2000      	movs	r0, #0
    4622:	6360      	str	r0, [r4, #52]	; 0x34
    4624:	e7bf      	b.n	45a6 <__sflush_r+0x1a>
    4626:	2301      	movs	r3, #1
    4628:	6a21      	ldr	r1, [r4, #32]
    462a:	0028      	movs	r0, r5
    462c:	47b8      	blx	r7
    462e:	1c43      	adds	r3, r0, #1
    4630:	d1c5      	bne.n	45be <__sflush_r+0x32>
    4632:	682b      	ldr	r3, [r5, #0]
    4634:	2b00      	cmp	r3, #0
    4636:	d0c2      	beq.n	45be <__sflush_r+0x32>
    4638:	2b1d      	cmp	r3, #29
    463a:	d001      	beq.n	4640 <__sflush_r+0xb4>
    463c:	2b16      	cmp	r3, #22
    463e:	d101      	bne.n	4644 <__sflush_r+0xb8>
    4640:	602e      	str	r6, [r5, #0]
    4642:	e7af      	b.n	45a4 <__sflush_r+0x18>
    4644:	2340      	movs	r3, #64	; 0x40
    4646:	89a2      	ldrh	r2, [r4, #12]
    4648:	4313      	orrs	r3, r2
    464a:	81a3      	strh	r3, [r4, #12]
    464c:	e7ab      	b.n	45a6 <__sflush_r+0x1a>
    464e:	2340      	movs	r3, #64	; 0x40
    4650:	430b      	orrs	r3, r1
    4652:	2001      	movs	r0, #1
    4654:	81a3      	strh	r3, [r4, #12]
    4656:	4240      	negs	r0, r0
    4658:	e7a5      	b.n	45a6 <__sflush_r+0x1a>
    465a:	690f      	ldr	r7, [r1, #16]
    465c:	2f00      	cmp	r7, #0
    465e:	d0a1      	beq.n	45a4 <__sflush_r+0x18>
    4660:	680b      	ldr	r3, [r1, #0]
    4662:	600f      	str	r7, [r1, #0]
    4664:	1bdb      	subs	r3, r3, r7
    4666:	9301      	str	r3, [sp, #4]
    4668:	2300      	movs	r3, #0
    466a:	0792      	lsls	r2, r2, #30
    466c:	d100      	bne.n	4670 <__sflush_r+0xe4>
    466e:	694b      	ldr	r3, [r1, #20]
    4670:	60a3      	str	r3, [r4, #8]
    4672:	9b01      	ldr	r3, [sp, #4]
    4674:	2b00      	cmp	r3, #0
    4676:	dc00      	bgt.n	467a <__sflush_r+0xee>
    4678:	e794      	b.n	45a4 <__sflush_r+0x18>
    467a:	9b01      	ldr	r3, [sp, #4]
    467c:	003a      	movs	r2, r7
    467e:	6a21      	ldr	r1, [r4, #32]
    4680:	0028      	movs	r0, r5
    4682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4684:	47b0      	blx	r6
    4686:	2800      	cmp	r0, #0
    4688:	dc03      	bgt.n	4692 <__sflush_r+0x106>
    468a:	2340      	movs	r3, #64	; 0x40
    468c:	89a2      	ldrh	r2, [r4, #12]
    468e:	4313      	orrs	r3, r2
    4690:	e7df      	b.n	4652 <__sflush_r+0xc6>
    4692:	9b01      	ldr	r3, [sp, #4]
    4694:	183f      	adds	r7, r7, r0
    4696:	1a1b      	subs	r3, r3, r0
    4698:	9301      	str	r3, [sp, #4]
    469a:	e7ea      	b.n	4672 <__sflush_r+0xe6>
    469c:	20400001 	.word	0x20400001

000046a0 <_fflush_r>:
    46a0:	690b      	ldr	r3, [r1, #16]
    46a2:	b570      	push	{r4, r5, r6, lr}
    46a4:	0005      	movs	r5, r0
    46a6:	000c      	movs	r4, r1
    46a8:	2b00      	cmp	r3, #0
    46aa:	d101      	bne.n	46b0 <_fflush_r+0x10>
    46ac:	2000      	movs	r0, #0
    46ae:	bd70      	pop	{r4, r5, r6, pc}
    46b0:	2800      	cmp	r0, #0
    46b2:	d004      	beq.n	46be <_fflush_r+0x1e>
    46b4:	6983      	ldr	r3, [r0, #24]
    46b6:	2b00      	cmp	r3, #0
    46b8:	d101      	bne.n	46be <_fflush_r+0x1e>
    46ba:	f000 f85f 	bl	477c <__sinit>
    46be:	4b0b      	ldr	r3, [pc, #44]	; (46ec <_fflush_r+0x4c>)
    46c0:	429c      	cmp	r4, r3
    46c2:	d109      	bne.n	46d8 <_fflush_r+0x38>
    46c4:	686c      	ldr	r4, [r5, #4]
    46c6:	220c      	movs	r2, #12
    46c8:	5ea3      	ldrsh	r3, [r4, r2]
    46ca:	2b00      	cmp	r3, #0
    46cc:	d0ee      	beq.n	46ac <_fflush_r+0xc>
    46ce:	0021      	movs	r1, r4
    46d0:	0028      	movs	r0, r5
    46d2:	f7ff ff5b 	bl	458c <__sflush_r>
    46d6:	e7ea      	b.n	46ae <_fflush_r+0xe>
    46d8:	4b05      	ldr	r3, [pc, #20]	; (46f0 <_fflush_r+0x50>)
    46da:	429c      	cmp	r4, r3
    46dc:	d101      	bne.n	46e2 <_fflush_r+0x42>
    46de:	68ac      	ldr	r4, [r5, #8]
    46e0:	e7f1      	b.n	46c6 <_fflush_r+0x26>
    46e2:	4b04      	ldr	r3, [pc, #16]	; (46f4 <_fflush_r+0x54>)
    46e4:	429c      	cmp	r4, r3
    46e6:	d1ee      	bne.n	46c6 <_fflush_r+0x26>
    46e8:	68ec      	ldr	r4, [r5, #12]
    46ea:	e7ec      	b.n	46c6 <_fflush_r+0x26>
    46ec:	00004dc8 	.word	0x00004dc8
    46f0:	00004de8 	.word	0x00004de8
    46f4:	00004da8 	.word	0x00004da8

000046f8 <_cleanup_r>:
    46f8:	b510      	push	{r4, lr}
    46fa:	4902      	ldr	r1, [pc, #8]	; (4704 <_cleanup_r+0xc>)
    46fc:	f000 f8b2 	bl	4864 <_fwalk_reent>
    4700:	bd10      	pop	{r4, pc}
    4702:	46c0      	nop			; (mov r8, r8)
    4704:	000046a1 	.word	0x000046a1

00004708 <std.isra.0>:
    4708:	2300      	movs	r3, #0
    470a:	b510      	push	{r4, lr}
    470c:	0004      	movs	r4, r0
    470e:	6003      	str	r3, [r0, #0]
    4710:	6043      	str	r3, [r0, #4]
    4712:	6083      	str	r3, [r0, #8]
    4714:	8181      	strh	r1, [r0, #12]
    4716:	6643      	str	r3, [r0, #100]	; 0x64
    4718:	81c2      	strh	r2, [r0, #14]
    471a:	6103      	str	r3, [r0, #16]
    471c:	6143      	str	r3, [r0, #20]
    471e:	6183      	str	r3, [r0, #24]
    4720:	0019      	movs	r1, r3
    4722:	2208      	movs	r2, #8
    4724:	305c      	adds	r0, #92	; 0x5c
    4726:	f7ff fddd 	bl	42e4 <memset>
    472a:	4b05      	ldr	r3, [pc, #20]	; (4740 <std.isra.0+0x38>)
    472c:	6224      	str	r4, [r4, #32]
    472e:	6263      	str	r3, [r4, #36]	; 0x24
    4730:	4b04      	ldr	r3, [pc, #16]	; (4744 <std.isra.0+0x3c>)
    4732:	62a3      	str	r3, [r4, #40]	; 0x28
    4734:	4b04      	ldr	r3, [pc, #16]	; (4748 <std.isra.0+0x40>)
    4736:	62e3      	str	r3, [r4, #44]	; 0x2c
    4738:	4b04      	ldr	r3, [pc, #16]	; (474c <std.isra.0+0x44>)
    473a:	6323      	str	r3, [r4, #48]	; 0x30
    473c:	bd10      	pop	{r4, pc}
    473e:	46c0      	nop			; (mov r8, r8)
    4740:	00004af5 	.word	0x00004af5
    4744:	00004b1d 	.word	0x00004b1d
    4748:	00004b55 	.word	0x00004b55
    474c:	00004b81 	.word	0x00004b81

00004750 <__sfmoreglue>:
    4750:	b570      	push	{r4, r5, r6, lr}
    4752:	2568      	movs	r5, #104	; 0x68
    4754:	1e4a      	subs	r2, r1, #1
    4756:	4355      	muls	r5, r2
    4758:	000e      	movs	r6, r1
    475a:	0029      	movs	r1, r5
    475c:	3174      	adds	r1, #116	; 0x74
    475e:	f000 f959 	bl	4a14 <_malloc_r>
    4762:	1e04      	subs	r4, r0, #0
    4764:	d008      	beq.n	4778 <__sfmoreglue+0x28>
    4766:	2100      	movs	r1, #0
    4768:	002a      	movs	r2, r5
    476a:	6001      	str	r1, [r0, #0]
    476c:	6046      	str	r6, [r0, #4]
    476e:	300c      	adds	r0, #12
    4770:	60a0      	str	r0, [r4, #8]
    4772:	3268      	adds	r2, #104	; 0x68
    4774:	f7ff fdb6 	bl	42e4 <memset>
    4778:	0020      	movs	r0, r4
    477a:	bd70      	pop	{r4, r5, r6, pc}

0000477c <__sinit>:
    477c:	6983      	ldr	r3, [r0, #24]
    477e:	b513      	push	{r0, r1, r4, lr}
    4780:	0004      	movs	r4, r0
    4782:	2b00      	cmp	r3, #0
    4784:	d128      	bne.n	47d8 <__sinit+0x5c>
    4786:	6483      	str	r3, [r0, #72]	; 0x48
    4788:	64c3      	str	r3, [r0, #76]	; 0x4c
    478a:	6503      	str	r3, [r0, #80]	; 0x50
    478c:	4b13      	ldr	r3, [pc, #76]	; (47dc <__sinit+0x60>)
    478e:	4a14      	ldr	r2, [pc, #80]	; (47e0 <__sinit+0x64>)
    4790:	681b      	ldr	r3, [r3, #0]
    4792:	6282      	str	r2, [r0, #40]	; 0x28
    4794:	9301      	str	r3, [sp, #4]
    4796:	4298      	cmp	r0, r3
    4798:	d101      	bne.n	479e <__sinit+0x22>
    479a:	2301      	movs	r3, #1
    479c:	6183      	str	r3, [r0, #24]
    479e:	0020      	movs	r0, r4
    47a0:	f000 f820 	bl	47e4 <__sfp>
    47a4:	6060      	str	r0, [r4, #4]
    47a6:	0020      	movs	r0, r4
    47a8:	f000 f81c 	bl	47e4 <__sfp>
    47ac:	60a0      	str	r0, [r4, #8]
    47ae:	0020      	movs	r0, r4
    47b0:	f000 f818 	bl	47e4 <__sfp>
    47b4:	2200      	movs	r2, #0
    47b6:	60e0      	str	r0, [r4, #12]
    47b8:	2104      	movs	r1, #4
    47ba:	6860      	ldr	r0, [r4, #4]
    47bc:	f7ff ffa4 	bl	4708 <std.isra.0>
    47c0:	2201      	movs	r2, #1
    47c2:	2109      	movs	r1, #9
    47c4:	68a0      	ldr	r0, [r4, #8]
    47c6:	f7ff ff9f 	bl	4708 <std.isra.0>
    47ca:	2202      	movs	r2, #2
    47cc:	2112      	movs	r1, #18
    47ce:	68e0      	ldr	r0, [r4, #12]
    47d0:	f7ff ff9a 	bl	4708 <std.isra.0>
    47d4:	2301      	movs	r3, #1
    47d6:	61a3      	str	r3, [r4, #24]
    47d8:	bd13      	pop	{r0, r1, r4, pc}
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	00004da4 	.word	0x00004da4
    47e0:	000046f9 	.word	0x000046f9

000047e4 <__sfp>:
    47e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47e6:	4b1e      	ldr	r3, [pc, #120]	; (4860 <__sfp+0x7c>)
    47e8:	0007      	movs	r7, r0
    47ea:	681e      	ldr	r6, [r3, #0]
    47ec:	69b3      	ldr	r3, [r6, #24]
    47ee:	2b00      	cmp	r3, #0
    47f0:	d102      	bne.n	47f8 <__sfp+0x14>
    47f2:	0030      	movs	r0, r6
    47f4:	f7ff ffc2 	bl	477c <__sinit>
    47f8:	3648      	adds	r6, #72	; 0x48
    47fa:	68b4      	ldr	r4, [r6, #8]
    47fc:	6873      	ldr	r3, [r6, #4]
    47fe:	3b01      	subs	r3, #1
    4800:	d504      	bpl.n	480c <__sfp+0x28>
    4802:	6833      	ldr	r3, [r6, #0]
    4804:	2b00      	cmp	r3, #0
    4806:	d007      	beq.n	4818 <__sfp+0x34>
    4808:	6836      	ldr	r6, [r6, #0]
    480a:	e7f6      	b.n	47fa <__sfp+0x16>
    480c:	220c      	movs	r2, #12
    480e:	5ea5      	ldrsh	r5, [r4, r2]
    4810:	2d00      	cmp	r5, #0
    4812:	d00d      	beq.n	4830 <__sfp+0x4c>
    4814:	3468      	adds	r4, #104	; 0x68
    4816:	e7f2      	b.n	47fe <__sfp+0x1a>
    4818:	2104      	movs	r1, #4
    481a:	0038      	movs	r0, r7
    481c:	f7ff ff98 	bl	4750 <__sfmoreglue>
    4820:	6030      	str	r0, [r6, #0]
    4822:	2800      	cmp	r0, #0
    4824:	d1f0      	bne.n	4808 <__sfp+0x24>
    4826:	230c      	movs	r3, #12
    4828:	0004      	movs	r4, r0
    482a:	603b      	str	r3, [r7, #0]
    482c:	0020      	movs	r0, r4
    482e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4830:	2301      	movs	r3, #1
    4832:	0020      	movs	r0, r4
    4834:	425b      	negs	r3, r3
    4836:	81e3      	strh	r3, [r4, #14]
    4838:	3302      	adds	r3, #2
    483a:	81a3      	strh	r3, [r4, #12]
    483c:	6665      	str	r5, [r4, #100]	; 0x64
    483e:	6025      	str	r5, [r4, #0]
    4840:	60a5      	str	r5, [r4, #8]
    4842:	6065      	str	r5, [r4, #4]
    4844:	6125      	str	r5, [r4, #16]
    4846:	6165      	str	r5, [r4, #20]
    4848:	61a5      	str	r5, [r4, #24]
    484a:	2208      	movs	r2, #8
    484c:	0029      	movs	r1, r5
    484e:	305c      	adds	r0, #92	; 0x5c
    4850:	f7ff fd48 	bl	42e4 <memset>
    4854:	6365      	str	r5, [r4, #52]	; 0x34
    4856:	63a5      	str	r5, [r4, #56]	; 0x38
    4858:	64a5      	str	r5, [r4, #72]	; 0x48
    485a:	64e5      	str	r5, [r4, #76]	; 0x4c
    485c:	e7e6      	b.n	482c <__sfp+0x48>
    485e:	46c0      	nop			; (mov r8, r8)
    4860:	00004da4 	.word	0x00004da4

00004864 <_fwalk_reent>:
    4864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4866:	0004      	movs	r4, r0
    4868:	0007      	movs	r7, r0
    486a:	2600      	movs	r6, #0
    486c:	9101      	str	r1, [sp, #4]
    486e:	3448      	adds	r4, #72	; 0x48
    4870:	2c00      	cmp	r4, #0
    4872:	d101      	bne.n	4878 <_fwalk_reent+0x14>
    4874:	0030      	movs	r0, r6
    4876:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4878:	6863      	ldr	r3, [r4, #4]
    487a:	68a5      	ldr	r5, [r4, #8]
    487c:	9300      	str	r3, [sp, #0]
    487e:	9b00      	ldr	r3, [sp, #0]
    4880:	3b01      	subs	r3, #1
    4882:	9300      	str	r3, [sp, #0]
    4884:	d501      	bpl.n	488a <_fwalk_reent+0x26>
    4886:	6824      	ldr	r4, [r4, #0]
    4888:	e7f2      	b.n	4870 <_fwalk_reent+0xc>
    488a:	89ab      	ldrh	r3, [r5, #12]
    488c:	2b01      	cmp	r3, #1
    488e:	d908      	bls.n	48a2 <_fwalk_reent+0x3e>
    4890:	220e      	movs	r2, #14
    4892:	5eab      	ldrsh	r3, [r5, r2]
    4894:	3301      	adds	r3, #1
    4896:	d004      	beq.n	48a2 <_fwalk_reent+0x3e>
    4898:	0029      	movs	r1, r5
    489a:	0038      	movs	r0, r7
    489c:	9b01      	ldr	r3, [sp, #4]
    489e:	4798      	blx	r3
    48a0:	4306      	orrs	r6, r0
    48a2:	3568      	adds	r5, #104	; 0x68
    48a4:	e7eb      	b.n	487e <_fwalk_reent+0x1a>
	...

000048a8 <__swhatbuf_r>:
    48a8:	b570      	push	{r4, r5, r6, lr}
    48aa:	000e      	movs	r6, r1
    48ac:	001d      	movs	r5, r3
    48ae:	230e      	movs	r3, #14
    48b0:	5ec9      	ldrsh	r1, [r1, r3]
    48b2:	b090      	sub	sp, #64	; 0x40
    48b4:	0014      	movs	r4, r2
    48b6:	2900      	cmp	r1, #0
    48b8:	da07      	bge.n	48ca <__swhatbuf_r+0x22>
    48ba:	2300      	movs	r3, #0
    48bc:	602b      	str	r3, [r5, #0]
    48be:	89b3      	ldrh	r3, [r6, #12]
    48c0:	061b      	lsls	r3, r3, #24
    48c2:	d411      	bmi.n	48e8 <__swhatbuf_r+0x40>
    48c4:	2380      	movs	r3, #128	; 0x80
    48c6:	00db      	lsls	r3, r3, #3
    48c8:	e00f      	b.n	48ea <__swhatbuf_r+0x42>
    48ca:	aa01      	add	r2, sp, #4
    48cc:	f000 f984 	bl	4bd8 <_fstat_r>
    48d0:	2800      	cmp	r0, #0
    48d2:	dbf2      	blt.n	48ba <__swhatbuf_r+0x12>
    48d4:	22f0      	movs	r2, #240	; 0xf0
    48d6:	9b02      	ldr	r3, [sp, #8]
    48d8:	0212      	lsls	r2, r2, #8
    48da:	4013      	ands	r3, r2
    48dc:	4a05      	ldr	r2, [pc, #20]	; (48f4 <__swhatbuf_r+0x4c>)
    48de:	189b      	adds	r3, r3, r2
    48e0:	425a      	negs	r2, r3
    48e2:	4153      	adcs	r3, r2
    48e4:	602b      	str	r3, [r5, #0]
    48e6:	e7ed      	b.n	48c4 <__swhatbuf_r+0x1c>
    48e8:	2340      	movs	r3, #64	; 0x40
    48ea:	2000      	movs	r0, #0
    48ec:	6023      	str	r3, [r4, #0]
    48ee:	b010      	add	sp, #64	; 0x40
    48f0:	bd70      	pop	{r4, r5, r6, pc}
    48f2:	46c0      	nop			; (mov r8, r8)
    48f4:	ffffe000 	.word	0xffffe000

000048f8 <__smakebuf_r>:
    48f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    48fa:	2602      	movs	r6, #2
    48fc:	898b      	ldrh	r3, [r1, #12]
    48fe:	0005      	movs	r5, r0
    4900:	000c      	movs	r4, r1
    4902:	4233      	tst	r3, r6
    4904:	d006      	beq.n	4914 <__smakebuf_r+0x1c>
    4906:	0023      	movs	r3, r4
    4908:	3347      	adds	r3, #71	; 0x47
    490a:	6023      	str	r3, [r4, #0]
    490c:	6123      	str	r3, [r4, #16]
    490e:	2301      	movs	r3, #1
    4910:	6163      	str	r3, [r4, #20]
    4912:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4914:	ab01      	add	r3, sp, #4
    4916:	466a      	mov	r2, sp
    4918:	f7ff ffc6 	bl	48a8 <__swhatbuf_r>
    491c:	9900      	ldr	r1, [sp, #0]
    491e:	0007      	movs	r7, r0
    4920:	0028      	movs	r0, r5
    4922:	f000 f877 	bl	4a14 <_malloc_r>
    4926:	2800      	cmp	r0, #0
    4928:	d108      	bne.n	493c <__smakebuf_r+0x44>
    492a:	220c      	movs	r2, #12
    492c:	5ea3      	ldrsh	r3, [r4, r2]
    492e:	059a      	lsls	r2, r3, #22
    4930:	d4ef      	bmi.n	4912 <__smakebuf_r+0x1a>
    4932:	2203      	movs	r2, #3
    4934:	4393      	bics	r3, r2
    4936:	431e      	orrs	r6, r3
    4938:	81a6      	strh	r6, [r4, #12]
    493a:	e7e4      	b.n	4906 <__smakebuf_r+0xe>
    493c:	4b0f      	ldr	r3, [pc, #60]	; (497c <__smakebuf_r+0x84>)
    493e:	62ab      	str	r3, [r5, #40]	; 0x28
    4940:	2380      	movs	r3, #128	; 0x80
    4942:	89a2      	ldrh	r2, [r4, #12]
    4944:	6020      	str	r0, [r4, #0]
    4946:	4313      	orrs	r3, r2
    4948:	81a3      	strh	r3, [r4, #12]
    494a:	9b00      	ldr	r3, [sp, #0]
    494c:	6120      	str	r0, [r4, #16]
    494e:	6163      	str	r3, [r4, #20]
    4950:	9b01      	ldr	r3, [sp, #4]
    4952:	2b00      	cmp	r3, #0
    4954:	d00d      	beq.n	4972 <__smakebuf_r+0x7a>
    4956:	230e      	movs	r3, #14
    4958:	5ee1      	ldrsh	r1, [r4, r3]
    495a:	0028      	movs	r0, r5
    495c:	f000 f94e 	bl	4bfc <_isatty_r>
    4960:	2800      	cmp	r0, #0
    4962:	d006      	beq.n	4972 <__smakebuf_r+0x7a>
    4964:	2203      	movs	r2, #3
    4966:	89a3      	ldrh	r3, [r4, #12]
    4968:	4393      	bics	r3, r2
    496a:	001a      	movs	r2, r3
    496c:	2301      	movs	r3, #1
    496e:	4313      	orrs	r3, r2
    4970:	81a3      	strh	r3, [r4, #12]
    4972:	89a0      	ldrh	r0, [r4, #12]
    4974:	4338      	orrs	r0, r7
    4976:	81a0      	strh	r0, [r4, #12]
    4978:	e7cb      	b.n	4912 <__smakebuf_r+0x1a>
    497a:	46c0      	nop			; (mov r8, r8)
    497c:	000046f9 	.word	0x000046f9

00004980 <_free_r>:
    4980:	b570      	push	{r4, r5, r6, lr}
    4982:	0005      	movs	r5, r0
    4984:	2900      	cmp	r1, #0
    4986:	d010      	beq.n	49aa <_free_r+0x2a>
    4988:	1f0c      	subs	r4, r1, #4
    498a:	6823      	ldr	r3, [r4, #0]
    498c:	2b00      	cmp	r3, #0
    498e:	da00      	bge.n	4992 <_free_r+0x12>
    4990:	18e4      	adds	r4, r4, r3
    4992:	0028      	movs	r0, r5
    4994:	f000 f958 	bl	4c48 <__malloc_lock>
    4998:	4a1d      	ldr	r2, [pc, #116]	; (4a10 <_free_r+0x90>)
    499a:	6813      	ldr	r3, [r2, #0]
    499c:	2b00      	cmp	r3, #0
    499e:	d105      	bne.n	49ac <_free_r+0x2c>
    49a0:	6063      	str	r3, [r4, #4]
    49a2:	6014      	str	r4, [r2, #0]
    49a4:	0028      	movs	r0, r5
    49a6:	f000 f950 	bl	4c4a <__malloc_unlock>
    49aa:	bd70      	pop	{r4, r5, r6, pc}
    49ac:	42a3      	cmp	r3, r4
    49ae:	d909      	bls.n	49c4 <_free_r+0x44>
    49b0:	6821      	ldr	r1, [r4, #0]
    49b2:	1860      	adds	r0, r4, r1
    49b4:	4283      	cmp	r3, r0
    49b6:	d1f3      	bne.n	49a0 <_free_r+0x20>
    49b8:	6818      	ldr	r0, [r3, #0]
    49ba:	685b      	ldr	r3, [r3, #4]
    49bc:	1841      	adds	r1, r0, r1
    49be:	6021      	str	r1, [r4, #0]
    49c0:	e7ee      	b.n	49a0 <_free_r+0x20>
    49c2:	0013      	movs	r3, r2
    49c4:	685a      	ldr	r2, [r3, #4]
    49c6:	2a00      	cmp	r2, #0
    49c8:	d001      	beq.n	49ce <_free_r+0x4e>
    49ca:	42a2      	cmp	r2, r4
    49cc:	d9f9      	bls.n	49c2 <_free_r+0x42>
    49ce:	6819      	ldr	r1, [r3, #0]
    49d0:	1858      	adds	r0, r3, r1
    49d2:	42a0      	cmp	r0, r4
    49d4:	d10b      	bne.n	49ee <_free_r+0x6e>
    49d6:	6820      	ldr	r0, [r4, #0]
    49d8:	1809      	adds	r1, r1, r0
    49da:	1858      	adds	r0, r3, r1
    49dc:	6019      	str	r1, [r3, #0]
    49de:	4282      	cmp	r2, r0
    49e0:	d1e0      	bne.n	49a4 <_free_r+0x24>
    49e2:	6810      	ldr	r0, [r2, #0]
    49e4:	6852      	ldr	r2, [r2, #4]
    49e6:	1841      	adds	r1, r0, r1
    49e8:	6019      	str	r1, [r3, #0]
    49ea:	605a      	str	r2, [r3, #4]
    49ec:	e7da      	b.n	49a4 <_free_r+0x24>
    49ee:	42a0      	cmp	r0, r4
    49f0:	d902      	bls.n	49f8 <_free_r+0x78>
    49f2:	230c      	movs	r3, #12
    49f4:	602b      	str	r3, [r5, #0]
    49f6:	e7d5      	b.n	49a4 <_free_r+0x24>
    49f8:	6821      	ldr	r1, [r4, #0]
    49fa:	1860      	adds	r0, r4, r1
    49fc:	4282      	cmp	r2, r0
    49fe:	d103      	bne.n	4a08 <_free_r+0x88>
    4a00:	6810      	ldr	r0, [r2, #0]
    4a02:	6852      	ldr	r2, [r2, #4]
    4a04:	1841      	adds	r1, r0, r1
    4a06:	6021      	str	r1, [r4, #0]
    4a08:	6062      	str	r2, [r4, #4]
    4a0a:	605c      	str	r4, [r3, #4]
    4a0c:	e7ca      	b.n	49a4 <_free_r+0x24>
    4a0e:	46c0      	nop			; (mov r8, r8)
    4a10:	20003c60 	.word	0x20003c60

00004a14 <_malloc_r>:
    4a14:	2303      	movs	r3, #3
    4a16:	b570      	push	{r4, r5, r6, lr}
    4a18:	1ccd      	adds	r5, r1, #3
    4a1a:	439d      	bics	r5, r3
    4a1c:	3508      	adds	r5, #8
    4a1e:	0006      	movs	r6, r0
    4a20:	2d0c      	cmp	r5, #12
    4a22:	d21e      	bcs.n	4a62 <_malloc_r+0x4e>
    4a24:	250c      	movs	r5, #12
    4a26:	42a9      	cmp	r1, r5
    4a28:	d81d      	bhi.n	4a66 <_malloc_r+0x52>
    4a2a:	0030      	movs	r0, r6
    4a2c:	f000 f90c 	bl	4c48 <__malloc_lock>
    4a30:	4a25      	ldr	r2, [pc, #148]	; (4ac8 <_malloc_r+0xb4>)
    4a32:	6814      	ldr	r4, [r2, #0]
    4a34:	0021      	movs	r1, r4
    4a36:	2900      	cmp	r1, #0
    4a38:	d119      	bne.n	4a6e <_malloc_r+0x5a>
    4a3a:	4c24      	ldr	r4, [pc, #144]	; (4acc <_malloc_r+0xb8>)
    4a3c:	6823      	ldr	r3, [r4, #0]
    4a3e:	2b00      	cmp	r3, #0
    4a40:	d103      	bne.n	4a4a <_malloc_r+0x36>
    4a42:	0030      	movs	r0, r6
    4a44:	f000 f844 	bl	4ad0 <_sbrk_r>
    4a48:	6020      	str	r0, [r4, #0]
    4a4a:	0029      	movs	r1, r5
    4a4c:	0030      	movs	r0, r6
    4a4e:	f000 f83f 	bl	4ad0 <_sbrk_r>
    4a52:	1c43      	adds	r3, r0, #1
    4a54:	d12c      	bne.n	4ab0 <_malloc_r+0x9c>
    4a56:	230c      	movs	r3, #12
    4a58:	0030      	movs	r0, r6
    4a5a:	6033      	str	r3, [r6, #0]
    4a5c:	f000 f8f5 	bl	4c4a <__malloc_unlock>
    4a60:	e003      	b.n	4a6a <_malloc_r+0x56>
    4a62:	2d00      	cmp	r5, #0
    4a64:	dadf      	bge.n	4a26 <_malloc_r+0x12>
    4a66:	230c      	movs	r3, #12
    4a68:	6033      	str	r3, [r6, #0]
    4a6a:	2000      	movs	r0, #0
    4a6c:	bd70      	pop	{r4, r5, r6, pc}
    4a6e:	680b      	ldr	r3, [r1, #0]
    4a70:	1b5b      	subs	r3, r3, r5
    4a72:	d41a      	bmi.n	4aaa <_malloc_r+0x96>
    4a74:	2b0b      	cmp	r3, #11
    4a76:	d903      	bls.n	4a80 <_malloc_r+0x6c>
    4a78:	600b      	str	r3, [r1, #0]
    4a7a:	18cc      	adds	r4, r1, r3
    4a7c:	6025      	str	r5, [r4, #0]
    4a7e:	e003      	b.n	4a88 <_malloc_r+0x74>
    4a80:	428c      	cmp	r4, r1
    4a82:	d10e      	bne.n	4aa2 <_malloc_r+0x8e>
    4a84:	6863      	ldr	r3, [r4, #4]
    4a86:	6013      	str	r3, [r2, #0]
    4a88:	0030      	movs	r0, r6
    4a8a:	f000 f8de 	bl	4c4a <__malloc_unlock>
    4a8e:	0020      	movs	r0, r4
    4a90:	2207      	movs	r2, #7
    4a92:	300b      	adds	r0, #11
    4a94:	1d23      	adds	r3, r4, #4
    4a96:	4390      	bics	r0, r2
    4a98:	1ac3      	subs	r3, r0, r3
    4a9a:	d0e7      	beq.n	4a6c <_malloc_r+0x58>
    4a9c:	425a      	negs	r2, r3
    4a9e:	50e2      	str	r2, [r4, r3]
    4aa0:	e7e4      	b.n	4a6c <_malloc_r+0x58>
    4aa2:	684b      	ldr	r3, [r1, #4]
    4aa4:	6063      	str	r3, [r4, #4]
    4aa6:	000c      	movs	r4, r1
    4aa8:	e7ee      	b.n	4a88 <_malloc_r+0x74>
    4aaa:	000c      	movs	r4, r1
    4aac:	6849      	ldr	r1, [r1, #4]
    4aae:	e7c2      	b.n	4a36 <_malloc_r+0x22>
    4ab0:	2303      	movs	r3, #3
    4ab2:	1cc4      	adds	r4, r0, #3
    4ab4:	439c      	bics	r4, r3
    4ab6:	42a0      	cmp	r0, r4
    4ab8:	d0e0      	beq.n	4a7c <_malloc_r+0x68>
    4aba:	1a21      	subs	r1, r4, r0
    4abc:	0030      	movs	r0, r6
    4abe:	f000 f807 	bl	4ad0 <_sbrk_r>
    4ac2:	1c43      	adds	r3, r0, #1
    4ac4:	d1da      	bne.n	4a7c <_malloc_r+0x68>
    4ac6:	e7c6      	b.n	4a56 <_malloc_r+0x42>
    4ac8:	20003c60 	.word	0x20003c60
    4acc:	20003c64 	.word	0x20003c64

00004ad0 <_sbrk_r>:
    4ad0:	2300      	movs	r3, #0
    4ad2:	b570      	push	{r4, r5, r6, lr}
    4ad4:	4c06      	ldr	r4, [pc, #24]	; (4af0 <_sbrk_r+0x20>)
    4ad6:	0005      	movs	r5, r0
    4ad8:	0008      	movs	r0, r1
    4ada:	6023      	str	r3, [r4, #0]
    4adc:	f7fc ff64 	bl	19a8 <_sbrk>
    4ae0:	1c43      	adds	r3, r0, #1
    4ae2:	d103      	bne.n	4aec <_sbrk_r+0x1c>
    4ae4:	6823      	ldr	r3, [r4, #0]
    4ae6:	2b00      	cmp	r3, #0
    4ae8:	d000      	beq.n	4aec <_sbrk_r+0x1c>
    4aea:	602b      	str	r3, [r5, #0]
    4aec:	bd70      	pop	{r4, r5, r6, pc}
    4aee:	46c0      	nop			; (mov r8, r8)
    4af0:	20003cac 	.word	0x20003cac

00004af4 <__sread>:
    4af4:	b570      	push	{r4, r5, r6, lr}
    4af6:	000c      	movs	r4, r1
    4af8:	250e      	movs	r5, #14
    4afa:	5f49      	ldrsh	r1, [r1, r5]
    4afc:	f000 f8a6 	bl	4c4c <_read_r>
    4b00:	2800      	cmp	r0, #0
    4b02:	db03      	blt.n	4b0c <__sread+0x18>
    4b04:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4b06:	181b      	adds	r3, r3, r0
    4b08:	6563      	str	r3, [r4, #84]	; 0x54
    4b0a:	bd70      	pop	{r4, r5, r6, pc}
    4b0c:	89a3      	ldrh	r3, [r4, #12]
    4b0e:	4a02      	ldr	r2, [pc, #8]	; (4b18 <__sread+0x24>)
    4b10:	4013      	ands	r3, r2
    4b12:	81a3      	strh	r3, [r4, #12]
    4b14:	e7f9      	b.n	4b0a <__sread+0x16>
    4b16:	46c0      	nop			; (mov r8, r8)
    4b18:	ffffefff 	.word	0xffffefff

00004b1c <__swrite>:
    4b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b1e:	001f      	movs	r7, r3
    4b20:	898b      	ldrh	r3, [r1, #12]
    4b22:	0005      	movs	r5, r0
    4b24:	000c      	movs	r4, r1
    4b26:	0016      	movs	r6, r2
    4b28:	05db      	lsls	r3, r3, #23
    4b2a:	d505      	bpl.n	4b38 <__swrite+0x1c>
    4b2c:	230e      	movs	r3, #14
    4b2e:	5ec9      	ldrsh	r1, [r1, r3]
    4b30:	2200      	movs	r2, #0
    4b32:	2302      	movs	r3, #2
    4b34:	f000 f874 	bl	4c20 <_lseek_r>
    4b38:	89a3      	ldrh	r3, [r4, #12]
    4b3a:	4a05      	ldr	r2, [pc, #20]	; (4b50 <__swrite+0x34>)
    4b3c:	0028      	movs	r0, r5
    4b3e:	4013      	ands	r3, r2
    4b40:	81a3      	strh	r3, [r4, #12]
    4b42:	0032      	movs	r2, r6
    4b44:	230e      	movs	r3, #14
    4b46:	5ee1      	ldrsh	r1, [r4, r3]
    4b48:	003b      	movs	r3, r7
    4b4a:	f000 f81f 	bl	4b8c <_write_r>
    4b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b50:	ffffefff 	.word	0xffffefff

00004b54 <__sseek>:
    4b54:	b570      	push	{r4, r5, r6, lr}
    4b56:	000c      	movs	r4, r1
    4b58:	250e      	movs	r5, #14
    4b5a:	5f49      	ldrsh	r1, [r1, r5]
    4b5c:	f000 f860 	bl	4c20 <_lseek_r>
    4b60:	89a3      	ldrh	r3, [r4, #12]
    4b62:	1c42      	adds	r2, r0, #1
    4b64:	d103      	bne.n	4b6e <__sseek+0x1a>
    4b66:	4a05      	ldr	r2, [pc, #20]	; (4b7c <__sseek+0x28>)
    4b68:	4013      	ands	r3, r2
    4b6a:	81a3      	strh	r3, [r4, #12]
    4b6c:	bd70      	pop	{r4, r5, r6, pc}
    4b6e:	2280      	movs	r2, #128	; 0x80
    4b70:	0152      	lsls	r2, r2, #5
    4b72:	4313      	orrs	r3, r2
    4b74:	81a3      	strh	r3, [r4, #12]
    4b76:	6560      	str	r0, [r4, #84]	; 0x54
    4b78:	e7f8      	b.n	4b6c <__sseek+0x18>
    4b7a:	46c0      	nop			; (mov r8, r8)
    4b7c:	ffffefff 	.word	0xffffefff

00004b80 <__sclose>:
    4b80:	b510      	push	{r4, lr}
    4b82:	230e      	movs	r3, #14
    4b84:	5ec9      	ldrsh	r1, [r1, r3]
    4b86:	f000 f815 	bl	4bb4 <_close_r>
    4b8a:	bd10      	pop	{r4, pc}

00004b8c <_write_r>:
    4b8c:	b570      	push	{r4, r5, r6, lr}
    4b8e:	0005      	movs	r5, r0
    4b90:	0008      	movs	r0, r1
    4b92:	0011      	movs	r1, r2
    4b94:	2200      	movs	r2, #0
    4b96:	4c06      	ldr	r4, [pc, #24]	; (4bb0 <_write_r+0x24>)
    4b98:	6022      	str	r2, [r4, #0]
    4b9a:	001a      	movs	r2, r3
    4b9c:	f000 f872 	bl	4c84 <_write>
    4ba0:	1c43      	adds	r3, r0, #1
    4ba2:	d103      	bne.n	4bac <_write_r+0x20>
    4ba4:	6823      	ldr	r3, [r4, #0]
    4ba6:	2b00      	cmp	r3, #0
    4ba8:	d000      	beq.n	4bac <_write_r+0x20>
    4baa:	602b      	str	r3, [r5, #0]
    4bac:	bd70      	pop	{r4, r5, r6, pc}
    4bae:	46c0      	nop			; (mov r8, r8)
    4bb0:	20003cac 	.word	0x20003cac

00004bb4 <_close_r>:
    4bb4:	2300      	movs	r3, #0
    4bb6:	b570      	push	{r4, r5, r6, lr}
    4bb8:	4c06      	ldr	r4, [pc, #24]	; (4bd4 <_close_r+0x20>)
    4bba:	0005      	movs	r5, r0
    4bbc:	0008      	movs	r0, r1
    4bbe:	6023      	str	r3, [r4, #0]
    4bc0:	f7fc ff04 	bl	19cc <_close>
    4bc4:	1c43      	adds	r3, r0, #1
    4bc6:	d103      	bne.n	4bd0 <_close_r+0x1c>
    4bc8:	6823      	ldr	r3, [r4, #0]
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d000      	beq.n	4bd0 <_close_r+0x1c>
    4bce:	602b      	str	r3, [r5, #0]
    4bd0:	bd70      	pop	{r4, r5, r6, pc}
    4bd2:	46c0      	nop			; (mov r8, r8)
    4bd4:	20003cac 	.word	0x20003cac

00004bd8 <_fstat_r>:
    4bd8:	2300      	movs	r3, #0
    4bda:	b570      	push	{r4, r5, r6, lr}
    4bdc:	4c06      	ldr	r4, [pc, #24]	; (4bf8 <_fstat_r+0x20>)
    4bde:	0005      	movs	r5, r0
    4be0:	0008      	movs	r0, r1
    4be2:	0011      	movs	r1, r2
    4be4:	6023      	str	r3, [r4, #0]
    4be6:	f7fc fef4 	bl	19d2 <_fstat>
    4bea:	1c43      	adds	r3, r0, #1
    4bec:	d103      	bne.n	4bf6 <_fstat_r+0x1e>
    4bee:	6823      	ldr	r3, [r4, #0]
    4bf0:	2b00      	cmp	r3, #0
    4bf2:	d000      	beq.n	4bf6 <_fstat_r+0x1e>
    4bf4:	602b      	str	r3, [r5, #0]
    4bf6:	bd70      	pop	{r4, r5, r6, pc}
    4bf8:	20003cac 	.word	0x20003cac

00004bfc <_isatty_r>:
    4bfc:	2300      	movs	r3, #0
    4bfe:	b570      	push	{r4, r5, r6, lr}
    4c00:	4c06      	ldr	r4, [pc, #24]	; (4c1c <_isatty_r+0x20>)
    4c02:	0005      	movs	r5, r0
    4c04:	0008      	movs	r0, r1
    4c06:	6023      	str	r3, [r4, #0]
    4c08:	f7fc fee8 	bl	19dc <_isatty>
    4c0c:	1c43      	adds	r3, r0, #1
    4c0e:	d103      	bne.n	4c18 <_isatty_r+0x1c>
    4c10:	6823      	ldr	r3, [r4, #0]
    4c12:	2b00      	cmp	r3, #0
    4c14:	d000      	beq.n	4c18 <_isatty_r+0x1c>
    4c16:	602b      	str	r3, [r5, #0]
    4c18:	bd70      	pop	{r4, r5, r6, pc}
    4c1a:	46c0      	nop			; (mov r8, r8)
    4c1c:	20003cac 	.word	0x20003cac

00004c20 <_lseek_r>:
    4c20:	b570      	push	{r4, r5, r6, lr}
    4c22:	0005      	movs	r5, r0
    4c24:	0008      	movs	r0, r1
    4c26:	0011      	movs	r1, r2
    4c28:	2200      	movs	r2, #0
    4c2a:	4c06      	ldr	r4, [pc, #24]	; (4c44 <_lseek_r+0x24>)
    4c2c:	6022      	str	r2, [r4, #0]
    4c2e:	001a      	movs	r2, r3
    4c30:	f7fc fed6 	bl	19e0 <_lseek>
    4c34:	1c43      	adds	r3, r0, #1
    4c36:	d103      	bne.n	4c40 <_lseek_r+0x20>
    4c38:	6823      	ldr	r3, [r4, #0]
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	d000      	beq.n	4c40 <_lseek_r+0x20>
    4c3e:	602b      	str	r3, [r5, #0]
    4c40:	bd70      	pop	{r4, r5, r6, pc}
    4c42:	46c0      	nop			; (mov r8, r8)
    4c44:	20003cac 	.word	0x20003cac

00004c48 <__malloc_lock>:
    4c48:	4770      	bx	lr

00004c4a <__malloc_unlock>:
    4c4a:	4770      	bx	lr

00004c4c <_read_r>:
    4c4c:	b570      	push	{r4, r5, r6, lr}
    4c4e:	0005      	movs	r5, r0
    4c50:	0008      	movs	r0, r1
    4c52:	0011      	movs	r1, r2
    4c54:	2200      	movs	r2, #0
    4c56:	4c06      	ldr	r4, [pc, #24]	; (4c70 <_read_r+0x24>)
    4c58:	6022      	str	r2, [r4, #0]
    4c5a:	001a      	movs	r2, r3
    4c5c:	f000 f80a 	bl	4c74 <_read>
    4c60:	1c43      	adds	r3, r0, #1
    4c62:	d103      	bne.n	4c6c <_read_r+0x20>
    4c64:	6823      	ldr	r3, [r4, #0]
    4c66:	2b00      	cmp	r3, #0
    4c68:	d000      	beq.n	4c6c <_read_r+0x20>
    4c6a:	602b      	str	r3, [r5, #0]
    4c6c:	bd70      	pop	{r4, r5, r6, pc}
    4c6e:	46c0      	nop			; (mov r8, r8)
    4c70:	20003cac 	.word	0x20003cac

00004c74 <_read>:
    4c74:	2258      	movs	r2, #88	; 0x58
    4c76:	2001      	movs	r0, #1
    4c78:	4b01      	ldr	r3, [pc, #4]	; (4c80 <_read+0xc>)
    4c7a:	4240      	negs	r0, r0
    4c7c:	601a      	str	r2, [r3, #0]
    4c7e:	4770      	bx	lr
    4c80:	20003cac 	.word	0x20003cac

00004c84 <_write>:
    4c84:	2258      	movs	r2, #88	; 0x58
    4c86:	2001      	movs	r0, #1
    4c88:	4b01      	ldr	r3, [pc, #4]	; (4c90 <_write+0xc>)
    4c8a:	4240      	negs	r0, r0
    4c8c:	601a      	str	r2, [r3, #0]
    4c8e:	4770      	bx	lr
    4c90:	20003cac 	.word	0x20003cac
    4c94:	42000800 	.word	0x42000800
    4c98:	42000c00 	.word	0x42000c00
    4c9c:	42001000 	.word	0x42001000
    4ca0:	42001400 	.word	0x42001400
    4ca4:	42001800 	.word	0x42001800
    4ca8:	42001c00 	.word	0x42001c00
    4cac:	00001132 	.word	0x00001132
    4cb0:	0000112e 	.word	0x0000112e
    4cb4:	0000112e 	.word	0x0000112e
    4cb8:	00001194 	.word	0x00001194
    4cbc:	00001194 	.word	0x00001194
    4cc0:	00001146 	.word	0x00001146
    4cc4:	00001138 	.word	0x00001138
    4cc8:	0000114c 	.word	0x0000114c
    4ccc:	00001182 	.word	0x00001182
    4cd0:	00001354 	.word	0x00001354
    4cd4:	00001334 	.word	0x00001334
    4cd8:	00001334 	.word	0x00001334
    4cdc:	000013c0 	.word	0x000013c0
    4ce0:	00001346 	.word	0x00001346
    4ce4:	00001362 	.word	0x00001362
    4ce8:	00001338 	.word	0x00001338
    4cec:	00001370 	.word	0x00001370
    4cf0:	000013b0 	.word	0x000013b0
    4cf4:	454c4449 	.word	0x454c4449
    4cf8:	00000000 	.word	0x00000000
    4cfc:	6c756f43 	.word	0x6c756f43
    4d00:	6f6e2064 	.word	0x6f6e2064
    4d04:	6e692074 	.word	0x6e692074
    4d08:	61697469 	.word	0x61697469
    4d0c:	657a696c 	.word	0x657a696c
    4d10:	63326920 	.word	0x63326920
    4d14:	00000000 	.word	0x00000000
    4d18:	54524155 	.word	0x54524155
    4d1c:	7361745f 	.word	0x7361745f
    4d20:	0000006b 	.word	0x0000006b
    4d24:	0000303c 	.word	0x0000303c
    4d28:	0000301e 	.word	0x0000301e
    4d2c:	00002fd8 	.word	0x00002fd8
    4d30:	00002ef6 	.word	0x00002ef6
    4d34:	00002fd8 	.word	0x00002fd8
    4d38:	00003010 	.word	0x00003010
    4d3c:	00002fd8 	.word	0x00002fd8
    4d40:	00002ef6 	.word	0x00002ef6
    4d44:	0000301e 	.word	0x0000301e
    4d48:	0000301e 	.word	0x0000301e
    4d4c:	00003010 	.word	0x00003010
    4d50:	00002ef6 	.word	0x00002ef6
    4d54:	00002eee 	.word	0x00002eee
    4d58:	00002eee 	.word	0x00002eee
    4d5c:	00002eee 	.word	0x00002eee
    4d60:	00003254 	.word	0x00003254
    4d64:	0000369c 	.word	0x0000369c
    4d68:	0000355c 	.word	0x0000355c
    4d6c:	0000355c 	.word	0x0000355c
    4d70:	00003558 	.word	0x00003558
    4d74:	00003674 	.word	0x00003674
    4d78:	00003674 	.word	0x00003674
    4d7c:	00003666 	.word	0x00003666
    4d80:	00003558 	.word	0x00003558
    4d84:	00003674 	.word	0x00003674
    4d88:	00003666 	.word	0x00003666
    4d8c:	00003674 	.word	0x00003674
    4d90:	00003558 	.word	0x00003558
    4d94:	0000367c 	.word	0x0000367c
    4d98:	0000367c 	.word	0x0000367c
    4d9c:	0000367c 	.word	0x0000367c
    4da0:	00003880 	.word	0x00003880

00004da4 <_global_impure_ptr>:
    4da4:	2000001c                                ... 

00004da8 <__sf_fake_stderr>:
	...

00004dc8 <__sf_fake_stdin>:
	...

00004de8 <__sf_fake_stdout>:
	...

00004e08 <_init>:
    4e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e0a:	46c0      	nop			; (mov r8, r8)
    4e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4e0e:	bc08      	pop	{r3}
    4e10:	469e      	mov	lr, r3
    4e12:	4770      	bx	lr

00004e14 <__init_array_start>:
    4e14:	000000dd 	.word	0x000000dd

00004e18 <_fini>:
    4e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4e1e:	bc08      	pop	{r3}
    4e20:	469e      	mov	lr, r3
    4e22:	4770      	bx	lr

00004e24 <__fini_array_start>:
    4e24:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <xNextTaskUnblockTime>:
20000014:	ffff ffff                                   ....

20000018 <_impure_ptr>:
20000018:	001c 2000                                   ... 

2000001c <impure_data>:
2000001c:	0000 0000 4dc8 0000 4de8 0000 4da8 0000     .....M...M...M..
	...
