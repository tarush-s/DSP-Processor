
SensorFusion2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005388  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005388  00005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000074  20000000  00005390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000194  20000074  00005404  00020074  2**2
                  ALLOC
  4 .stack        00002000  20000208  00005598  00020074  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00037795  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000048d2  00000000  00000000  0005788a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006d0f  00000000  00000000  0005c15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000678  00000000  00000000  00062e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000760  00000000  00000000  000634e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c981  00000000  00000000  00063c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fd5c  00000000  00000000  000805c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008d946  00000000  00000000  00090320  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000183c  00000000  00000000  0011dc68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 22 00 20 c9 24 00 00 c5 24 00 00 c5 24 00 00     .". .$...$...$..
	...
      2c:	c5 24 00 00 00 00 00 00 00 00 00 00 c5 24 00 00     .$...........$..
      3c:	c5 24 00 00 c5 24 00 00 c5 24 00 00 c5 24 00 00     .$...$...$...$..
      4c:	c5 24 00 00 c5 24 00 00 c5 24 00 00 c5 24 00 00     .$...$...$...$..
      5c:	c5 24 00 00 c5 24 00 00 01 1a 00 00 11 1a 00 00     .$...$..........
      6c:	21 1a 00 00 31 1a 00 00 41 1a 00 00 51 1a 00 00     !...1...A...Q...
      7c:	f9 0f 00 00 09 10 00 00 19 10 00 00 c5 24 00 00     .............$..
      8c:	c5 24 00 00 c5 24 00 00 00 00 00 00 00 00 00 00     .$...$..........
      9c:	c5 24 00 00 c5 24 00 00 c5 24 00 00 c5 24 00 00     .$...$...$...$..
      ac:	c5 24 00 00 00 00 00 00                             .$......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	00005390 	.word	0x00005390

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00005390 	.word	0x00005390
     10c:	00005390 	.word	0x00005390
     110:	00000000 	.word	0x00000000

00000114 <ADXL345_ReadRegister>:
}
/******************************************************************************
* low Level functions
******************************************************************************/

status_code_genare_t ADXL345_ReadRegister(ADXL_345 *sensor, uint8_t reg, uint8_t *rx_data, uint16_t length){
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46d6      	mov	lr, sl
     118:	464f      	mov	r7, r9
     11a:	b580      	push	{r7, lr}
     11c:	b085      	sub	sp, #20
     11e:	0007      	movs	r7, r0
     120:	9201      	str	r2, [sp, #4]
     122:	9302      	str	r3, [sp, #8]
     124:	ab02      	add	r3, sp, #8
     126:	71d9      	strb	r1, [r3, #7]
     128:	3307      	adds	r3, #7
	
	sensor->master_packet->data_length = (uint16_t)1;
     12a:	2201      	movs	r2, #1
     12c:	6981      	ldr	r1, [r0, #24]
     12e:	804a      	strh	r2, [r1, #2]
	sensor->master_packet->data = &reg;
     130:	6982      	ldr	r2, [r0, #24]
     132:	6053      	str	r3, [r2, #4]

	status_code_genare_t err = i2c_master_write_packet_wait_no_stop(sensor->i2c_master,sensor->master_packet);
     134:	6981      	ldr	r1, [r0, #24]
     136:	6940      	ldr	r0, [r0, #20]
     138:	4b23      	ldr	r3, [pc, #140]	; (1c8 <ADXL345_ReadRegister+0xb4>)
     13a:	4798      	blx	r3
     13c:	9000      	str	r0, [sp, #0]
	if(err != STATUS_OK){
     13e:	2800      	cmp	r0, #0
     140:	d005      	beq.n	14e <ADXL345_ReadRegister+0x3a>
	
	/* Delay between consecutive reads / writes */
	delay_us(25);
	
	return err;
}
     142:	9800      	ldr	r0, [sp, #0]
     144:	b005      	add	sp, #20
     146:	bc0c      	pop	{r2, r3}
     148:	4691      	mov	r9, r2
     14a:	469a      	mov	sl, r3
     14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	delay_us(25);
     14e:	2000      	movs	r0, #0
     150:	4e1e      	ldr	r6, [pc, #120]	; (1cc <ADXL345_ReadRegister+0xb8>)
     152:	47b0      	blx	r6
     154:	0004      	movs	r4, r0
     156:	2500      	movs	r5, #0
     158:	0f83      	lsrs	r3, r0, #30
     15a:	0082      	lsls	r2, r0, #2
     15c:	1912      	adds	r2, r2, r4
     15e:	416b      	adcs	r3, r5
     160:	0f94      	lsrs	r4, r2, #30
     162:	0099      	lsls	r1, r3, #2
     164:	4321      	orrs	r1, r4
     166:	0090      	lsls	r0, r2, #2
     168:	1880      	adds	r0, r0, r2
     16a:	4159      	adcs	r1, r3
     16c:	4c18      	ldr	r4, [pc, #96]	; (1d0 <ADXL345_ReadRegister+0xbc>)
     16e:	2500      	movs	r5, #0
     170:	1900      	adds	r0, r0, r4
     172:	4169      	adcs	r1, r5
     174:	4b17      	ldr	r3, [pc, #92]	; (1d4 <ADXL345_ReadRegister+0xc0>)
     176:	469a      	mov	sl, r3
     178:	4a17      	ldr	r2, [pc, #92]	; (1d8 <ADXL345_ReadRegister+0xc4>)
     17a:	2300      	movs	r3, #0
     17c:	47d0      	blx	sl
     17e:	4b17      	ldr	r3, [pc, #92]	; (1dc <ADXL345_ReadRegister+0xc8>)
     180:	4699      	mov	r9, r3
     182:	4798      	blx	r3
	sensor->master_packet->data_length = length;
     184:	69bb      	ldr	r3, [r7, #24]
     186:	466a      	mov	r2, sp
     188:	8912      	ldrh	r2, [r2, #8]
     18a:	805a      	strh	r2, [r3, #2]
	sensor->master_packet->data = rx_data;
     18c:	69bb      	ldr	r3, [r7, #24]
     18e:	9a01      	ldr	r2, [sp, #4]
     190:	605a      	str	r2, [r3, #4]
	err = i2c_master_read_packet_wait(sensor->i2c_master,sensor->master_packet);
     192:	69b9      	ldr	r1, [r7, #24]
     194:	6978      	ldr	r0, [r7, #20]
     196:	4b12      	ldr	r3, [pc, #72]	; (1e0 <ADXL345_ReadRegister+0xcc>)
     198:	4798      	blx	r3
     19a:	9000      	str	r0, [sp, #0]
	delay_us(25);
     19c:	2000      	movs	r0, #0
     19e:	47b0      	blx	r6
     1a0:	0006      	movs	r6, r0
     1a2:	2700      	movs	r7, #0
     1a4:	0f83      	lsrs	r3, r0, #30
     1a6:	0082      	lsls	r2, r0, #2
     1a8:	1992      	adds	r2, r2, r6
     1aa:	417b      	adcs	r3, r7
     1ac:	0f96      	lsrs	r6, r2, #30
     1ae:	0099      	lsls	r1, r3, #2
     1b0:	4331      	orrs	r1, r6
     1b2:	0090      	lsls	r0, r2, #2
     1b4:	1880      	adds	r0, r0, r2
     1b6:	4159      	adcs	r1, r3
     1b8:	1900      	adds	r0, r0, r4
     1ba:	4169      	adcs	r1, r5
     1bc:	4a06      	ldr	r2, [pc, #24]	; (1d8 <ADXL345_ReadRegister+0xc4>)
     1be:	2300      	movs	r3, #0
     1c0:	47d0      	blx	sl
     1c2:	47c8      	blx	r9
	return err;
     1c4:	e7bd      	b.n	142 <ADXL345_ReadRegister+0x2e>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	000009b5 	.word	0x000009b5
     1cc:	00002255 	.word	0x00002255
     1d0:	006acfbf 	.word	0x006acfbf
     1d4:	000033b5 	.word	0x000033b5
     1d8:	006acfc0 	.word	0x006acfc0
     1dc:	20000001 	.word	0x20000001
     1e0:	0000098d 	.word	0x0000098d

000001e4 <ADXL345_get_data>:
uint8_t ADXL345_get_data(ADXL_345 *sensor){
     1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e6:	46d6      	mov	lr, sl
     1e8:	464f      	mov	r7, r9
     1ea:	4646      	mov	r6, r8
     1ec:	b5c0      	push	{r6, r7, lr}
     1ee:	b082      	sub	sp, #8
     1f0:	0004      	movs	r4, r0
	uint8_t read_buffer[6] = {0,0,0,0,0,0};
     1f2:	2206      	movs	r2, #6
     1f4:	2100      	movs	r1, #0
     1f6:	4668      	mov	r0, sp
     1f8:	4b1f      	ldr	r3, [pc, #124]	; (278 <ADXL345_get_data+0x94>)
     1fa:	4798      	blx	r3
	status_check = ADXL345_ReadRegister(sensor, ADXL345_DATAX0, read_buffer, 6);
     1fc:	2306      	movs	r3, #6
     1fe:	466a      	mov	r2, sp
     200:	2132      	movs	r1, #50	; 0x32
     202:	0020      	movs	r0, r4
     204:	4d1d      	ldr	r5, [pc, #116]	; (27c <ADXL345_get_data+0x98>)
     206:	47a8      	blx	r5
     208:	4680      	mov	r8, r0
	x = ((int16_t)read_buffer[1] << 8) + read_buffer[0];
     20a:	466b      	mov	r3, sp
     20c:	785b      	ldrb	r3, [r3, #1]
     20e:	021b      	lsls	r3, r3, #8
     210:	466a      	mov	r2, sp
     212:	7810      	ldrb	r0, [r2, #0]
     214:	18c0      	adds	r0, r0, r3
     216:	b200      	sxth	r0, r0
	y = ((int16_t)read_buffer[3] << 8) + read_buffer[2];
     218:	78d3      	ldrb	r3, [r2, #3]
     21a:	021b      	lsls	r3, r3, #8
     21c:	7897      	ldrb	r7, [r2, #2]
     21e:	18ff      	adds	r7, r7, r3
     220:	b23f      	sxth	r7, r7
	z = ((int16_t)read_buffer[5] << 8) + read_buffer[4];
     222:	7953      	ldrb	r3, [r2, #5]
     224:	021b      	lsls	r3, r3, #8
     226:	7915      	ldrb	r5, [r2, #4]
     228:	18ed      	adds	r5, r5, r3
     22a:	b22d      	sxth	r5, r5
	sensor->acc_raw[0] = x;
     22c:	8020      	strh	r0, [r4, #0]
	sensor->acc_raw[1] = y;
     22e:	8067      	strh	r7, [r4, #2]
	sensor->acc_raw[2] = z;
     230:	80a5      	strh	r5, [r4, #4]
	x_acc = x * MGM2G_VALUE; 
     232:	4e13      	ldr	r6, [pc, #76]	; (280 <ADXL345_get_data+0x9c>)
     234:	47b0      	blx	r6
     236:	4b13      	ldr	r3, [pc, #76]	; (284 <ADXL345_get_data+0xa0>)
     238:	469a      	mov	sl, r3
     23a:	4a13      	ldr	r2, [pc, #76]	; (288 <ADXL345_get_data+0xa4>)
     23c:	4b13      	ldr	r3, [pc, #76]	; (28c <ADXL345_get_data+0xa8>)
     23e:	47d0      	blx	sl
     240:	4b13      	ldr	r3, [pc, #76]	; (290 <ADXL345_get_data+0xac>)
     242:	4699      	mov	r9, r3
     244:	4798      	blx	r3
     246:	60a0      	str	r0, [r4, #8]
	y_acc = y * MGM2G_VALUE;
     248:	0038      	movs	r0, r7
     24a:	47b0      	blx	r6
     24c:	4a0e      	ldr	r2, [pc, #56]	; (288 <ADXL345_get_data+0xa4>)
     24e:	4b0f      	ldr	r3, [pc, #60]	; (28c <ADXL345_get_data+0xa8>)
     250:	47d0      	blx	sl
     252:	47c8      	blx	r9
     254:	60e0      	str	r0, [r4, #12]
	z_acc = z * MGM2G_VALUE;
     256:	0028      	movs	r0, r5
     258:	47b0      	blx	r6
     25a:	4a0b      	ldr	r2, [pc, #44]	; (288 <ADXL345_get_data+0xa4>)
     25c:	4b0b      	ldr	r3, [pc, #44]	; (28c <ADXL345_get_data+0xa8>)
     25e:	47d0      	blx	sl
     260:	47c8      	blx	r9
     262:	6120      	str	r0, [r4, #16]
	if(status_check != STATUS_OK){
     264:	4640      	mov	r0, r8
     266:	1e43      	subs	r3, r0, #1
     268:	4198      	sbcs	r0, r3
	return error;
     26a:	b2c0      	uxtb	r0, r0
}
     26c:	b002      	add	sp, #8
     26e:	bc1c      	pop	{r2, r3, r4}
     270:	4690      	mov	r8, r2
     272:	4699      	mov	r9, r3
     274:	46a2      	mov	sl, r4
     276:	bdf0      	pop	{r4, r5, r6, r7, pc}
     278:	000027b9 	.word	0x000027b9
     27c:	00000115 	.word	0x00000115
     280:	00004de5 	.word	0x00004de5
     284:	00004251 	.word	0x00004251
     288:	8e8a71de 	.word	0x8e8a71de
     28c:	3f6ff2e4 	.word	0x3f6ff2e4
     290:	00004f7d 	.word	0x00004f7d

00000294 <ADXL345_WriteRegister>:
status_code_genare_t ADXL345_WriteRegister(ADXL_345 *sensor, uint8_t reg, uint8_t *tx_data, uint16_t length){
     294:	b570      	push	{r4, r5, r6, lr}
     296:	b084      	sub	sp, #16
	
	/*Create a local buffer to combine register address and tx data*/
	uint8_t local_buffer[10];
	
	/*Add register address*/
	local_buffer[0] = reg;
     298:	ac01      	add	r4, sp, #4
     29a:	7021      	strb	r1, [r4, #0]
	
	/*Copy tx buffer into our local buffer*/
	for(int i = 0; i < length; i++){
     29c:	1e1d      	subs	r5, r3, #0
     29e:	dd07      	ble.n	2b0 <ADXL345_WriteRegister+0x1c>
     2a0:	2100      	movs	r1, #0
		local_buffer[i+1] = tx_data[i];
     2a2:	0026      	movs	r6, r4
     2a4:	3101      	adds	r1, #1
     2a6:	7814      	ldrb	r4, [r2, #0]
     2a8:	558c      	strb	r4, [r1, r6]
     2aa:	3201      	adds	r2, #1
	for(int i = 0; i < length; i++){
     2ac:	42a9      	cmp	r1, r5
     2ae:	dbf9      	blt.n	2a4 <ADXL345_WriteRegister+0x10>
	}
	
	sensor->master_packet->data_length = (length + 1);
     2b0:	3301      	adds	r3, #1
     2b2:	6982      	ldr	r2, [r0, #24]
     2b4:	8053      	strh	r3, [r2, #2]
	sensor->master_packet->data = local_buffer;
     2b6:	6983      	ldr	r3, [r0, #24]
     2b8:	aa01      	add	r2, sp, #4
     2ba:	605a      	str	r2, [r3, #4]
	
	status_code_genare_t err = i2c_master_write_packet_wait(sensor->i2c_master,sensor->master_packet);
     2bc:	6981      	ldr	r1, [r0, #24]
     2be:	6940      	ldr	r0, [r0, #20]
     2c0:	4b0f      	ldr	r3, [pc, #60]	; (300 <ADXL345_WriteRegister+0x6c>)
     2c2:	4798      	blx	r3
     2c4:	0004      	movs	r4, r0
	
	/* Delay between consecutive reads / writes */
	delay_us(25);
     2c6:	2000      	movs	r0, #0
     2c8:	4b0e      	ldr	r3, [pc, #56]	; (304 <ADXL345_WriteRegister+0x70>)
     2ca:	4798      	blx	r3
     2cc:	0002      	movs	r2, r0
     2ce:	2300      	movs	r3, #0
     2d0:	0f91      	lsrs	r1, r2, #30
     2d2:	0090      	lsls	r0, r2, #2
     2d4:	1880      	adds	r0, r0, r2
     2d6:	4159      	adcs	r1, r3
     2d8:	0f85      	lsrs	r5, r0, #30
     2da:	008b      	lsls	r3, r1, #2
     2dc:	432b      	orrs	r3, r5
     2de:	0082      	lsls	r2, r0, #2
     2e0:	1880      	adds	r0, r0, r2
     2e2:	4159      	adcs	r1, r3
     2e4:	4a08      	ldr	r2, [pc, #32]	; (308 <ADXL345_WriteRegister+0x74>)
     2e6:	2300      	movs	r3, #0
     2e8:	1880      	adds	r0, r0, r2
     2ea:	4159      	adcs	r1, r3
     2ec:	4a07      	ldr	r2, [pc, #28]	; (30c <ADXL345_WriteRegister+0x78>)
     2ee:	2300      	movs	r3, #0
     2f0:	4d07      	ldr	r5, [pc, #28]	; (310 <ADXL345_WriteRegister+0x7c>)
     2f2:	47a8      	blx	r5
     2f4:	4b07      	ldr	r3, [pc, #28]	; (314 <ADXL345_WriteRegister+0x80>)
     2f6:	4798      	blx	r3
	
	return err;

     2f8:	0020      	movs	r0, r4
     2fa:	b004      	add	sp, #16
     2fc:	bd70      	pop	{r4, r5, r6, pc}
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	000009a1 	.word	0x000009a1
     304:	00002255 	.word	0x00002255
     308:	006acfbf 	.word	0x006acfbf
     30c:	006acfc0 	.word	0x006acfc0
     310:	000033b5 	.word	0x000033b5
     314:	20000001 	.word	0x20000001

00000318 <ADXL345_init>:
uint8_t ADXL345_init(ADXL_345 *sensor, struct i2c_master_module *i2c_handler, struct i2c_master_packet *packet_handler){
     318:	b570      	push	{r4, r5, r6, lr}
     31a:	b082      	sub	sp, #8
     31c:	0004      	movs	r4, r0
	sensor->i2c_master = i2c_handler;
     31e:	6141      	str	r1, [r0, #20]
	sensor->master_packet = packet_handler;
     320:	6182      	str	r2, [r0, #24]
	sensor->master_packet->data_length = (uint16_t)1;
     322:	2301      	movs	r3, #1
     324:	8053      	strh	r3, [r2, #2]
    sensor->master_packet->data = NULL;
     326:	6982      	ldr	r2, [r0, #24]
     328:	2300      	movs	r3, #0
     32a:	6053      	str	r3, [r2, #4]
	sensor->master_packet->address = ADXL345_ADR;
     32c:	2253      	movs	r2, #83	; 0x53
     32e:	6981      	ldr	r1, [r0, #24]
     330:	800a      	strh	r2, [r1, #0]
	sensor->master_packet->high_speed = false;	
     332:	6982      	ldr	r2, [r0, #24]
     334:	7253      	strb	r3, [r2, #9]
	sensor->master_packet->ten_bit_address = false;
     336:	6982      	ldr	r2, [r0, #24]
     338:	7213      	strb	r3, [r2, #8]
	sensor->acc_mps[0] = 0;
     33a:	2200      	movs	r2, #0
     33c:	6082      	str	r2, [r0, #8]
	sensor->acc_mps[1] = 0;
     33e:	60c2      	str	r2, [r0, #12]
	sensor->acc_mps[2] = 0;
     340:	6102      	str	r2, [r0, #16]
	sensor->acc_raw[0] = 0;
     342:	8003      	strh	r3, [r0, #0]
	sensor->acc_raw[1] = 0;
     344:	8043      	strh	r3, [r0, #2]
	sensor->acc_raw[2] = 0;
     346:	8083      	strh	r3, [r0, #4]
	status_check = ADXL345_ReadRegister(sensor, ADXL345_ID_REG, &rx_data, 1);
     348:	466b      	mov	r3, sp
     34a:	1dde      	adds	r6, r3, #7
     34c:	2301      	movs	r3, #1
     34e:	0032      	movs	r2, r6
     350:	2100      	movs	r1, #0
     352:	4d13      	ldr	r5, [pc, #76]	; (3a0 <ADXL345_init+0x88>)
     354:	47a8      	blx	r5
	if(status_check != STATUS_OK){
     356:	1e45      	subs	r5, r0, #1
     358:	41a8      	sbcs	r0, r5
	uint8_t error = 0;
     35a:	b2c5      	uxtb	r5, r0
	if(rx_data != ADXL345_ID){
     35c:	7833      	ldrb	r3, [r6, #0]
     35e:	2be5      	cmp	r3, #229	; 0xe5
     360:	d003      	beq.n	36a <ADXL345_init+0x52>
		error++;
     362:	3501      	adds	r5, #1
}
     364:	0028      	movs	r0, r5
     366:	b002      	add	sp, #8
     368:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t Reg_Data = 0x0A;
     36a:	466b      	mov	r3, sp
     36c:	1d9a      	adds	r2, r3, #6
     36e:	230a      	movs	r3, #10
     370:	7013      	strb	r3, [r2, #0]
	status_check = ADXL345_WriteRegister(sensor, ADXL_345_BW, &Reg_Data, 1);
     372:	3b09      	subs	r3, #9
     374:	212c      	movs	r1, #44	; 0x2c
     376:	0020      	movs	r0, r4
     378:	4e0a      	ldr	r6, [pc, #40]	; (3a4 <ADXL345_init+0x8c>)
     37a:	47b0      	blx	r6
	if(status_check != STATUS_OK){
     37c:	2800      	cmp	r0, #0
     37e:	d001      	beq.n	384 <ADXL345_init+0x6c>
		error++;
     380:	3501      	adds	r5, #1
     382:	b2ed      	uxtb	r5, r5
	Reg_Data = 0x08;
     384:	466b      	mov	r3, sp
     386:	1d9a      	adds	r2, r3, #6
     388:	2308      	movs	r3, #8
     38a:	7013      	strb	r3, [r2, #0]
	status_check = ADXL345_WriteRegister(sensor, ADXL345_POWER_CNTRL, &Reg_Data, 1);
     38c:	3b07      	subs	r3, #7
     38e:	212d      	movs	r1, #45	; 0x2d
     390:	0020      	movs	r0, r4
     392:	4c04      	ldr	r4, [pc, #16]	; (3a4 <ADXL345_init+0x8c>)
     394:	47a0      	blx	r4
	if(status_check != STATUS_OK){
     396:	2800      	cmp	r0, #0
     398:	d0e4      	beq.n	364 <ADXL345_init+0x4c>
		error++;
     39a:	3501      	adds	r5, #1
     39c:	b2ed      	uxtb	r5, r5
     39e:	e7e1      	b.n	364 <ADXL345_init+0x4c>
     3a0:	00000115 	.word	0x00000115
     3a4:	00000295 	.word	0x00000295

000003a8 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     3a8:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     3aa:	2207      	movs	r2, #7
     3ac:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     3ae:	421a      	tst	r2, r3
     3b0:	d1fc      	bne.n	3ac <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     3b2:	4770      	bx	lr

000003b4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b6:	46d6      	mov	lr, sl
     3b8:	464f      	mov	r7, r9
     3ba:	4646      	mov	r6, r8
     3bc:	b5c0      	push	{r6, r7, lr}
     3be:	b08a      	sub	sp, #40	; 0x28
     3c0:	0006      	movs	r6, r0
     3c2:	000f      	movs	r7, r1
     3c4:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     3c6:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     3c8:	0008      	movs	r0, r1
     3ca:	4b97      	ldr	r3, [pc, #604]	; (628 <i2c_master_init+0x274>)
     3cc:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     3ce:	4a97      	ldr	r2, [pc, #604]	; (62c <i2c_master_init+0x278>)
     3d0:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     3d2:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     3d4:	2301      	movs	r3, #1
     3d6:	40ab      	lsls	r3, r5
     3d8:	430b      	orrs	r3, r1
     3da:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     3dc:	a909      	add	r1, sp, #36	; 0x24
     3de:	7b23      	ldrb	r3, [r4, #12]
     3e0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     3e2:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     3e4:	b2c5      	uxtb	r5, r0
     3e6:	0028      	movs	r0, r5
     3e8:	4b91      	ldr	r3, [pc, #580]	; (630 <i2c_master_init+0x27c>)
     3ea:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     3ec:	0028      	movs	r0, r5
     3ee:	4b91      	ldr	r3, [pc, #580]	; (634 <i2c_master_init+0x280>)
     3f0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     3f2:	7b20      	ldrb	r0, [r4, #12]
     3f4:	2100      	movs	r1, #0
     3f6:	4b90      	ldr	r3, [pc, #576]	; (638 <i2c_master_init+0x284>)
     3f8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     3fa:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     3fc:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     3fe:	079b      	lsls	r3, r3, #30
     400:	d505      	bpl.n	40e <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     402:	b00a      	add	sp, #40	; 0x28
     404:	bc1c      	pop	{r2, r3, r4}
     406:	4690      	mov	r8, r2
     408:	4699      	mov	r9, r3
     40a:	46a2      	mov	sl, r4
     40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     40e:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     410:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     412:	07db      	lsls	r3, r3, #31
     414:	d4f5      	bmi.n	402 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     416:	2314      	movs	r3, #20
     418:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     41a:	6833      	ldr	r3, [r6, #0]
     41c:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     41e:	0018      	movs	r0, r3
     420:	4b81      	ldr	r3, [pc, #516]	; (628 <i2c_master_init+0x274>)
     422:	4798      	blx	r3
     424:	0005      	movs	r5, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     426:	2380      	movs	r3, #128	; 0x80
     428:	aa08      	add	r2, sp, #32
     42a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     42c:	2300      	movs	r3, #0
     42e:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     430:	2201      	movs	r2, #1
     432:	a908      	add	r1, sp, #32
     434:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     436:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     438:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     43a:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     43c:	2800      	cmp	r0, #0
     43e:	d100      	bne.n	442 <i2c_master_init+0x8e>
     440:	e0af      	b.n	5a2 <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
     442:	ab08      	add	r3, sp, #32
     444:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     446:	2302      	movs	r3, #2
     448:	aa08      	add	r2, sp, #32
     44a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     44c:	0c00      	lsrs	r0, r0, #16
     44e:	b2c0      	uxtb	r0, r0
     450:	0011      	movs	r1, r2
     452:	4b7a      	ldr	r3, [pc, #488]	; (63c <i2c_master_init+0x288>)
     454:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     456:	2f00      	cmp	r7, #0
     458:	d100      	bne.n	45c <i2c_master_init+0xa8>
     45a:	e0a7      	b.n	5ac <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
     45c:	ab08      	add	r3, sp, #32
     45e:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     460:	2302      	movs	r3, #2
     462:	aa08      	add	r2, sp, #32
     464:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     466:	0c3f      	lsrs	r7, r7, #16
     468:	b2f8      	uxtb	r0, r7
     46a:	0011      	movs	r1, r2
     46c:	4b73      	ldr	r3, [pc, #460]	; (63c <i2c_master_init+0x288>)
     46e:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     470:	8aa3      	ldrh	r3, [r4, #20]
     472:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     474:	8ae3      	ldrh	r3, [r4, #22]
     476:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     478:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     47a:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     47c:	2b00      	cmp	r3, #0
     47e:	d104      	bne.n	48a <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     480:	4b6f      	ldr	r3, [pc, #444]	; (640 <i2c_master_init+0x28c>)
     482:	789b      	ldrb	r3, [r3, #2]
     484:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     486:	0fdb      	lsrs	r3, r3, #31
     488:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     48a:	68a1      	ldr	r1, [r4, #8]
     48c:	6923      	ldr	r3, [r4, #16]
     48e:	430b      	orrs	r3, r1
     490:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     492:	2224      	movs	r2, #36	; 0x24
     494:	5ca2      	ldrb	r2, [r4, r2]
     496:	2a00      	cmp	r2, #0
     498:	d002      	beq.n	4a0 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     49a:	2280      	movs	r2, #128	; 0x80
     49c:	05d2      	lsls	r2, r2, #23
     49e:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     4a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     4a2:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     4a4:	222c      	movs	r2, #44	; 0x2c
     4a6:	5ca2      	ldrb	r2, [r4, r2]
     4a8:	2a00      	cmp	r2, #0
     4aa:	d103      	bne.n	4b4 <i2c_master_init+0x100>
     4ac:	2280      	movs	r2, #128	; 0x80
     4ae:	0492      	lsls	r2, r2, #18
     4b0:	4291      	cmp	r1, r2
     4b2:	d102      	bne.n	4ba <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     4b4:	2280      	movs	r2, #128	; 0x80
     4b6:	0512      	lsls	r2, r2, #20
     4b8:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     4ba:	222d      	movs	r2, #45	; 0x2d
     4bc:	5ca2      	ldrb	r2, [r4, r2]
     4be:	2a00      	cmp	r2, #0
     4c0:	d002      	beq.n	4c8 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     4c2:	2280      	movs	r2, #128	; 0x80
     4c4:	0412      	lsls	r2, r2, #16
     4c6:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     4c8:	222e      	movs	r2, #46	; 0x2e
     4ca:	5ca2      	ldrb	r2, [r4, r2]
     4cc:	2a00      	cmp	r2, #0
     4ce:	d002      	beq.n	4d6 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     4d0:	2280      	movs	r2, #128	; 0x80
     4d2:	03d2      	lsls	r2, r2, #15
     4d4:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     4d6:	4642      	mov	r2, r8
     4d8:	6812      	ldr	r2, [r2, #0]
     4da:	4313      	orrs	r3, r2
     4dc:	4642      	mov	r2, r8
     4de:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     4e0:	2380      	movs	r3, #128	; 0x80
     4e2:	005b      	lsls	r3, r3, #1
     4e4:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     4e6:	0028      	movs	r0, r5
     4e8:	3014      	adds	r0, #20
     4ea:	b2c0      	uxtb	r0, r0
     4ec:	4b55      	ldr	r3, [pc, #340]	; (644 <i2c_master_init+0x290>)
     4ee:	4798      	blx	r3
     4f0:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     4f2:	23fa      	movs	r3, #250	; 0xfa
     4f4:	009b      	lsls	r3, r3, #2
     4f6:	6822      	ldr	r2, [r4, #0]
     4f8:	435a      	muls	r2, r3
     4fa:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     4fc:	6863      	ldr	r3, [r4, #4]
     4fe:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     500:	4d51      	ldr	r5, [pc, #324]	; (648 <i2c_master_init+0x294>)
     502:	47a8      	blx	r5
     504:	9000      	str	r0, [sp, #0]
     506:	9101      	str	r1, [sp, #4]
     508:	464b      	mov	r3, r9
     50a:	0058      	lsls	r0, r3, #1
     50c:	47a8      	blx	r5
     50e:	9002      	str	r0, [sp, #8]
     510:	9103      	str	r1, [sp, #12]
     512:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     514:	47a8      	blx	r5
     516:	9004      	str	r0, [sp, #16]
     518:	9105      	str	r1, [sp, #20]
     51a:	4f4c      	ldr	r7, [pc, #304]	; (64c <i2c_master_init+0x298>)
     51c:	4a4c      	ldr	r2, [pc, #304]	; (650 <i2c_master_init+0x29c>)
     51e:	4b4d      	ldr	r3, [pc, #308]	; (654 <i2c_master_init+0x2a0>)
     520:	9800      	ldr	r0, [sp, #0]
     522:	9901      	ldr	r1, [sp, #4]
     524:	47b8      	blx	r7
     526:	0002      	movs	r2, r0
     528:	000b      	movs	r3, r1
     52a:	9804      	ldr	r0, [sp, #16]
     52c:	9905      	ldr	r1, [sp, #20]
     52e:	47b8      	blx	r7
     530:	4e49      	ldr	r6, [pc, #292]	; (658 <i2c_master_init+0x2a4>)
     532:	2200      	movs	r2, #0
     534:	4b49      	ldr	r3, [pc, #292]	; (65c <i2c_master_init+0x2a8>)
     536:	47b0      	blx	r6
     538:	9004      	str	r0, [sp, #16]
     53a:	9105      	str	r1, [sp, #20]
     53c:	4648      	mov	r0, r9
     53e:	47a8      	blx	r5
     540:	0002      	movs	r2, r0
     542:	000b      	movs	r3, r1
     544:	9804      	ldr	r0, [sp, #16]
     546:	9905      	ldr	r1, [sp, #20]
     548:	47b8      	blx	r7
     54a:	0002      	movs	r2, r0
     54c:	000b      	movs	r3, r1
     54e:	4d44      	ldr	r5, [pc, #272]	; (660 <i2c_master_init+0x2ac>)
     550:	9800      	ldr	r0, [sp, #0]
     552:	9901      	ldr	r1, [sp, #4]
     554:	47a8      	blx	r5
     556:	9a02      	ldr	r2, [sp, #8]
     558:	9b03      	ldr	r3, [sp, #12]
     55a:	47b0      	blx	r6
     55c:	2200      	movs	r2, #0
     55e:	4b41      	ldr	r3, [pc, #260]	; (664 <i2c_master_init+0x2b0>)
     560:	47a8      	blx	r5
     562:	9a02      	ldr	r2, [sp, #8]
     564:	9b03      	ldr	r3, [sp, #12]
     566:	4d40      	ldr	r5, [pc, #256]	; (668 <i2c_master_init+0x2b4>)
     568:	47a8      	blx	r5
     56a:	4b40      	ldr	r3, [pc, #256]	; (66c <i2c_master_init+0x2b8>)
     56c:	4798      	blx	r3
     56e:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     570:	2380      	movs	r3, #128	; 0x80
     572:	049b      	lsls	r3, r3, #18
     574:	68a2      	ldr	r2, [r4, #8]
     576:	429a      	cmp	r2, r3
     578:	d01e      	beq.n	5b8 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     57a:	0003      	movs	r3, r0
     57c:	2040      	movs	r0, #64	; 0x40
     57e:	2dff      	cmp	r5, #255	; 0xff
     580:	d900      	bls.n	584 <i2c_master_init+0x1d0>
     582:	e73e      	b.n	402 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     584:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     586:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     588:	25ff      	movs	r5, #255	; 0xff
     58a:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     58c:	0624      	lsls	r4, r4, #24
     58e:	4325      	orrs	r5, r4
     590:	0400      	lsls	r0, r0, #16
     592:	23ff      	movs	r3, #255	; 0xff
     594:	041b      	lsls	r3, r3, #16
     596:	4018      	ands	r0, r3
     598:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     59a:	4643      	mov	r3, r8
     59c:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     59e:	2000      	movs	r0, #0
     5a0:	e72f      	b.n	402 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     5a2:	2100      	movs	r1, #0
     5a4:	4640      	mov	r0, r8
     5a6:	4b32      	ldr	r3, [pc, #200]	; (670 <i2c_master_init+0x2bc>)
     5a8:	4798      	blx	r3
     5aa:	e74a      	b.n	442 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     5ac:	2101      	movs	r1, #1
     5ae:	4640      	mov	r0, r8
     5b0:	4b2f      	ldr	r3, [pc, #188]	; (670 <i2c_master_init+0x2bc>)
     5b2:	4798      	blx	r3
     5b4:	0007      	movs	r7, r0
     5b6:	e751      	b.n	45c <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     5b8:	26fa      	movs	r6, #250	; 0xfa
     5ba:	00b6      	lsls	r6, r6, #2
     5bc:	4653      	mov	r3, sl
     5be:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     5c0:	9800      	ldr	r0, [sp, #0]
     5c2:	9901      	ldr	r1, [sp, #4]
     5c4:	0002      	movs	r2, r0
     5c6:	000b      	movs	r3, r1
     5c8:	4c23      	ldr	r4, [pc, #140]	; (658 <i2c_master_init+0x2a4>)
     5ca:	47a0      	blx	r4
     5cc:	9000      	str	r0, [sp, #0]
     5ce:	9101      	str	r1, [sp, #4]
     5d0:	0030      	movs	r0, r6
     5d2:	4b1d      	ldr	r3, [pc, #116]	; (648 <i2c_master_init+0x294>)
     5d4:	4798      	blx	r3
     5d6:	2200      	movs	r2, #0
     5d8:	4b26      	ldr	r3, [pc, #152]	; (674 <i2c_master_init+0x2c0>)
     5da:	47b8      	blx	r7
     5dc:	0002      	movs	r2, r0
     5de:	000b      	movs	r3, r1
     5e0:	9800      	ldr	r0, [sp, #0]
     5e2:	9901      	ldr	r1, [sp, #4]
     5e4:	4c20      	ldr	r4, [pc, #128]	; (668 <i2c_master_init+0x2b4>)
     5e6:	47a0      	blx	r4
     5e8:	2200      	movs	r2, #0
     5ea:	4b1e      	ldr	r3, [pc, #120]	; (664 <i2c_master_init+0x2b0>)
     5ec:	4c1c      	ldr	r4, [pc, #112]	; (660 <i2c_master_init+0x2ac>)
     5ee:	47a0      	blx	r4
     5f0:	4b1e      	ldr	r3, [pc, #120]	; (66c <i2c_master_init+0x2b8>)
     5f2:	4798      	blx	r3
     5f4:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     5f6:	d00c      	beq.n	612 <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     5f8:	0031      	movs	r1, r6
     5fa:	9807      	ldr	r0, [sp, #28]
     5fc:	4b1e      	ldr	r3, [pc, #120]	; (678 <i2c_master_init+0x2c4>)
     5fe:	4798      	blx	r3
     600:	3802      	subs	r0, #2
     602:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     604:	002b      	movs	r3, r5
     606:	2dff      	cmp	r5, #255	; 0xff
     608:	d80c      	bhi.n	624 <i2c_master_init+0x270>
     60a:	28ff      	cmp	r0, #255	; 0xff
     60c:	d9bc      	bls.n	588 <i2c_master_init+0x1d4>
     60e:	2040      	movs	r0, #64	; 0x40
     610:	e6f7      	b.n	402 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     612:	0071      	lsls	r1, r6, #1
     614:	1e48      	subs	r0, r1, #1
     616:	9b07      	ldr	r3, [sp, #28]
     618:	469c      	mov	ip, r3
     61a:	4460      	add	r0, ip
     61c:	4b16      	ldr	r3, [pc, #88]	; (678 <i2c_master_init+0x2c4>)
     61e:	4798      	blx	r3
     620:	3801      	subs	r0, #1
     622:	e7ef      	b.n	604 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     624:	2040      	movs	r0, #64	; 0x40
     626:	e6ec      	b.n	402 <i2c_master_init+0x4e>
     628:	00001959 	.word	0x00001959
     62c:	40000400 	.word	0x40000400
     630:	0000236d 	.word	0x0000236d
     634:	000022e1 	.word	0x000022e1
     638:	00001795 	.word	0x00001795
     63c:	00002465 	.word	0x00002465
     640:	41002000 	.word	0x41002000
     644:	00002389 	.word	0x00002389
     648:	00004e69 	.word	0x00004e69
     64c:	00004251 	.word	0x00004251
     650:	e826d695 	.word	0xe826d695
     654:	3e112e0b 	.word	0x3e112e0b
     658:	000035c9 	.word	0x000035c9
     65c:	40240000 	.word	0x40240000
     660:	00004751 	.word	0x00004751
     664:	3ff00000 	.word	0x3ff00000
     668:	00003be9 	.word	0x00003be9
     66c:	00004d7d 	.word	0x00004d7d
     670:	000017e1 	.word	0x000017e1
     674:	40080000 	.word	0x40080000
     678:	0000329d 	.word	0x0000329d

0000067c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     67c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     67e:	7e1a      	ldrb	r2, [r3, #24]
     680:	0792      	lsls	r2, r2, #30
     682:	d507      	bpl.n	694 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     684:	2202      	movs	r2, #2
     686:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     688:	8b5b      	ldrh	r3, [r3, #26]
     68a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     68c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     68e:	17db      	asrs	r3, r3, #31
     690:	4018      	ands	r0, r3
}
     692:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     694:	8b5a      	ldrh	r2, [r3, #26]
     696:	0752      	lsls	r2, r2, #29
     698:	d506      	bpl.n	6a8 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     69a:	6859      	ldr	r1, [r3, #4]
     69c:	22c0      	movs	r2, #192	; 0xc0
     69e:	0292      	lsls	r2, r2, #10
     6a0:	430a      	orrs	r2, r1
     6a2:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     6a4:	2018      	movs	r0, #24
     6a6:	e7f4      	b.n	692 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     6a8:	2000      	movs	r0, #0
     6aa:	e7f2      	b.n	692 <_i2c_master_address_response+0x16>

000006ac <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     6ac:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6ae:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     6b0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     6b2:	2401      	movs	r4, #1
     6b4:	2502      	movs	r5, #2
     6b6:	7e11      	ldrb	r1, [r2, #24]
     6b8:	4221      	tst	r1, r4
     6ba:	d10b      	bne.n	6d4 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     6bc:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     6be:	4229      	tst	r1, r5
     6c0:	d106      	bne.n	6d0 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     6c2:	3301      	adds	r3, #1
     6c4:	b29b      	uxth	r3, r3
     6c6:	8901      	ldrh	r1, [r0, #8]
     6c8:	4299      	cmp	r1, r3
     6ca:	d8f4      	bhi.n	6b6 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     6cc:	2012      	movs	r0, #18
     6ce:	e002      	b.n	6d6 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     6d0:	2000      	movs	r0, #0
     6d2:	e000      	b.n	6d6 <_i2c_master_wait_for_bus+0x2a>
     6d4:	2000      	movs	r0, #0
}
     6d6:	bd30      	pop	{r4, r5, pc}

000006d8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     6d8:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6da:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6dc:	6862      	ldr	r2, [r4, #4]
     6de:	2380      	movs	r3, #128	; 0x80
     6e0:	02db      	lsls	r3, r3, #11
     6e2:	4313      	orrs	r3, r2
     6e4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     6e6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     6e8:	4b02      	ldr	r3, [pc, #8]	; (6f4 <_i2c_master_send_hs_master_code+0x1c>)
     6ea:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     6ec:	2301      	movs	r3, #1
     6ee:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     6f0:	bd10      	pop	{r4, pc}
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	000006ad 	.word	0x000006ad

000006f8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	46de      	mov	lr, fp
     6fc:	4657      	mov	r7, sl
     6fe:	464e      	mov	r6, r9
     700:	4645      	mov	r5, r8
     702:	b5e0      	push	{r5, r6, r7, lr}
     704:	b083      	sub	sp, #12
     706:	0006      	movs	r6, r0
     708:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     70a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     70c:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     70e:	682b      	ldr	r3, [r5, #0]
     710:	011b      	lsls	r3, r3, #4
     712:	0fdb      	lsrs	r3, r3, #31
     714:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     716:	7a4b      	ldrb	r3, [r1, #9]
     718:	2b00      	cmp	r3, #0
     71a:	d12b      	bne.n	774 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     71c:	686b      	ldr	r3, [r5, #4]
     71e:	4a58      	ldr	r2, [pc, #352]	; (880 <_i2c_master_read_packet+0x188>)
     720:	4013      	ands	r3, r2
     722:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     724:	464b      	mov	r3, r9
     726:	7a1b      	ldrb	r3, [r3, #8]
     728:	2b00      	cmp	r3, #0
     72a:	d127      	bne.n	77c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     72c:	464b      	mov	r3, r9
     72e:	881b      	ldrh	r3, [r3, #0]
     730:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     732:	464a      	mov	r2, r9
     734:	7a52      	ldrb	r2, [r2, #9]
     736:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     738:	4313      	orrs	r3, r2
     73a:	2201      	movs	r2, #1
     73c:	4313      	orrs	r3, r2
     73e:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     740:	0030      	movs	r0, r6
     742:	4b50      	ldr	r3, [pc, #320]	; (884 <_i2c_master_read_packet+0x18c>)
     744:	4798      	blx	r3
     746:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     748:	4653      	mov	r3, sl
     74a:	2b00      	cmp	r3, #0
     74c:	d003      	beq.n	756 <_i2c_master_read_packet+0x5e>
     74e:	464b      	mov	r3, r9
     750:	885b      	ldrh	r3, [r3, #2]
     752:	2b01      	cmp	r3, #1
     754:	d03b      	beq.n	7ce <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     756:	686b      	ldr	r3, [r5, #4]
     758:	4a49      	ldr	r2, [pc, #292]	; (880 <_i2c_master_read_packet+0x188>)
     75a:	4013      	ands	r3, r2
     75c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     75e:	9b01      	ldr	r3, [sp, #4]
     760:	2b00      	cmp	r3, #0
     762:	d03a      	beq.n	7da <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     764:	9801      	ldr	r0, [sp, #4]
     766:	b003      	add	sp, #12
     768:	bc3c      	pop	{r2, r3, r4, r5}
     76a:	4690      	mov	r8, r2
     76c:	4699      	mov	r9, r3
     76e:	46a2      	mov	sl, r4
     770:	46ab      	mov	fp, r5
     772:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     774:	7a89      	ldrb	r1, [r1, #10]
     776:	4b44      	ldr	r3, [pc, #272]	; (888 <_i2c_master_read_packet+0x190>)
     778:	4798      	blx	r3
     77a:	e7cf      	b.n	71c <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     77c:	464b      	mov	r3, r9
     77e:	881b      	ldrh	r3, [r3, #0]
     780:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     782:	464a      	mov	r2, r9
     784:	7a52      	ldrb	r2, [r2, #9]
     786:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     788:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     78a:	2280      	movs	r2, #128	; 0x80
     78c:	0212      	lsls	r2, r2, #8
     78e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     790:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     792:	0030      	movs	r0, r6
     794:	4b3b      	ldr	r3, [pc, #236]	; (884 <_i2c_master_read_packet+0x18c>)
     796:	4798      	blx	r3
     798:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     79a:	686b      	ldr	r3, [r5, #4]
     79c:	4a38      	ldr	r2, [pc, #224]	; (880 <_i2c_master_read_packet+0x188>)
     79e:	4013      	ands	r3, r2
     7a0:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     7a2:	2800      	cmp	r0, #0
     7a4:	d1de      	bne.n	764 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     7a6:	0030      	movs	r0, r6
     7a8:	4b38      	ldr	r3, [pc, #224]	; (88c <_i2c_master_read_packet+0x194>)
     7aa:	4798      	blx	r3
     7ac:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     7ae:	2800      	cmp	r0, #0
     7b0:	d1d8      	bne.n	764 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7b2:	464b      	mov	r3, r9
     7b4:	881b      	ldrh	r3, [r3, #0]
     7b6:	0a1b      	lsrs	r3, r3, #8
     7b8:	2278      	movs	r2, #120	; 0x78
     7ba:	4313      	orrs	r3, r2
     7bc:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7be:	464a      	mov	r2, r9
     7c0:	7a52      	ldrb	r2, [r2, #9]
     7c2:	0392      	lsls	r2, r2, #14
     7c4:	2101      	movs	r1, #1
     7c6:	430a      	orrs	r2, r1
     7c8:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7ca:	626b      	str	r3, [r5, #36]	; 0x24
     7cc:	e7b8      	b.n	740 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     7ce:	686a      	ldr	r2, [r5, #4]
     7d0:	2380      	movs	r3, #128	; 0x80
     7d2:	02db      	lsls	r3, r3, #11
     7d4:	4313      	orrs	r3, r2
     7d6:	606b      	str	r3, [r5, #4]
     7d8:	e7c1      	b.n	75e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     7da:	0030      	movs	r0, r6
     7dc:	4b2b      	ldr	r3, [pc, #172]	; (88c <_i2c_master_read_packet+0x194>)
     7de:	4798      	blx	r3
     7e0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     7e2:	2800      	cmp	r0, #0
     7e4:	d1be      	bne.n	764 <_i2c_master_read_packet+0x6c>
     7e6:	3c01      	subs	r4, #1
     7e8:	b2a4      	uxth	r4, r4
     7ea:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     7ec:	4b28      	ldr	r3, [pc, #160]	; (890 <_i2c_master_read_packet+0x198>)
     7ee:	469b      	mov	fp, r3
     7f0:	e015      	b.n	81e <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     7f2:	2c01      	cmp	r4, #1
     7f4:	d020      	beq.n	838 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     7f6:	0030      	movs	r0, r6
     7f8:	4b26      	ldr	r3, [pc, #152]	; (894 <_i2c_master_read_packet+0x19c>)
     7fa:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     7fc:	4643      	mov	r3, r8
     7fe:	1c5f      	adds	r7, r3, #1
     800:	b2bf      	uxth	r7, r7
     802:	2328      	movs	r3, #40	; 0x28
     804:	5ceb      	ldrb	r3, [r5, r3]
     806:	464a      	mov	r2, r9
     808:	6852      	ldr	r2, [r2, #4]
     80a:	4641      	mov	r1, r8
     80c:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     80e:	0030      	movs	r0, r6
     810:	4b1c      	ldr	r3, [pc, #112]	; (884 <_i2c_master_read_packet+0x18c>)
     812:	4798      	blx	r3
     814:	3c01      	subs	r4, #1
     816:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     818:	2800      	cmp	r0, #0
     81a:	d115      	bne.n	848 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     81c:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     81e:	455c      	cmp	r4, fp
     820:	d014      	beq.n	84c <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     822:	8b6b      	ldrh	r3, [r5, #26]
     824:	069b      	lsls	r3, r3, #26
     826:	d527      	bpl.n	878 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     828:	7af3      	ldrb	r3, [r6, #11]
     82a:	2b00      	cmp	r3, #0
     82c:	d0e3      	beq.n	7f6 <_i2c_master_read_packet+0xfe>
     82e:	4653      	mov	r3, sl
     830:	2b00      	cmp	r3, #0
     832:	d1de      	bne.n	7f2 <_i2c_master_read_packet+0xfa>
     834:	2c00      	cmp	r4, #0
     836:	d1de      	bne.n	7f6 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     838:	686a      	ldr	r2, [r5, #4]
     83a:	2380      	movs	r3, #128	; 0x80
     83c:	02db      	lsls	r3, r3, #11
     83e:	4313      	orrs	r3, r2
     840:	606b      	str	r3, [r5, #4]
     842:	3c01      	subs	r4, #1
     844:	b2a4      	uxth	r4, r4
     846:	e7ea      	b.n	81e <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     848:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     84a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     84c:	7ab3      	ldrb	r3, [r6, #10]
     84e:	2b00      	cmp	r3, #0
     850:	d109      	bne.n	866 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     852:	0030      	movs	r0, r6
     854:	4b0f      	ldr	r3, [pc, #60]	; (894 <_i2c_master_read_packet+0x19c>)
     856:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     858:	2328      	movs	r3, #40	; 0x28
     85a:	5cea      	ldrb	r2, [r5, r3]
     85c:	464b      	mov	r3, r9
     85e:	685b      	ldr	r3, [r3, #4]
     860:	4641      	mov	r1, r8
     862:	545a      	strb	r2, [r3, r1]
     864:	e77e      	b.n	764 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     866:	0030      	movs	r0, r6
     868:	4b0a      	ldr	r3, [pc, #40]	; (894 <_i2c_master_read_packet+0x19c>)
     86a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     86c:	686a      	ldr	r2, [r5, #4]
     86e:	23c0      	movs	r3, #192	; 0xc0
     870:	029b      	lsls	r3, r3, #10
     872:	4313      	orrs	r3, r2
     874:	606b      	str	r3, [r5, #4]
     876:	e7ec      	b.n	852 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     878:	2341      	movs	r3, #65	; 0x41
     87a:	9301      	str	r3, [sp, #4]
     87c:	e772      	b.n	764 <_i2c_master_read_packet+0x6c>
     87e:	46c0      	nop			; (mov r8, r8)
     880:	fffbffff 	.word	0xfffbffff
     884:	000006ad 	.word	0x000006ad
     888:	000006d9 	.word	0x000006d9
     88c:	0000067d 	.word	0x0000067d
     890:	0000ffff 	.word	0x0000ffff
     894:	000003a9 	.word	0x000003a9

00000898 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     898:	b5f0      	push	{r4, r5, r6, r7, lr}
     89a:	46de      	mov	lr, fp
     89c:	4657      	mov	r7, sl
     89e:	464e      	mov	r6, r9
     8a0:	4645      	mov	r5, r8
     8a2:	b5e0      	push	{r5, r6, r7, lr}
     8a4:	b083      	sub	sp, #12
     8a6:	0006      	movs	r6, r0
     8a8:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8aa:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     8ac:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     8ae:	4b32      	ldr	r3, [pc, #200]	; (978 <_i2c_master_write_packet+0xe0>)
     8b0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     8b2:	7a7b      	ldrb	r3, [r7, #9]
     8b4:	2b00      	cmp	r3, #0
     8b6:	d11d      	bne.n	8f4 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     8b8:	686b      	ldr	r3, [r5, #4]
     8ba:	4a30      	ldr	r2, [pc, #192]	; (97c <_i2c_master_write_packet+0xe4>)
     8bc:	4013      	ands	r3, r2
     8be:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     8c0:	7a3b      	ldrb	r3, [r7, #8]
     8c2:	2b00      	cmp	r3, #0
     8c4:	d01b      	beq.n	8fe <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8c6:	883b      	ldrh	r3, [r7, #0]
     8c8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     8ca:	7a7a      	ldrb	r2, [r7, #9]
     8cc:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8ce:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     8d0:	2280      	movs	r2, #128	; 0x80
     8d2:	0212      	lsls	r2, r2, #8
     8d4:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8d6:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     8d8:	0030      	movs	r0, r6
     8da:	4b29      	ldr	r3, [pc, #164]	; (980 <_i2c_master_write_packet+0xe8>)
     8dc:	4798      	blx	r3
     8de:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     8e0:	2800      	cmp	r0, #0
     8e2:	d013      	beq.n	90c <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     8e4:	9801      	ldr	r0, [sp, #4]
     8e6:	b003      	add	sp, #12
     8e8:	bc3c      	pop	{r2, r3, r4, r5}
     8ea:	4690      	mov	r8, r2
     8ec:	4699      	mov	r9, r3
     8ee:	46a2      	mov	sl, r4
     8f0:	46ab      	mov	fp, r5
     8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     8f4:	7ab9      	ldrb	r1, [r7, #10]
     8f6:	0030      	movs	r0, r6
     8f8:	4b22      	ldr	r3, [pc, #136]	; (984 <_i2c_master_write_packet+0xec>)
     8fa:	4798      	blx	r3
     8fc:	e7dc      	b.n	8b8 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8fe:	883b      	ldrh	r3, [r7, #0]
     900:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     902:	7a7a      	ldrb	r2, [r7, #9]
     904:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     906:	4313      	orrs	r3, r2
     908:	626b      	str	r3, [r5, #36]	; 0x24
     90a:	e7e5      	b.n	8d8 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     90c:	0030      	movs	r0, r6
     90e:	4b1e      	ldr	r3, [pc, #120]	; (988 <_i2c_master_write_packet+0xf0>)
     910:	4798      	blx	r3
     912:	1e03      	subs	r3, r0, #0
     914:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     916:	d1e5      	bne.n	8e4 <_i2c_master_write_packet+0x4c>
     918:	46a0      	mov	r8, r4
     91a:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     91c:	3320      	adds	r3, #32
     91e:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     920:	4b15      	ldr	r3, [pc, #84]	; (978 <_i2c_master_write_packet+0xe0>)
     922:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     924:	4b16      	ldr	r3, [pc, #88]	; (980 <_i2c_master_write_packet+0xe8>)
     926:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     928:	4544      	cmp	r4, r8
     92a:	d015      	beq.n	958 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     92c:	8b6b      	ldrh	r3, [r5, #26]
     92e:	464a      	mov	r2, r9
     930:	4213      	tst	r3, r2
     932:	d01d      	beq.n	970 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     934:	0030      	movs	r0, r6
     936:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     938:	687b      	ldr	r3, [r7, #4]
     93a:	5d1a      	ldrb	r2, [r3, r4]
     93c:	2328      	movs	r3, #40	; 0x28
     93e:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     940:	0030      	movs	r0, r6
     942:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     944:	2800      	cmp	r0, #0
     946:	d106      	bne.n	956 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     948:	8b6b      	ldrh	r3, [r5, #26]
     94a:	3401      	adds	r4, #1
     94c:	075b      	lsls	r3, r3, #29
     94e:	d5eb      	bpl.n	928 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     950:	231e      	movs	r3, #30
     952:	9301      	str	r3, [sp, #4]
     954:	e000      	b.n	958 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     956:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     958:	7ab3      	ldrb	r3, [r6, #10]
     95a:	2b00      	cmp	r3, #0
     95c:	d0c2      	beq.n	8e4 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     95e:	0030      	movs	r0, r6
     960:	4b05      	ldr	r3, [pc, #20]	; (978 <_i2c_master_write_packet+0xe0>)
     962:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     964:	686a      	ldr	r2, [r5, #4]
     966:	23c0      	movs	r3, #192	; 0xc0
     968:	029b      	lsls	r3, r3, #10
     96a:	4313      	orrs	r3, r2
     96c:	606b      	str	r3, [r5, #4]
     96e:	e7b9      	b.n	8e4 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     970:	2341      	movs	r3, #65	; 0x41
     972:	9301      	str	r3, [sp, #4]
     974:	e7b6      	b.n	8e4 <_i2c_master_write_packet+0x4c>
     976:	46c0      	nop			; (mov r8, r8)
     978:	000003a9 	.word	0x000003a9
     97c:	fffbffff 	.word	0xfffbffff
     980:	000006ad 	.word	0x000006ad
     984:	000006d9 	.word	0x000006d9
     988:	0000067d 	.word	0x0000067d

0000098c <i2c_master_read_packet_wait>:
{
     98c:	b510      	push	{r4, lr}
	module->send_stop = true;
     98e:	2301      	movs	r3, #1
     990:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     992:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     994:	4b01      	ldr	r3, [pc, #4]	; (99c <i2c_master_read_packet_wait+0x10>)
     996:	4798      	blx	r3
}
     998:	bd10      	pop	{r4, pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	000006f9 	.word	0x000006f9

000009a0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     9a0:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     9a2:	2301      	movs	r3, #1
     9a4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     9a6:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     9a8:	4b01      	ldr	r3, [pc, #4]	; (9b0 <i2c_master_write_packet_wait+0x10>)
     9aa:	4798      	blx	r3
}
     9ac:	bd10      	pop	{r4, pc}
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	00000899 	.word	0x00000899

000009b4 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     9b4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
     9b6:	2300      	movs	r3, #0
     9b8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     9ba:	3301      	adds	r3, #1
     9bc:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     9be:	4b01      	ldr	r3, [pc, #4]	; (9c4 <i2c_master_write_packet_wait_no_stop+0x10>)
     9c0:	4798      	blx	r3
}
     9c2:	bd10      	pop	{r4, pc}
     9c4:	00000899 	.word	0x00000899

000009c8 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     9c8:	4b09      	ldr	r3, [pc, #36]	; (9f0 <_tcc_get_inst_index+0x28>)
     9ca:	4298      	cmp	r0, r3
     9cc:	d00c      	beq.n	9e8 <_tcc_get_inst_index+0x20>
     9ce:	4b09      	ldr	r3, [pc, #36]	; (9f4 <_tcc_get_inst_index+0x2c>)
     9d0:	4298      	cmp	r0, r3
     9d2:	d007      	beq.n	9e4 <_tcc_get_inst_index+0x1c>
     9d4:	4a08      	ldr	r2, [pc, #32]	; (9f8 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     9d6:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
     9d8:	4290      	cmp	r0, r2
     9da:	d001      	beq.n	9e0 <_tcc_get_inst_index+0x18>
}
     9dc:	0018      	movs	r0, r3
     9de:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     9e0:	3302      	adds	r3, #2
     9e2:	e002      	b.n	9ea <_tcc_get_inst_index+0x22>
     9e4:	2301      	movs	r3, #1
     9e6:	e000      	b.n	9ea <_tcc_get_inst_index+0x22>
     9e8:	2300      	movs	r3, #0
			return i;
     9ea:	b2db      	uxtb	r3, r3
     9ec:	e7f6      	b.n	9dc <_tcc_get_inst_index+0x14>
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	42002000 	.word	0x42002000
     9f4:	42002400 	.word	0x42002400
     9f8:	42002800 	.word	0x42002800

000009fc <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
     9fc:	b510      	push	{r4, lr}
     9fe:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     a00:	0008      	movs	r0, r1
     a02:	4b4f      	ldr	r3, [pc, #316]	; (b40 <tcc_get_config_defaults+0x144>)
     a04:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
     a06:	2300      	movs	r3, #0
     a08:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     a0a:	0080      	lsls	r0, r0, #2
     a0c:	4a4d      	ldr	r2, [pc, #308]	; (b44 <tcc_get_config_defaults+0x148>)
     a0e:	5882      	ldr	r2, [r0, r2]
     a10:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     a12:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     a14:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     a16:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     a18:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     a1a:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     a1c:	61e3      	str	r3, [r4, #28]
     a1e:	6223      	str	r3, [r4, #32]
     a20:	6263      	str	r3, [r4, #36]	; 0x24
     a22:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     a24:	7523      	strb	r3, [r4, #20]
     a26:	7563      	strb	r3, [r4, #21]
     a28:	75a3      	strb	r3, [r4, #22]
     a2a:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     a2c:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     a2e:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     a30:	7423      	strb	r3, [r4, #16]
     a32:	7463      	strb	r3, [r4, #17]
     a34:	74a3      	strb	r3, [r4, #18]
     a36:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     a38:	222c      	movs	r2, #44	; 0x2c
     a3a:	54a3      	strb	r3, [r4, r2]
     a3c:	3201      	adds	r2, #1
     a3e:	54a3      	strb	r3, [r4, r2]
     a40:	3201      	adds	r2, #1
     a42:	54a3      	strb	r3, [r4, r2]
     a44:	3201      	adds	r2, #1
     a46:	54a3      	strb	r3, [r4, r2]
     a48:	3201      	adds	r2, #1
     a4a:	54a3      	strb	r3, [r4, r2]
     a4c:	3201      	adds	r2, #1
     a4e:	54a3      	strb	r3, [r4, r2]
     a50:	3201      	adds	r2, #1
     a52:	54a3      	strb	r3, [r4, r2]
     a54:	3201      	adds	r2, #1
     a56:	54a3      	strb	r3, [r4, r2]
     a58:	3201      	adds	r2, #1
     a5a:	54a3      	strb	r3, [r4, r2]
     a5c:	3201      	adds	r2, #1
     a5e:	54a3      	strb	r3, [r4, r2]
     a60:	3201      	adds	r2, #1
     a62:	54a3      	strb	r3, [r4, r2]
     a64:	3201      	adds	r2, #1
     a66:	54a3      	strb	r3, [r4, r2]
     a68:	3201      	adds	r2, #1
     a6a:	54a3      	strb	r3, [r4, r2]
     a6c:	3201      	adds	r2, #1
     a6e:	54a3      	strb	r3, [r4, r2]
     a70:	3201      	adds	r2, #1
     a72:	54a3      	strb	r3, [r4, r2]
     a74:	3201      	adds	r2, #1
     a76:	54a3      	strb	r3, [r4, r2]
     a78:	3201      	adds	r2, #1
     a7a:	54a3      	strb	r3, [r4, r2]
     a7c:	3201      	adds	r2, #1
     a7e:	54a3      	strb	r3, [r4, r2]
     a80:	3201      	adds	r2, #1
     a82:	54a3      	strb	r3, [r4, r2]
     a84:	3201      	adds	r2, #1
     a86:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     a88:	3201      	adds	r2, #1
     a8a:	54a3      	strb	r3, [r4, r2]
     a8c:	3201      	adds	r2, #1
     a8e:	54a3      	strb	r3, [r4, r2]
     a90:	3201      	adds	r2, #1
     a92:	54a3      	strb	r3, [r4, r2]
     a94:	3201      	adds	r2, #1
     a96:	54a3      	strb	r3, [r4, r2]
     a98:	3201      	adds	r2, #1
     a9a:	54a3      	strb	r3, [r4, r2]
     a9c:	3201      	adds	r2, #1
     a9e:	54a3      	strb	r3, [r4, r2]
     aa0:	3201      	adds	r2, #1
     aa2:	54a3      	strb	r3, [r4, r2]
     aa4:	3201      	adds	r2, #1
     aa6:	54a3      	strb	r3, [r4, r2]
     aa8:	3201      	adds	r2, #1
     aaa:	54a3      	strb	r3, [r4, r2]
     aac:	3201      	adds	r2, #1
     aae:	54a3      	strb	r3, [r4, r2]
     ab0:	3201      	adds	r2, #1
     ab2:	54a3      	strb	r3, [r4, r2]
     ab4:	3201      	adds	r2, #1
     ab6:	54a3      	strb	r3, [r4, r2]
     ab8:	3201      	adds	r2, #1
     aba:	54a3      	strb	r3, [r4, r2]
     abc:	3201      	adds	r2, #1
     abe:	54a3      	strb	r3, [r4, r2]
     ac0:	3201      	adds	r2, #1
     ac2:	54a3      	strb	r3, [r4, r2]
     ac4:	3201      	adds	r2, #1
     ac6:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     ac8:	3201      	adds	r2, #1
     aca:	54a3      	strb	r3, [r4, r2]
     acc:	3201      	adds	r2, #1
     ace:	54a3      	strb	r3, [r4, r2]
     ad0:	3201      	adds	r2, #1
     ad2:	54a3      	strb	r3, [r4, r2]
     ad4:	3201      	adds	r2, #1
     ad6:	54a3      	strb	r3, [r4, r2]
     ad8:	3201      	adds	r2, #1
     ada:	54a3      	strb	r3, [r4, r2]
     adc:	3201      	adds	r2, #1
     ade:	54a3      	strb	r3, [r4, r2]
     ae0:	3201      	adds	r2, #1
     ae2:	54a3      	strb	r3, [r4, r2]
     ae4:	3201      	adds	r2, #1
     ae6:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     ae8:	3241      	adds	r2, #65	; 0x41
     aea:	54a3      	strb	r3, [r4, r2]
     aec:	65a3      	str	r3, [r4, #88]	; 0x58
     aee:	67a3      	str	r3, [r4, #120]	; 0x78
     af0:	3201      	adds	r2, #1
     af2:	54a3      	strb	r3, [r4, r2]
     af4:	65e3      	str	r3, [r4, #92]	; 0x5c
     af6:	67e3      	str	r3, [r4, #124]	; 0x7c
     af8:	3201      	adds	r2, #1
     afa:	54a3      	strb	r3, [r4, r2]
     afc:	6623      	str	r3, [r4, #96]	; 0x60
     afe:	3a1a      	subs	r2, #26
     b00:	50a3      	str	r3, [r4, r2]
     b02:	321b      	adds	r2, #27
     b04:	54a3      	strb	r3, [r4, r2]
     b06:	6663      	str	r3, [r4, #100]	; 0x64
     b08:	3a17      	subs	r2, #23
     b0a:	50a3      	str	r3, [r4, r2]
     b0c:	3218      	adds	r2, #24
     b0e:	54a3      	strb	r3, [r4, r2]
     b10:	66a3      	str	r3, [r4, #104]	; 0x68
     b12:	3a14      	subs	r2, #20
     b14:	50a3      	str	r3, [r4, r2]
     b16:	3215      	adds	r2, #21
     b18:	54a3      	strb	r3, [r4, r2]
     b1a:	66e3      	str	r3, [r4, #108]	; 0x6c
     b1c:	3a11      	subs	r2, #17
     b1e:	50a3      	str	r3, [r4, r2]
     b20:	3212      	adds	r2, #18
     b22:	54a3      	strb	r3, [r4, r2]
     b24:	6723      	str	r3, [r4, #112]	; 0x70
     b26:	3a0e      	subs	r2, #14
     b28:	50a3      	str	r3, [r4, r2]
     b2a:	320f      	adds	r2, #15
     b2c:	54a3      	strb	r3, [r4, r2]
     b2e:	6763      	str	r3, [r4, #116]	; 0x74
     b30:	3a0b      	subs	r2, #11
     b32:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
     b34:	2101      	movs	r1, #1
     b36:	320c      	adds	r2, #12
     b38:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     b3a:	3201      	adds	r2, #1
     b3c:	54a3      	strb	r3, [r4, r2]
}
     b3e:	bd10      	pop	{r4, pc}
     b40:	000009c9 	.word	0x000009c9
     b44:	000050f8 	.word	0x000050f8

00000b48 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
     b48:	b5f0      	push	{r4, r5, r6, r7, lr}
     b4a:	46de      	mov	lr, fp
     b4c:	4657      	mov	r7, sl
     b4e:	464e      	mov	r6, r9
     b50:	4645      	mov	r5, r8
     b52:	b5e0      	push	{r5, r6, r7, lr}
     b54:	b091      	sub	sp, #68	; 0x44
     b56:	9001      	str	r0, [sp, #4]
     b58:	000c      	movs	r4, r1
     b5a:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     b5c:	0008      	movs	r0, r1
     b5e:	4bc3      	ldr	r3, [pc, #780]	; (e6c <tcc_init+0x324>)
     b60:	4798      	blx	r3
     b62:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     b64:	0001      	movs	r1, r0
     b66:	48c2      	ldr	r0, [pc, #776]	; (e70 <tcc_init+0x328>)
     b68:	6a02      	ldr	r2, [r0, #32]
     b6a:	009e      	lsls	r6, r3, #2
     b6c:	4fc1      	ldr	r7, [pc, #772]	; (e74 <tcc_init+0x32c>)
     b6e:	59f7      	ldr	r7, [r6, r7]
     b70:	433a      	orrs	r2, r7
     b72:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     b74:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     b76:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     b78:	0792      	lsls	r2, r2, #30
     b7a:	d506      	bpl.n	b8a <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
     b7c:	b011      	add	sp, #68	; 0x44
     b7e:	bc3c      	pop	{r2, r3, r4, r5}
     b80:	4690      	mov	r8, r2
     b82:	4699      	mov	r9, r3
     b84:	46a2      	mov	sl, r4
     b86:	46ab      	mov	fp, r5
     b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     b8a:	6822      	ldr	r2, [r4, #0]
     b8c:	2701      	movs	r7, #1
     b8e:	4017      	ands	r7, r2
     b90:	d1f4      	bne.n	b7c <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     b92:	48b9      	ldr	r0, [pc, #740]	; (e78 <tcc_init+0x330>)
     b94:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     b96:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     b98:	682e      	ldr	r6, [r5, #0]
     b9a:	42b2      	cmp	r2, r6
     b9c:	d3ee      	bcc.n	b7c <tcc_init+0x34>
		|| (config->counter.period > count_max)
     b9e:	686e      	ldr	r6, [r5, #4]
     ba0:	42b2      	cmp	r2, r6
     ba2:	d3eb      	bcc.n	b7c <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     ba4:	69e8      	ldr	r0, [r5, #28]
     ba6:	4282      	cmp	r2, r0
     ba8:	d200      	bcs.n	bac <tcc_init+0x64>
     baa:	e1b9      	b.n	f20 <tcc_init+0x3d8>
     bac:	6a28      	ldr	r0, [r5, #32]
     bae:	4282      	cmp	r2, r0
     bb0:	d200      	bcs.n	bb4 <tcc_init+0x6c>
     bb2:	e1b7      	b.n	f24 <tcc_init+0x3dc>
     bb4:	6a68      	ldr	r0, [r5, #36]	; 0x24
     bb6:	4282      	cmp	r2, r0
     bb8:	d200      	bcs.n	bbc <tcc_init+0x74>
     bba:	e1b5      	b.n	f28 <tcc_init+0x3e0>
     bbc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     bbe:	4282      	cmp	r2, r0
     bc0:	d200      	bcs.n	bc4 <tcc_init+0x7c>
     bc2:	e1b3      	b.n	f2c <tcc_init+0x3e4>
     bc4:	2298      	movs	r2, #152	; 0x98
     bc6:	4694      	mov	ip, r2
     bc8:	44ac      	add	ip, r5
     bca:	4662      	mov	r2, ip
     bcc:	9208      	str	r2, [sp, #32]
     bce:	2000      	movs	r0, #0
     bd0:	e003      	b.n	bda <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     bd2:	3001      	adds	r0, #1
     bd4:	3201      	adds	r2, #1
     bd6:	2808      	cmp	r0, #8
     bd8:	d008      	beq.n	bec <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     bda:	7816      	ldrb	r6, [r2, #0]
     bdc:	2e00      	cmp	r6, #0
     bde:	d0f8      	beq.n	bd2 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     be0:	4ea6      	ldr	r6, [pc, #664]	; (e7c <tcc_init+0x334>)
     be2:	5c76      	ldrb	r6, [r6, r1]
     be4:	4286      	cmp	r6, r0
     be6:	dcf4      	bgt.n	bd2 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     be8:	2017      	movs	r0, #23
     bea:	e7c7      	b.n	b7c <tcc_init+0x34>
     bec:	2200      	movs	r2, #0
     bee:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     bf0:	2080      	movs	r0, #128	; 0x80
     bf2:	0440      	lsls	r0, r0, #17
     bf4:	4684      	mov	ip, r0
     bf6:	e002      	b.n	bfe <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     bf8:	3201      	adds	r2, #1
     bfa:	2a04      	cmp	r2, #4
     bfc:	d00e      	beq.n	c1c <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     bfe:	18a8      	adds	r0, r5, r2
     c00:	7c00      	ldrb	r0, [r0, #16]
     c02:	2801      	cmp	r0, #1
     c04:	d1f8      	bne.n	bf8 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     c06:	489e      	ldr	r0, [pc, #632]	; (e80 <tcc_init+0x338>)
     c08:	5c40      	ldrb	r0, [r0, r1]
     c0a:	4290      	cmp	r0, r2
     c0c:	da00      	bge.n	c10 <tcc_init+0xc8>
     c0e:	e18f      	b.n	f30 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     c10:	4660      	mov	r0, ip
     c12:	4090      	lsls	r0, r2
     c14:	9e02      	ldr	r6, [sp, #8]
     c16:	4306      	orrs	r6, r0
     c18:	9602      	str	r6, [sp, #8]
     c1a:	e7ed      	b.n	bf8 <tcc_init+0xb0>
	if (config->run_in_standby) {
     c1c:	329d      	adds	r2, #157	; 0x9d
     c1e:	5caa      	ldrb	r2, [r5, r2]
     c20:	2a00      	cmp	r2, #0
     c22:	d004      	beq.n	c2e <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     c24:	2280      	movs	r2, #128	; 0x80
     c26:	0112      	lsls	r2, r2, #4
     c28:	9902      	ldr	r1, [sp, #8]
     c2a:	4311      	orrs	r1, r2
     c2c:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     c2e:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     c30:	1e51      	subs	r1, r2, #1
     c32:	418a      	sbcs	r2, r1
     c34:	0092      	lsls	r2, r2, #2
     c36:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     c38:	7a6a      	ldrb	r2, [r5, #9]
     c3a:	2a01      	cmp	r2, #1
     c3c:	d022      	beq.n	c84 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     c3e:	4a90      	ldr	r2, [pc, #576]	; (e80 <tcc_init+0x338>)
     c40:	5cd2      	ldrb	r2, [r2, r3]
     c42:	0011      	movs	r1, r2
     c44:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     c46:	2235      	movs	r2, #53	; 0x35
     c48:	5caa      	ldrb	r2, [r5, r2]
     c4a:	428a      	cmp	r2, r1
     c4c:	d300      	bcc.n	c50 <tcc_init+0x108>
     c4e:	e179      	b.n	f44 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     c50:	212c      	movs	r1, #44	; 0x2c
     c52:	5c69      	ldrb	r1, [r5, r1]
     c54:	290f      	cmp	r1, #15
     c56:	d900      	bls.n	c5a <tcc_init+0x112>
     c58:	e174      	b.n	f44 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     c5a:	7b28      	ldrb	r0, [r5, #12]
     c5c:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     c5e:	7ae8      	ldrb	r0, [r5, #11]
     c60:	900b      	str	r0, [sp, #44]	; 0x2c
     c62:	202d      	movs	r0, #45	; 0x2d
     c64:	4682      	mov	sl, r0
     c66:	44aa      	add	sl, r5
     c68:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     c6a:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     c6c:	ae0e      	add	r6, sp, #56	; 0x38
     c6e:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     c70:	26c0      	movs	r6, #192	; 0xc0
     c72:	0136      	lsls	r6, r6, #4
     c74:	46b1      	mov	r9, r6
     c76:	4684      	mov	ip, r0
     c78:	46a0      	mov	r8, r4
     c7a:	0028      	movs	r0, r5
     c7c:	4655      	mov	r5, sl
     c7e:	9309      	str	r3, [sp, #36]	; 0x24
     c80:	4682      	mov	sl, r0
     c82:	e035      	b.n	cf0 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     c84:	9906      	ldr	r1, [sp, #24]
     c86:	4311      	orrs	r1, r2
     c88:	9106      	str	r1, [sp, #24]
     c8a:	e7d8      	b.n	c3e <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     c8c:	0292      	lsls	r2, r2, #10
     c8e:	464f      	mov	r7, r9
     c90:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     c92:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     c94:	7919      	ldrb	r1, [r3, #4]
     c96:	468b      	mov	fp, r1
     c98:	2103      	movs	r1, #3
     c9a:	465f      	mov	r7, fp
     c9c:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     c9e:	430a      	orrs	r2, r1
     ca0:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     ca2:	795a      	ldrb	r2, [r3, #5]
     ca4:	0152      	lsls	r2, r2, #5
     ca6:	2160      	movs	r1, #96	; 0x60
     ca8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     caa:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     cac:	7999      	ldrb	r1, [r3, #6]
     cae:	0209      	lsls	r1, r1, #8
     cb0:	26c0      	movs	r6, #192	; 0xc0
     cb2:	00b6      	lsls	r6, r6, #2
     cb4:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     cb6:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     cb8:	79da      	ldrb	r2, [r3, #7]
     cba:	0312      	lsls	r2, r2, #12
     cbc:	21e0      	movs	r1, #224	; 0xe0
     cbe:	01c9      	lsls	r1, r1, #7
     cc0:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     cc2:	4316      	orrs	r6, r2
     cc4:	4334      	orrs	r4, r6
     cc6:	9a03      	ldr	r2, [sp, #12]
     cc8:	4314      	orrs	r4, r2
     cca:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     ccc:	4662      	mov	r2, ip
     cce:	9907      	ldr	r1, [sp, #28]
     cd0:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     cd2:	2a04      	cmp	r2, #4
     cd4:	d02a      	beq.n	d2c <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     cd6:	7c9a      	ldrb	r2, [r3, #18]
     cd8:	9905      	ldr	r1, [sp, #20]
     cda:	4291      	cmp	r1, r2
     cdc:	d800      	bhi.n	ce0 <tcc_init+0x198>
     cde:	e131      	b.n	f44 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     ce0:	7a59      	ldrb	r1, [r3, #9]
     ce2:	350a      	adds	r5, #10
     ce4:	2304      	movs	r3, #4
     ce6:	469b      	mov	fp, r3
     ce8:	44dc      	add	ip, fp
     cea:	290f      	cmp	r1, #15
     cec:	d900      	bls.n	cf0 <tcc_init+0x1a8>
     cee:	e129      	b.n	f44 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     cf0:	0609      	lsls	r1, r1, #24
     cf2:	23f0      	movs	r3, #240	; 0xf0
     cf4:	051b      	lsls	r3, r3, #20
     cf6:	4019      	ands	r1, r3
     cf8:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     cfa:	782e      	ldrb	r6, [r5, #0]
     cfc:	0436      	lsls	r6, r6, #16
     cfe:	20ff      	movs	r0, #255	; 0xff
     d00:	0400      	lsls	r0, r0, #16
     d02:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     d04:	7868      	ldrb	r0, [r5, #1]
     d06:	2480      	movs	r4, #128	; 0x80
     d08:	2800      	cmp	r0, #0
     d0a:	d100      	bne.n	d0e <tcc_init+0x1c6>
     d0c:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     d0e:	7898      	ldrb	r0, [r3, #2]
     d10:	2708      	movs	r7, #8
     d12:	9703      	str	r7, [sp, #12]
     d14:	2800      	cmp	r0, #0
     d16:	d101      	bne.n	d1c <tcc_init+0x1d4>
     d18:	9804      	ldr	r0, [sp, #16]
     d1a:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     d1c:	78d8      	ldrb	r0, [r3, #3]
     d1e:	4683      	mov	fp, r0
     d20:	2010      	movs	r0, #16
     d22:	465f      	mov	r7, fp
     d24:	2f00      	cmp	r7, #0
     d26:	d1b1      	bne.n	c8c <tcc_init+0x144>
     d28:	9804      	ldr	r0, [sp, #16]
     d2a:	e7af      	b.n	c8c <tcc_init+0x144>
     d2c:	4644      	mov	r4, r8
     d2e:	4655      	mov	r5, sl
     d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     d32:	4a52      	ldr	r2, [pc, #328]	; (e7c <tcc_init+0x334>)
     d34:	5cd2      	ldrb	r2, [r2, r3]
     d36:	4691      	mov	r9, r2
     d38:	4651      	mov	r1, sl
     d3a:	3150      	adds	r1, #80	; 0x50
     d3c:	4650      	mov	r0, sl
     d3e:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     d40:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     d42:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     d44:	2601      	movs	r6, #1
     d46:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     d48:	2602      	movs	r6, #2
     d4a:	36ff      	adds	r6, #255	; 0xff
     d4c:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     d4e:	2680      	movs	r6, #128	; 0x80
     d50:	0276      	lsls	r6, r6, #9
     d52:	46b0      	mov	r8, r6
     d54:	46a4      	mov	ip, r4
     d56:	001c      	movs	r4, r3
     d58:	464b      	mov	r3, r9
     d5a:	e00f      	b.n	d7c <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     d5c:	7806      	ldrb	r6, [r0, #0]
     d5e:	2e00      	cmp	r6, #0
     d60:	d007      	beq.n	d72 <tcc_init+0x22a>
			if (i >= ow_num) {
     d62:	4293      	cmp	r3, r2
     d64:	d800      	bhi.n	d68 <tcc_init+0x220>
     d66:	e0e7      	b.n	f38 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     d68:	2e02      	cmp	r6, #2
     d6a:	d014      	beq.n	d96 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     d6c:	4656      	mov	r6, sl
     d6e:	4096      	lsls	r6, r2
     d70:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     d72:	3201      	adds	r2, #1
     d74:	3101      	adds	r1, #1
     d76:	3002      	adds	r0, #2
     d78:	2a08      	cmp	r2, #8
     d7a:	d010      	beq.n	d9e <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     d7c:	780e      	ldrb	r6, [r1, #0]
     d7e:	2e00      	cmp	r6, #0
     d80:	d0ec      	beq.n	d5c <tcc_init+0x214>
			if (i >= ow_num) {
     d82:	4293      	cmp	r3, r2
     d84:	d800      	bhi.n	d88 <tcc_init+0x240>
     d86:	e0d5      	b.n	f34 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     d88:	4646      	mov	r6, r8
     d8a:	4096      	lsls	r6, r2
     d8c:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     d8e:	7806      	ldrb	r6, [r0, #0]
     d90:	2e00      	cmp	r6, #0
     d92:	d1e9      	bne.n	d68 <tcc_init+0x220>
     d94:	e7ed      	b.n	d72 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     d96:	465e      	mov	r6, fp
     d98:	4096      	lsls	r6, r2
     d9a:	4337      	orrs	r7, r6
     d9c:	e7e9      	b.n	d72 <tcc_init+0x22a>
     d9e:	4699      	mov	r9, r3
     da0:	0023      	movs	r3, r4
     da2:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     da4:	7e6a      	ldrb	r2, [r5, #25]
     da6:	0112      	lsls	r2, r2, #4
     da8:	2130      	movs	r1, #48	; 0x30
     daa:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     dac:	7e28      	ldrb	r0, [r5, #24]
     dae:	2207      	movs	r2, #7
     db0:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     db2:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     db4:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     db6:	2080      	movs	r0, #128	; 0x80
     db8:	0240      	lsls	r0, r0, #9
     dba:	000e      	movs	r6, r1
     dbc:	e002      	b.n	dc4 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     dbe:	3201      	adds	r2, #1
     dc0:	2a04      	cmp	r2, #4
     dc2:	d00b      	beq.n	ddc <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
     dc4:	18a9      	adds	r1, r5, r2
     dc6:	7d09      	ldrb	r1, [r1, #20]
     dc8:	2900      	cmp	r1, #0
     dca:	d0f8      	beq.n	dbe <tcc_init+0x276>
			if (n >= cc_num) {
     dcc:	9905      	ldr	r1, [sp, #20]
     dce:	4291      	cmp	r1, r2
     dd0:	dc00      	bgt.n	dd4 <tcc_init+0x28c>
     dd2:	e0b3      	b.n	f3c <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
     dd4:	0001      	movs	r1, r0
     dd6:	4091      	lsls	r1, r2
     dd8:	430e      	orrs	r6, r1
     dda:	e7f0      	b.n	dbe <tcc_init+0x276>
     ddc:	46b2      	mov	sl, r6
     dde:	9801      	ldr	r0, [sp, #4]
     de0:	0002      	movs	r2, r0
     de2:	3204      	adds	r2, #4
     de4:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     de6:	2100      	movs	r1, #0
     de8:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     dea:	4282      	cmp	r2, r0
     dec:	d1fc      	bne.n	de8 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
     dee:	2200      	movs	r2, #0
     df0:	9801      	ldr	r0, [sp, #4]
     df2:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     df4:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     df6:	0099      	lsls	r1, r3, #2
     df8:	4a22      	ldr	r2, [pc, #136]	; (e84 <tcc_init+0x33c>)
     dfa:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
     dfc:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     dfe:	22a0      	movs	r2, #160	; 0xa0
     e00:	5ca9      	ldrb	r1, [r5, r2]
     e02:	3a64      	subs	r2, #100	; 0x64
     e04:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
     e06:	a90d      	add	r1, sp, #52	; 0x34
     e08:	7aaa      	ldrb	r2, [r5, #10]
     e0a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     e0c:	4a1e      	ldr	r2, [pc, #120]	; (e88 <tcc_init+0x340>)
     e0e:	5cd6      	ldrb	r6, [r2, r3]
     e10:	0030      	movs	r0, r6
     e12:	4b1e      	ldr	r3, [pc, #120]	; (e8c <tcc_init+0x344>)
     e14:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     e16:	0030      	movs	r0, r6
     e18:	4b1d      	ldr	r3, [pc, #116]	; (e90 <tcc_init+0x348>)
     e1a:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     e1c:	464b      	mov	r3, r9
     e1e:	2b00      	cmp	r3, #0
     e20:	dd3c      	ble.n	e9c <tcc_init+0x354>
     e22:	002e      	movs	r6, r5
     e24:	3658      	adds	r6, #88	; 0x58
     e26:	3398      	adds	r3, #152	; 0x98
     e28:	4698      	mov	r8, r3
     e2a:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     e2c:	2301      	movs	r3, #1
     e2e:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
     e30:	46ab      	mov	fp, r5
     e32:	4645      	mov	r5, r8
     e34:	46a0      	mov	r8, r4
     e36:	9c08      	ldr	r4, [sp, #32]
     e38:	e003      	b.n	e42 <tcc_init+0x2fa>
     e3a:	3401      	adds	r4, #1
     e3c:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     e3e:	42ac      	cmp	r4, r5
     e40:	d02a      	beq.n	e98 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
     e42:	7823      	ldrb	r3, [r4, #0]
     e44:	2b00      	cmp	r3, #0
     e46:	d0f8      	beq.n	e3a <tcc_init+0x2f2>
     e48:	ab0c      	add	r3, sp, #48	; 0x30
     e4a:	464a      	mov	r2, r9
     e4c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     e4e:	2300      	movs	r3, #0
     e50:	aa0c      	add	r2, sp, #48	; 0x30
     e52:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     e54:	0013      	movs	r3, r2
     e56:	2220      	movs	r2, #32
     e58:	18b2      	adds	r2, r6, r2
     e5a:	7812      	ldrb	r2, [r2, #0]
     e5c:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     e5e:	464a      	mov	r2, r9
     e60:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     e62:	7830      	ldrb	r0, [r6, #0]
     e64:	0019      	movs	r1, r3
     e66:	4b0b      	ldr	r3, [pc, #44]	; (e94 <tcc_init+0x34c>)
     e68:	4798      	blx	r3
     e6a:	e7e6      	b.n	e3a <tcc_init+0x2f2>
     e6c:	000009c9 	.word	0x000009c9
     e70:	40000400 	.word	0x40000400
     e74:	000050e4 	.word	0x000050e4
     e78:	000050f8 	.word	0x000050f8
     e7c:	00005104 	.word	0x00005104
     e80:	000050f0 	.word	0x000050f0
     e84:	20000118 	.word	0x20000118
     e88:	000050f4 	.word	0x000050f4
     e8c:	0000236d 	.word	0x0000236d
     e90:	000022e1 	.word	0x000022e1
     e94:	00002465 	.word	0x00002465
     e98:	4644      	mov	r4, r8
     e9a:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     e9e:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     ea0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     ea2:	0212      	lsls	r2, r2, #8
     ea4:	4313      	orrs	r3, r2
     ea6:	9a02      	ldr	r2, [sp, #8]
     ea8:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     eaa:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     eac:	2204      	movs	r2, #4
     eae:	68a3      	ldr	r3, [r4, #8]
     eb0:	421a      	tst	r2, r3
     eb2:	d1fc      	bne.n	eae <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
     eb4:	23ff      	movs	r3, #255	; 0xff
     eb6:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     eb8:	2204      	movs	r2, #4
     eba:	68a3      	ldr	r3, [r4, #8]
     ebc:	421a      	tst	r2, r3
     ebe:	d1fc      	bne.n	eba <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
     ec0:	466b      	mov	r3, sp
     ec2:	7e1b      	ldrb	r3, [r3, #24]
     ec4:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     ec8:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     ecc:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     ece:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     ed0:	4a1d      	ldr	r2, [pc, #116]	; (f48 <tcc_init+0x400>)
     ed2:	68a3      	ldr	r3, [r4, #8]
     ed4:	4213      	tst	r3, r2
     ed6:	d1fc      	bne.n	ed2 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
     ed8:	4653      	mov	r3, sl
     eda:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     edc:	2210      	movs	r2, #16
     ede:	68a3      	ldr	r3, [r4, #8]
     ee0:	421a      	tst	r2, r3
     ee2:	d1fc      	bne.n	ede <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
     ee4:	682b      	ldr	r3, [r5, #0]
     ee6:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     ee8:	4a18      	ldr	r2, [pc, #96]	; (f4c <tcc_init+0x404>)
     eea:	68a3      	ldr	r3, [r4, #8]
     eec:	4213      	tst	r3, r2
     eee:	d1fc      	bne.n	eea <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
     ef0:	686b      	ldr	r3, [r5, #4]
     ef2:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     ef4:	9805      	ldr	r0, [sp, #20]
     ef6:	2800      	cmp	r0, #0
     ef8:	dd22      	ble.n	f40 <tcc_init+0x3f8>
     efa:	351c      	adds	r5, #28
     efc:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     efe:	4e14      	ldr	r6, [pc, #80]	; (f50 <tcc_init+0x408>)
     f00:	0032      	movs	r2, r6
     f02:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     f04:	68a3      	ldr	r3, [r4, #8]
     f06:	421a      	tst	r2, r3
     f08:	d1fc      	bne.n	f04 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
     f0a:	cd04      	ldmia	r5!, {r2}
     f0c:	000b      	movs	r3, r1
     f0e:	3310      	adds	r3, #16
     f10:	009b      	lsls	r3, r3, #2
     f12:	18e3      	adds	r3, r4, r3
     f14:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     f16:	3101      	adds	r1, #1
     f18:	4288      	cmp	r0, r1
     f1a:	dcf1      	bgt.n	f00 <tcc_init+0x3b8>
	return STATUS_OK;
     f1c:	2000      	movs	r0, #0
     f1e:	e62d      	b.n	b7c <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     f20:	2017      	movs	r0, #23
     f22:	e62b      	b.n	b7c <tcc_init+0x34>
     f24:	2017      	movs	r0, #23
     f26:	e629      	b.n	b7c <tcc_init+0x34>
     f28:	2017      	movs	r0, #23
     f2a:	e627      	b.n	b7c <tcc_init+0x34>
     f2c:	2017      	movs	r0, #23
     f2e:	e625      	b.n	b7c <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     f30:	2017      	movs	r0, #23
     f32:	e623      	b.n	b7c <tcc_init+0x34>
			if (i >= ow_num) {
     f34:	2017      	movs	r0, #23
     f36:	e621      	b.n	b7c <tcc_init+0x34>
			if (i >= ow_num) {
     f38:	2017      	movs	r0, #23
     f3a:	e61f      	b.n	b7c <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     f3c:	2017      	movs	r0, #23
     f3e:	e61d      	b.n	b7c <tcc_init+0x34>
	return STATUS_OK;
     f40:	2000      	movs	r0, #0
     f42:	e61b      	b.n	b7c <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     f44:	2017      	movs	r0, #23
     f46:	e619      	b.n	b7c <tcc_init+0x34>
     f48:	00020040 	.word	0x00020040
     f4c:	00040080 	.word	0x00040080
     f50:	00080100 	.word	0x00080100

00000f54 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     f54:	0092      	lsls	r2, r2, #2
     f56:	1883      	adds	r3, r0, r2
     f58:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
     f5a:	4b03      	ldr	r3, [pc, #12]	; (f68 <tcc_register_callback+0x14>)
     f5c:	58d3      	ldr	r3, [r2, r3]
     f5e:	6b42      	ldr	r2, [r0, #52]	; 0x34
     f60:	4313      	orrs	r3, r2
     f62:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
     f64:	2000      	movs	r0, #0
     f66:	4770      	bx	lr
     f68:	00005108 	.word	0x00005108

00000f6c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
     f6c:	b570      	push	{r4, r5, r6, lr}
     f6e:	0004      	movs	r4, r0
     f70:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
     f72:	6800      	ldr	r0, [r0, #0]
     f74:	4b09      	ldr	r3, [pc, #36]	; (f9c <tcc_enable_callback+0x30>)
     f76:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
     f78:	4b09      	ldr	r3, [pc, #36]	; (fa0 <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     f7a:	5c1b      	ldrb	r3, [r3, r0]
     f7c:	221f      	movs	r2, #31
     f7e:	401a      	ands	r2, r3
     f80:	2301      	movs	r3, #1
     f82:	4093      	lsls	r3, r2
     f84:	4a07      	ldr	r2, [pc, #28]	; (fa4 <tcc_enable_callback+0x38>)
     f86:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
     f88:	00ad      	lsls	r5, r5, #2
     f8a:	4b07      	ldr	r3, [pc, #28]	; (fa8 <tcc_enable_callback+0x3c>)
     f8c:	58ea      	ldr	r2, [r5, r3]
     f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     f90:	4313      	orrs	r3, r2
     f92:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
     f94:	6823      	ldr	r3, [r4, #0]
     f96:	629a      	str	r2, [r3, #40]	; 0x28
}
     f98:	bd70      	pop	{r4, r5, r6, pc}
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	000009c9 	.word	0x000009c9
     fa0:	00005138 	.word	0x00005138
     fa4:	e000e100 	.word	0xe000e100
     fa8:	00005108 	.word	0x00005108

00000fac <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     fac:	b5f0      	push	{r4, r5, r6, r7, lr}
     fae:	46c6      	mov	lr, r8
     fb0:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     fb2:	0080      	lsls	r0, r0, #2
     fb4:	4b0e      	ldr	r3, [pc, #56]	; (ff0 <_tcc_interrupt_handler+0x44>)
     fb6:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     fb8:	683b      	ldr	r3, [r7, #0]
     fba:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     fc0:	4013      	ands	r3, r2
     fc2:	401e      	ands	r6, r3
     fc4:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     fc6:	4b0b      	ldr	r3, [pc, #44]	; (ff4 <_tcc_interrupt_handler+0x48>)
     fc8:	4698      	mov	r8, r3
     fca:	e002      	b.n	fd2 <_tcc_interrupt_handler+0x26>
     fcc:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     fce:	2c30      	cmp	r4, #48	; 0x30
     fd0:	d00a      	beq.n	fe8 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     fd2:	4643      	mov	r3, r8
     fd4:	58e5      	ldr	r5, [r4, r3]
     fd6:	4235      	tst	r5, r6
     fd8:	d0f8      	beq.n	fcc <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     fda:	193b      	adds	r3, r7, r4
     fdc:	685b      	ldr	r3, [r3, #4]
     fde:	0038      	movs	r0, r7
     fe0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     fe2:	683b      	ldr	r3, [r7, #0]
     fe4:	62dd      	str	r5, [r3, #44]	; 0x2c
     fe6:	e7f1      	b.n	fcc <_tcc_interrupt_handler+0x20>
		}
	}
}
     fe8:	bc04      	pop	{r2}
     fea:	4690      	mov	r8, r2
     fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fee:	46c0      	nop			; (mov r8, r8)
     ff0:	20000118 	.word	0x20000118
     ff4:	00005108 	.word	0x00005108

00000ff8 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     ff8:	b510      	push	{r4, lr}
     ffa:	2000      	movs	r0, #0
     ffc:	4b01      	ldr	r3, [pc, #4]	; (1004 <TCC0_Handler+0xc>)
     ffe:	4798      	blx	r3
    1000:	bd10      	pop	{r4, pc}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	00000fad 	.word	0x00000fad

00001008 <TCC1_Handler>:
    1008:	b510      	push	{r4, lr}
    100a:	2001      	movs	r0, #1
    100c:	4b01      	ldr	r3, [pc, #4]	; (1014 <TCC1_Handler+0xc>)
    100e:	4798      	blx	r3
    1010:	bd10      	pop	{r4, pc}
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	00000fad 	.word	0x00000fad

00001018 <TCC2_Handler>:
    1018:	b510      	push	{r4, lr}
    101a:	2002      	movs	r0, #2
    101c:	4b01      	ldr	r3, [pc, #4]	; (1024 <TCC2_Handler+0xc>)
    101e:	4798      	blx	r3
    1020:	bd10      	pop	{r4, pc}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	00000fad 	.word	0x00000fad

00001028 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1028:	b5f0      	push	{r4, r5, r6, r7, lr}
    102a:	46c6      	mov	lr, r8
    102c:	b500      	push	{lr}
    102e:	000c      	movs	r4, r1
    1030:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1032:	2800      	cmp	r0, #0
    1034:	d10f      	bne.n	1056 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1036:	2a00      	cmp	r2, #0
    1038:	dd11      	ble.n	105e <_read+0x36>
    103a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    103c:	4e09      	ldr	r6, [pc, #36]	; (1064 <_read+0x3c>)
    103e:	4d0a      	ldr	r5, [pc, #40]	; (1068 <_read+0x40>)
    1040:	6830      	ldr	r0, [r6, #0]
    1042:	0021      	movs	r1, r4
    1044:	682b      	ldr	r3, [r5, #0]
    1046:	4798      	blx	r3
		ptr++;
    1048:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    104a:	42bc      	cmp	r4, r7
    104c:	d1f8      	bne.n	1040 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    104e:	4640      	mov	r0, r8
    1050:	bc04      	pop	{r2}
    1052:	4690      	mov	r8, r2
    1054:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1056:	2301      	movs	r3, #1
    1058:	425b      	negs	r3, r3
    105a:	4698      	mov	r8, r3
    105c:	e7f7      	b.n	104e <_read+0x26>
	for (; len > 0; --len) {
    105e:	4680      	mov	r8, r0
    1060:	e7f5      	b.n	104e <_read+0x26>
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	2000012c 	.word	0x2000012c
    1068:	20000124 	.word	0x20000124

0000106c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    106c:	b5f0      	push	{r4, r5, r6, r7, lr}
    106e:	46c6      	mov	lr, r8
    1070:	b500      	push	{lr}
    1072:	000e      	movs	r6, r1
    1074:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1076:	3801      	subs	r0, #1
    1078:	2802      	cmp	r0, #2
    107a:	d810      	bhi.n	109e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    107c:	2a00      	cmp	r2, #0
    107e:	d011      	beq.n	10a4 <_write+0x38>
    1080:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1082:	4b0c      	ldr	r3, [pc, #48]	; (10b4 <_write+0x48>)
    1084:	4698      	mov	r8, r3
    1086:	4f0c      	ldr	r7, [pc, #48]	; (10b8 <_write+0x4c>)
    1088:	4643      	mov	r3, r8
    108a:	6818      	ldr	r0, [r3, #0]
    108c:	5d31      	ldrb	r1, [r6, r4]
    108e:	683b      	ldr	r3, [r7, #0]
    1090:	4798      	blx	r3
    1092:	2800      	cmp	r0, #0
    1094:	db08      	blt.n	10a8 <_write+0x3c>
			return -1;
		}
		++nChars;
    1096:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1098:	42a5      	cmp	r5, r4
    109a:	d1f5      	bne.n	1088 <_write+0x1c>
    109c:	e006      	b.n	10ac <_write+0x40>
		return -1;
    109e:	2401      	movs	r4, #1
    10a0:	4264      	negs	r4, r4
    10a2:	e003      	b.n	10ac <_write+0x40>
	for (; len != 0; --len) {
    10a4:	0014      	movs	r4, r2
    10a6:	e001      	b.n	10ac <_write+0x40>
			return -1;
    10a8:	2401      	movs	r4, #1
    10aa:	4264      	negs	r4, r4
	}
	return nChars;
}
    10ac:	0020      	movs	r0, r4
    10ae:	bc04      	pop	{r2}
    10b0:	4690      	mov	r8, r2
    10b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10b4:	2000012c 	.word	0x2000012c
    10b8:	20000128 	.word	0x20000128

000010bc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    10bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10be:	46de      	mov	lr, fp
    10c0:	4657      	mov	r7, sl
    10c2:	464e      	mov	r6, r9
    10c4:	4645      	mov	r5, r8
    10c6:	b5e0      	push	{r5, r6, r7, lr}
    10c8:	b091      	sub	sp, #68	; 0x44
    10ca:	0005      	movs	r5, r0
    10cc:	000c      	movs	r4, r1
    10ce:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    10d0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10d2:	0008      	movs	r0, r1
    10d4:	4bba      	ldr	r3, [pc, #744]	; (13c0 <usart_init+0x304>)
    10d6:	4798      	blx	r3
    10d8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    10da:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    10dc:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    10de:	07db      	lsls	r3, r3, #31
    10e0:	d506      	bpl.n	10f0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    10e2:	b011      	add	sp, #68	; 0x44
    10e4:	bc3c      	pop	{r2, r3, r4, r5}
    10e6:	4690      	mov	r8, r2
    10e8:	4699      	mov	r9, r3
    10ea:	46a2      	mov	sl, r4
    10ec:	46ab      	mov	fp, r5
    10ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    10f0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    10f2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    10f4:	079b      	lsls	r3, r3, #30
    10f6:	d4f4      	bmi.n	10e2 <usart_init+0x26>
    10f8:	49b2      	ldr	r1, [pc, #712]	; (13c4 <usart_init+0x308>)
    10fa:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    10fc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    10fe:	2301      	movs	r3, #1
    1100:	40bb      	lsls	r3, r7
    1102:	4303      	orrs	r3, r0
    1104:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1106:	a90f      	add	r1, sp, #60	; 0x3c
    1108:	272d      	movs	r7, #45	; 0x2d
    110a:	5df3      	ldrb	r3, [r6, r7]
    110c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    110e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1110:	b2d3      	uxtb	r3, r2
    1112:	9302      	str	r3, [sp, #8]
    1114:	0018      	movs	r0, r3
    1116:	4bac      	ldr	r3, [pc, #688]	; (13c8 <usart_init+0x30c>)
    1118:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    111a:	9802      	ldr	r0, [sp, #8]
    111c:	4bab      	ldr	r3, [pc, #684]	; (13cc <usart_init+0x310>)
    111e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1120:	5df0      	ldrb	r0, [r6, r7]
    1122:	2100      	movs	r1, #0
    1124:	4baa      	ldr	r3, [pc, #680]	; (13d0 <usart_init+0x314>)
    1126:	4798      	blx	r3
	module->character_size = config->character_size;
    1128:	7af3      	ldrb	r3, [r6, #11]
    112a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    112c:	2324      	movs	r3, #36	; 0x24
    112e:	5cf3      	ldrb	r3, [r6, r3]
    1130:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1132:	2325      	movs	r3, #37	; 0x25
    1134:	5cf3      	ldrb	r3, [r6, r3]
    1136:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1138:	7ef3      	ldrb	r3, [r6, #27]
    113a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    113c:	7f33      	ldrb	r3, [r6, #28]
    113e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1140:	682b      	ldr	r3, [r5, #0]
    1142:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1144:	0018      	movs	r0, r3
    1146:	4b9e      	ldr	r3, [pc, #632]	; (13c0 <usart_init+0x304>)
    1148:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    114a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    114c:	2200      	movs	r2, #0
    114e:	230e      	movs	r3, #14
    1150:	a906      	add	r1, sp, #24
    1152:	468c      	mov	ip, r1
    1154:	4463      	add	r3, ip
    1156:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1158:	8a32      	ldrh	r2, [r6, #16]
    115a:	9202      	str	r2, [sp, #8]
    115c:	2380      	movs	r3, #128	; 0x80
    115e:	01db      	lsls	r3, r3, #7
    1160:	429a      	cmp	r2, r3
    1162:	d100      	bne.n	1166 <usart_init+0xaa>
    1164:	e09a      	b.n	129c <usart_init+0x1e0>
    1166:	d90f      	bls.n	1188 <usart_init+0xcc>
    1168:	23c0      	movs	r3, #192	; 0xc0
    116a:	01db      	lsls	r3, r3, #7
    116c:	9a02      	ldr	r2, [sp, #8]
    116e:	429a      	cmp	r2, r3
    1170:	d100      	bne.n	1174 <usart_init+0xb8>
    1172:	e08e      	b.n	1292 <usart_init+0x1d6>
    1174:	2380      	movs	r3, #128	; 0x80
    1176:	021b      	lsls	r3, r3, #8
    1178:	429a      	cmp	r2, r3
    117a:	d000      	beq.n	117e <usart_init+0xc2>
    117c:	e11b      	b.n	13b6 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    117e:	2303      	movs	r3, #3
    1180:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1182:	2300      	movs	r3, #0
    1184:	9307      	str	r3, [sp, #28]
    1186:	e008      	b.n	119a <usart_init+0xde>
	switch (config->sample_rate) {
    1188:	2380      	movs	r3, #128	; 0x80
    118a:	019b      	lsls	r3, r3, #6
    118c:	429a      	cmp	r2, r3
    118e:	d000      	beq.n	1192 <usart_init+0xd6>
    1190:	e111      	b.n	13b6 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1192:	2310      	movs	r3, #16
    1194:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1196:	3b0f      	subs	r3, #15
    1198:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    119a:	6833      	ldr	r3, [r6, #0]
    119c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    119e:	68f3      	ldr	r3, [r6, #12]
    11a0:	469b      	mov	fp, r3
		config->sample_adjustment |
    11a2:	6973      	ldr	r3, [r6, #20]
    11a4:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    11a6:	7e33      	ldrb	r3, [r6, #24]
    11a8:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11aa:	2326      	movs	r3, #38	; 0x26
    11ac:	5cf3      	ldrb	r3, [r6, r3]
    11ae:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    11b0:	6873      	ldr	r3, [r6, #4]
    11b2:	4699      	mov	r9, r3
	switch (transfer_mode)
    11b4:	2b00      	cmp	r3, #0
    11b6:	d100      	bne.n	11ba <usart_init+0xfe>
    11b8:	e09c      	b.n	12f4 <usart_init+0x238>
    11ba:	2380      	movs	r3, #128	; 0x80
    11bc:	055b      	lsls	r3, r3, #21
    11be:	4599      	cmp	r9, r3
    11c0:	d100      	bne.n	11c4 <usart_init+0x108>
    11c2:	e080      	b.n	12c6 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    11c4:	7e73      	ldrb	r3, [r6, #25]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d002      	beq.n	11d0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    11ca:	7eb3      	ldrb	r3, [r6, #26]
    11cc:	4642      	mov	r2, r8
    11ce:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    11d0:	230e      	movs	r3, #14
    11d2:	aa06      	add	r2, sp, #24
    11d4:	4694      	mov	ip, r2
    11d6:	4463      	add	r3, ip
    11d8:	881b      	ldrh	r3, [r3, #0]
    11da:	4642      	mov	r2, r8
    11dc:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    11de:	9b05      	ldr	r3, [sp, #20]
    11e0:	465a      	mov	r2, fp
    11e2:	4313      	orrs	r3, r2
    11e4:	9a03      	ldr	r2, [sp, #12]
    11e6:	4313      	orrs	r3, r2
    11e8:	464a      	mov	r2, r9
    11ea:	4313      	orrs	r3, r2
    11ec:	9f02      	ldr	r7, [sp, #8]
    11ee:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    11f0:	9b04      	ldr	r3, [sp, #16]
    11f2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    11f4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11f6:	4653      	mov	r3, sl
    11f8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    11fa:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    11fc:	2327      	movs	r3, #39	; 0x27
    11fe:	5cf3      	ldrb	r3, [r6, r3]
    1200:	2b00      	cmp	r3, #0
    1202:	d101      	bne.n	1208 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1204:	3304      	adds	r3, #4
    1206:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1208:	7e73      	ldrb	r3, [r6, #25]
    120a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    120c:	7f32      	ldrb	r2, [r6, #28]
    120e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1210:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1212:	7f72      	ldrb	r2, [r6, #29]
    1214:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1216:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1218:	2224      	movs	r2, #36	; 0x24
    121a:	5cb2      	ldrb	r2, [r6, r2]
    121c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    121e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1220:	2225      	movs	r2, #37	; 0x25
    1222:	5cb2      	ldrb	r2, [r6, r2]
    1224:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1226:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1228:	7ab1      	ldrb	r1, [r6, #10]
    122a:	7af2      	ldrb	r2, [r6, #11]
    122c:	4311      	orrs	r1, r2
    122e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1230:	8933      	ldrh	r3, [r6, #8]
    1232:	2bff      	cmp	r3, #255	; 0xff
    1234:	d100      	bne.n	1238 <usart_init+0x17c>
    1236:	e081      	b.n	133c <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1238:	2280      	movs	r2, #128	; 0x80
    123a:	0452      	lsls	r2, r2, #17
    123c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    123e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1240:	232c      	movs	r3, #44	; 0x2c
    1242:	5cf3      	ldrb	r3, [r6, r3]
    1244:	2b00      	cmp	r3, #0
    1246:	d103      	bne.n	1250 <usart_init+0x194>
    1248:	4b62      	ldr	r3, [pc, #392]	; (13d4 <usart_init+0x318>)
    124a:	789b      	ldrb	r3, [r3, #2]
    124c:	079b      	lsls	r3, r3, #30
    124e:	d501      	bpl.n	1254 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1250:	2380      	movs	r3, #128	; 0x80
    1252:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1254:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1256:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1258:	2b00      	cmp	r3, #0
    125a:	d1fc      	bne.n	1256 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    125c:	4643      	mov	r3, r8
    125e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1260:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1262:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1264:	2b00      	cmp	r3, #0
    1266:	d1fc      	bne.n	1262 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    1268:	4643      	mov	r3, r8
    126a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    126c:	ab0e      	add	r3, sp, #56	; 0x38
    126e:	2280      	movs	r2, #128	; 0x80
    1270:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1272:	2200      	movs	r2, #0
    1274:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1276:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1278:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    127a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    127c:	930a      	str	r3, [sp, #40]	; 0x28
    127e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1280:	930b      	str	r3, [sp, #44]	; 0x2c
    1282:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1284:	930c      	str	r3, [sp, #48]	; 0x30
    1286:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1288:	9302      	str	r3, [sp, #8]
    128a:	930d      	str	r3, [sp, #52]	; 0x34
    128c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    128e:	ae0a      	add	r6, sp, #40	; 0x28
    1290:	e063      	b.n	135a <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1292:	2308      	movs	r3, #8
    1294:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1296:	3b07      	subs	r3, #7
    1298:	9307      	str	r3, [sp, #28]
    129a:	e77e      	b.n	119a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    129c:	6833      	ldr	r3, [r6, #0]
    129e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    12a0:	68f3      	ldr	r3, [r6, #12]
    12a2:	469b      	mov	fp, r3
		config->sample_adjustment |
    12a4:	6973      	ldr	r3, [r6, #20]
    12a6:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    12a8:	7e33      	ldrb	r3, [r6, #24]
    12aa:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    12ac:	2326      	movs	r3, #38	; 0x26
    12ae:	5cf3      	ldrb	r3, [r6, r3]
    12b0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    12b2:	6873      	ldr	r3, [r6, #4]
    12b4:	4699      	mov	r9, r3
	switch (transfer_mode)
    12b6:	2b00      	cmp	r3, #0
    12b8:	d018      	beq.n	12ec <usart_init+0x230>
    12ba:	2380      	movs	r3, #128	; 0x80
    12bc:	055b      	lsls	r3, r3, #21
    12be:	4599      	cmp	r9, r3
    12c0:	d001      	beq.n	12c6 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    12c2:	2000      	movs	r0, #0
    12c4:	e025      	b.n	1312 <usart_init+0x256>
			if (!config->use_external_clock) {
    12c6:	2327      	movs	r3, #39	; 0x27
    12c8:	5cf3      	ldrb	r3, [r6, r3]
    12ca:	2b00      	cmp	r3, #0
    12cc:	d000      	beq.n	12d0 <usart_init+0x214>
    12ce:	e779      	b.n	11c4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    12d0:	6a33      	ldr	r3, [r6, #32]
    12d2:	001f      	movs	r7, r3
    12d4:	b2c0      	uxtb	r0, r0
    12d6:	4b40      	ldr	r3, [pc, #256]	; (13d8 <usart_init+0x31c>)
    12d8:	4798      	blx	r3
    12da:	0001      	movs	r1, r0
    12dc:	220e      	movs	r2, #14
    12de:	ab06      	add	r3, sp, #24
    12e0:	469c      	mov	ip, r3
    12e2:	4462      	add	r2, ip
    12e4:	0038      	movs	r0, r7
    12e6:	4b3d      	ldr	r3, [pc, #244]	; (13dc <usart_init+0x320>)
    12e8:	4798      	blx	r3
    12ea:	e012      	b.n	1312 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    12ec:	2308      	movs	r3, #8
    12ee:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    12f0:	2300      	movs	r3, #0
    12f2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    12f4:	2327      	movs	r3, #39	; 0x27
    12f6:	5cf3      	ldrb	r3, [r6, r3]
    12f8:	2b00      	cmp	r3, #0
    12fa:	d00e      	beq.n	131a <usart_init+0x25e>
				status_code =
    12fc:	9b06      	ldr	r3, [sp, #24]
    12fe:	9300      	str	r3, [sp, #0]
    1300:	9b07      	ldr	r3, [sp, #28]
    1302:	220e      	movs	r2, #14
    1304:	a906      	add	r1, sp, #24
    1306:	468c      	mov	ip, r1
    1308:	4462      	add	r2, ip
    130a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    130c:	6a30      	ldr	r0, [r6, #32]
    130e:	4f34      	ldr	r7, [pc, #208]	; (13e0 <usart_init+0x324>)
    1310:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1312:	2800      	cmp	r0, #0
    1314:	d000      	beq.n	1318 <usart_init+0x25c>
    1316:	e6e4      	b.n	10e2 <usart_init+0x26>
    1318:	e754      	b.n	11c4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    131a:	6a33      	ldr	r3, [r6, #32]
    131c:	001f      	movs	r7, r3
    131e:	b2c0      	uxtb	r0, r0
    1320:	4b2d      	ldr	r3, [pc, #180]	; (13d8 <usart_init+0x31c>)
    1322:	4798      	blx	r3
    1324:	0001      	movs	r1, r0
				status_code =
    1326:	9b06      	ldr	r3, [sp, #24]
    1328:	9300      	str	r3, [sp, #0]
    132a:	9b07      	ldr	r3, [sp, #28]
    132c:	220e      	movs	r2, #14
    132e:	a806      	add	r0, sp, #24
    1330:	4684      	mov	ip, r0
    1332:	4462      	add	r2, ip
    1334:	0038      	movs	r0, r7
    1336:	4f2a      	ldr	r7, [pc, #168]	; (13e0 <usart_init+0x324>)
    1338:	47b8      	blx	r7
    133a:	e7ea      	b.n	1312 <usart_init+0x256>
		if(config->lin_slave_enable) {
    133c:	7ef3      	ldrb	r3, [r6, #27]
    133e:	2b00      	cmp	r3, #0
    1340:	d100      	bne.n	1344 <usart_init+0x288>
    1342:	e77d      	b.n	1240 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1344:	2380      	movs	r3, #128	; 0x80
    1346:	04db      	lsls	r3, r3, #19
    1348:	431f      	orrs	r7, r3
    134a:	e779      	b.n	1240 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    134c:	0020      	movs	r0, r4
    134e:	4b25      	ldr	r3, [pc, #148]	; (13e4 <usart_init+0x328>)
    1350:	4798      	blx	r3
    1352:	e007      	b.n	1364 <usart_init+0x2a8>
    1354:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1356:	2f04      	cmp	r7, #4
    1358:	d00d      	beq.n	1376 <usart_init+0x2ba>
    135a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    135c:	00bb      	lsls	r3, r7, #2
    135e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1360:	2800      	cmp	r0, #0
    1362:	d0f3      	beq.n	134c <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    1364:	1c43      	adds	r3, r0, #1
    1366:	d0f5      	beq.n	1354 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1368:	a90e      	add	r1, sp, #56	; 0x38
    136a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    136c:	0c00      	lsrs	r0, r0, #16
    136e:	b2c0      	uxtb	r0, r0
    1370:	4b1d      	ldr	r3, [pc, #116]	; (13e8 <usart_init+0x32c>)
    1372:	4798      	blx	r3
    1374:	e7ee      	b.n	1354 <usart_init+0x298>
		module->callback[i]            = NULL;
    1376:	2300      	movs	r3, #0
    1378:	60eb      	str	r3, [r5, #12]
    137a:	612b      	str	r3, [r5, #16]
    137c:	616b      	str	r3, [r5, #20]
    137e:	61ab      	str	r3, [r5, #24]
    1380:	61eb      	str	r3, [r5, #28]
    1382:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1384:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1386:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1388:	2200      	movs	r2, #0
    138a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    138c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    138e:	3330      	adds	r3, #48	; 0x30
    1390:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1392:	3301      	adds	r3, #1
    1394:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1396:	3301      	adds	r3, #1
    1398:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    139a:	3301      	adds	r3, #1
    139c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    139e:	6828      	ldr	r0, [r5, #0]
    13a0:	4b07      	ldr	r3, [pc, #28]	; (13c0 <usart_init+0x304>)
    13a2:	4798      	blx	r3
    13a4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    13a6:	4911      	ldr	r1, [pc, #68]	; (13ec <usart_init+0x330>)
    13a8:	4b11      	ldr	r3, [pc, #68]	; (13f0 <usart_init+0x334>)
    13aa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    13ac:	00a4      	lsls	r4, r4, #2
    13ae:	4b11      	ldr	r3, [pc, #68]	; (13f4 <usart_init+0x338>)
    13b0:	50e5      	str	r5, [r4, r3]
	return status_code;
    13b2:	2000      	movs	r0, #0
    13b4:	e695      	b.n	10e2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13b6:	2310      	movs	r3, #16
    13b8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13ba:	2300      	movs	r3, #0
    13bc:	9307      	str	r3, [sp, #28]
    13be:	e6ec      	b.n	119a <usart_init+0xde>
    13c0:	00001959 	.word	0x00001959
    13c4:	40000400 	.word	0x40000400
    13c8:	0000236d 	.word	0x0000236d
    13cc:	000022e1 	.word	0x000022e1
    13d0:	00001795 	.word	0x00001795
    13d4:	41002000 	.word	0x41002000
    13d8:	00002389 	.word	0x00002389
    13dc:	000016d7 	.word	0x000016d7
    13e0:	00001701 	.word	0x00001701
    13e4:	000017e1 	.word	0x000017e1
    13e8:	00002465 	.word	0x00002465
    13ec:	00001489 	.word	0x00001489
    13f0:	00001995 	.word	0x00001995
    13f4:	20000130 	.word	0x20000130

000013f8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    13f8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    13fa:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    13fc:	2a00      	cmp	r2, #0
    13fe:	d101      	bne.n	1404 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1400:	0018      	movs	r0, r3
    1402:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1404:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1406:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1408:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    140a:	2a00      	cmp	r2, #0
    140c:	d1f8      	bne.n	1400 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    140e:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    1410:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1412:	2102      	movs	r1, #2
    1414:	7e13      	ldrb	r3, [r2, #24]
    1416:	420b      	tst	r3, r1
    1418:	d0fc      	beq.n	1414 <usart_write_wait+0x1c>
	return STATUS_OK;
    141a:	2300      	movs	r3, #0
    141c:	e7f0      	b.n	1400 <usart_write_wait+0x8>

0000141e <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    141e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1420:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1422:	2a00      	cmp	r2, #0
    1424:	d101      	bne.n	142a <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1426:	0018      	movs	r0, r3
    1428:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    142a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    142c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    142e:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1430:	2a00      	cmp	r2, #0
    1432:	d1f8      	bne.n	1426 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1434:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1436:	7e10      	ldrb	r0, [r2, #24]
    1438:	0740      	lsls	r0, r0, #29
    143a:	d5f4      	bpl.n	1426 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    143c:	8b53      	ldrh	r3, [r2, #26]
    143e:	b2db      	uxtb	r3, r3
	if (error_code) {
    1440:	0698      	lsls	r0, r3, #26
    1442:	d01d      	beq.n	1480 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1444:	0798      	lsls	r0, r3, #30
    1446:	d503      	bpl.n	1450 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1448:	2302      	movs	r3, #2
    144a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    144c:	3318      	adds	r3, #24
    144e:	e7ea      	b.n	1426 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1450:	0758      	lsls	r0, r3, #29
    1452:	d503      	bpl.n	145c <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1454:	2304      	movs	r3, #4
    1456:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1458:	331a      	adds	r3, #26
    145a:	e7e4      	b.n	1426 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    145c:	07d8      	lsls	r0, r3, #31
    145e:	d503      	bpl.n	1468 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1460:	2301      	movs	r3, #1
    1462:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1464:	3312      	adds	r3, #18
    1466:	e7de      	b.n	1426 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1468:	06d8      	lsls	r0, r3, #27
    146a:	d503      	bpl.n	1474 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    146c:	2310      	movs	r3, #16
    146e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1470:	3332      	adds	r3, #50	; 0x32
    1472:	e7d8      	b.n	1426 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1474:	069b      	lsls	r3, r3, #26
    1476:	d503      	bpl.n	1480 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1478:	2320      	movs	r3, #32
    147a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    147c:	3321      	adds	r3, #33	; 0x21
    147e:	e7d2      	b.n	1426 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1480:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1482:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1484:	2300      	movs	r3, #0
    1486:	e7ce      	b.n	1426 <usart_read_wait+0x8>

00001488 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    148a:	0080      	lsls	r0, r0, #2
    148c:	4b62      	ldr	r3, [pc, #392]	; (1618 <_usart_interrupt_handler+0x190>)
    148e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1490:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1492:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1494:	2b00      	cmp	r3, #0
    1496:	d1fc      	bne.n	1492 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1498:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    149a:	7da6      	ldrb	r6, [r4, #22]
    149c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    149e:	2330      	movs	r3, #48	; 0x30
    14a0:	5ceb      	ldrb	r3, [r5, r3]
    14a2:	2231      	movs	r2, #49	; 0x31
    14a4:	5caf      	ldrb	r7, [r5, r2]
    14a6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    14a8:	07f3      	lsls	r3, r6, #31
    14aa:	d522      	bpl.n	14f2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    14ac:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    14ae:	b29b      	uxth	r3, r3
    14b0:	2b00      	cmp	r3, #0
    14b2:	d01c      	beq.n	14ee <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    14b4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    14b6:	7813      	ldrb	r3, [r2, #0]
    14b8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    14ba:	1c51      	adds	r1, r2, #1
    14bc:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    14be:	7969      	ldrb	r1, [r5, #5]
    14c0:	2901      	cmp	r1, #1
    14c2:	d00e      	beq.n	14e2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    14c4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    14c6:	05db      	lsls	r3, r3, #23
    14c8:	0ddb      	lsrs	r3, r3, #23
    14ca:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    14cc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    14ce:	3b01      	subs	r3, #1
    14d0:	b29b      	uxth	r3, r3
    14d2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    14d4:	2b00      	cmp	r3, #0
    14d6:	d10c      	bne.n	14f2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    14d8:	3301      	adds	r3, #1
    14da:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    14dc:	3301      	adds	r3, #1
    14de:	75a3      	strb	r3, [r4, #22]
    14e0:	e007      	b.n	14f2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    14e2:	7851      	ldrb	r1, [r2, #1]
    14e4:	0209      	lsls	r1, r1, #8
    14e6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    14e8:	3202      	adds	r2, #2
    14ea:	62aa      	str	r2, [r5, #40]	; 0x28
    14ec:	e7eb      	b.n	14c6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    14ee:	2301      	movs	r3, #1
    14f0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    14f2:	07b3      	lsls	r3, r6, #30
    14f4:	d506      	bpl.n	1504 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    14f6:	2302      	movs	r3, #2
    14f8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    14fa:	2200      	movs	r2, #0
    14fc:	3331      	adds	r3, #49	; 0x31
    14fe:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1500:	07fb      	lsls	r3, r7, #31
    1502:	d41a      	bmi.n	153a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1504:	0773      	lsls	r3, r6, #29
    1506:	d565      	bpl.n	15d4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1508:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    150a:	b29b      	uxth	r3, r3
    150c:	2b00      	cmp	r3, #0
    150e:	d05f      	beq.n	15d0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1510:	8b63      	ldrh	r3, [r4, #26]
    1512:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1514:	071a      	lsls	r2, r3, #28
    1516:	d414      	bmi.n	1542 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1518:	223f      	movs	r2, #63	; 0x3f
    151a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    151c:	2b00      	cmp	r3, #0
    151e:	d034      	beq.n	158a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1520:	079a      	lsls	r2, r3, #30
    1522:	d511      	bpl.n	1548 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1524:	221a      	movs	r2, #26
    1526:	2332      	movs	r3, #50	; 0x32
    1528:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    152a:	3b30      	subs	r3, #48	; 0x30
    152c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    152e:	077b      	lsls	r3, r7, #29
    1530:	d550      	bpl.n	15d4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1532:	0028      	movs	r0, r5
    1534:	696b      	ldr	r3, [r5, #20]
    1536:	4798      	blx	r3
    1538:	e04c      	b.n	15d4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    153a:	0028      	movs	r0, r5
    153c:	68eb      	ldr	r3, [r5, #12]
    153e:	4798      	blx	r3
    1540:	e7e0      	b.n	1504 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1542:	2237      	movs	r2, #55	; 0x37
    1544:	4013      	ands	r3, r2
    1546:	e7e9      	b.n	151c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1548:	075a      	lsls	r2, r3, #29
    154a:	d505      	bpl.n	1558 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    154c:	221e      	movs	r2, #30
    154e:	2332      	movs	r3, #50	; 0x32
    1550:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1552:	3b2e      	subs	r3, #46	; 0x2e
    1554:	8363      	strh	r3, [r4, #26]
    1556:	e7ea      	b.n	152e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1558:	07da      	lsls	r2, r3, #31
    155a:	d505      	bpl.n	1568 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    155c:	2213      	movs	r2, #19
    155e:	2332      	movs	r3, #50	; 0x32
    1560:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1562:	3b31      	subs	r3, #49	; 0x31
    1564:	8363      	strh	r3, [r4, #26]
    1566:	e7e2      	b.n	152e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1568:	06da      	lsls	r2, r3, #27
    156a:	d505      	bpl.n	1578 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    156c:	2242      	movs	r2, #66	; 0x42
    156e:	2332      	movs	r3, #50	; 0x32
    1570:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1572:	3b22      	subs	r3, #34	; 0x22
    1574:	8363      	strh	r3, [r4, #26]
    1576:	e7da      	b.n	152e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1578:	2220      	movs	r2, #32
    157a:	421a      	tst	r2, r3
    157c:	d0d7      	beq.n	152e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    157e:	3221      	adds	r2, #33	; 0x21
    1580:	2332      	movs	r3, #50	; 0x32
    1582:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1584:	3b12      	subs	r3, #18
    1586:	8363      	strh	r3, [r4, #26]
    1588:	e7d1      	b.n	152e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    158a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    158c:	05db      	lsls	r3, r3, #23
    158e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1590:	b2da      	uxtb	r2, r3
    1592:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1594:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1596:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1598:	1c51      	adds	r1, r2, #1
    159a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    159c:	7969      	ldrb	r1, [r5, #5]
    159e:	2901      	cmp	r1, #1
    15a0:	d010      	beq.n	15c4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    15a2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    15a4:	3b01      	subs	r3, #1
    15a6:	b29b      	uxth	r3, r3
    15a8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    15aa:	2b00      	cmp	r3, #0
    15ac:	d112      	bne.n	15d4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    15ae:	3304      	adds	r3, #4
    15b0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    15b2:	2200      	movs	r2, #0
    15b4:	332e      	adds	r3, #46	; 0x2e
    15b6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    15b8:	07bb      	lsls	r3, r7, #30
    15ba:	d50b      	bpl.n	15d4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    15bc:	0028      	movs	r0, r5
    15be:	692b      	ldr	r3, [r5, #16]
    15c0:	4798      	blx	r3
    15c2:	e007      	b.n	15d4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    15c4:	0a1b      	lsrs	r3, r3, #8
    15c6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    15c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    15ca:	3301      	adds	r3, #1
    15cc:	626b      	str	r3, [r5, #36]	; 0x24
    15ce:	e7e8      	b.n	15a2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    15d0:	2304      	movs	r3, #4
    15d2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    15d4:	06f3      	lsls	r3, r6, #27
    15d6:	d504      	bpl.n	15e2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    15d8:	2310      	movs	r3, #16
    15da:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    15dc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    15de:	06fb      	lsls	r3, r7, #27
    15e0:	d40e      	bmi.n	1600 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    15e2:	06b3      	lsls	r3, r6, #26
    15e4:	d504      	bpl.n	15f0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    15e6:	2320      	movs	r3, #32
    15e8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    15ea:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    15ec:	073b      	lsls	r3, r7, #28
    15ee:	d40b      	bmi.n	1608 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    15f0:	0733      	lsls	r3, r6, #28
    15f2:	d504      	bpl.n	15fe <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    15f4:	2308      	movs	r3, #8
    15f6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    15f8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    15fa:	06bb      	lsls	r3, r7, #26
    15fc:	d408      	bmi.n	1610 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    15fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1600:	0028      	movs	r0, r5
    1602:	69eb      	ldr	r3, [r5, #28]
    1604:	4798      	blx	r3
    1606:	e7ec      	b.n	15e2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1608:	0028      	movs	r0, r5
    160a:	69ab      	ldr	r3, [r5, #24]
    160c:	4798      	blx	r3
    160e:	e7ef      	b.n	15f0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1610:	6a2b      	ldr	r3, [r5, #32]
    1612:	0028      	movs	r0, r5
    1614:	4798      	blx	r3
}
    1616:	e7f2      	b.n	15fe <_usart_interrupt_handler+0x176>
    1618:	20000130 	.word	0x20000130

0000161c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    161c:	b5f0      	push	{r4, r5, r6, r7, lr}
    161e:	46de      	mov	lr, fp
    1620:	4657      	mov	r7, sl
    1622:	464e      	mov	r6, r9
    1624:	4645      	mov	r5, r8
    1626:	b5e0      	push	{r5, r6, r7, lr}
    1628:	b087      	sub	sp, #28
    162a:	4680      	mov	r8, r0
    162c:	9104      	str	r1, [sp, #16]
    162e:	0016      	movs	r6, r2
    1630:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1632:	2200      	movs	r2, #0
    1634:	2300      	movs	r3, #0
    1636:	2100      	movs	r1, #0
    1638:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    163a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    163c:	2001      	movs	r0, #1
    163e:	0021      	movs	r1, r4
    1640:	9600      	str	r6, [sp, #0]
    1642:	9701      	str	r7, [sp, #4]
    1644:	465c      	mov	r4, fp
    1646:	9403      	str	r4, [sp, #12]
    1648:	4644      	mov	r4, r8
    164a:	9405      	str	r4, [sp, #20]
    164c:	e013      	b.n	1676 <long_division+0x5a>
    164e:	2420      	movs	r4, #32
    1650:	1a64      	subs	r4, r4, r1
    1652:	0005      	movs	r5, r0
    1654:	40e5      	lsrs	r5, r4
    1656:	46a8      	mov	r8, r5
    1658:	e014      	b.n	1684 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    165a:	9c00      	ldr	r4, [sp, #0]
    165c:	9d01      	ldr	r5, [sp, #4]
    165e:	1b12      	subs	r2, r2, r4
    1660:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1662:	465c      	mov	r4, fp
    1664:	464d      	mov	r5, r9
    1666:	432c      	orrs	r4, r5
    1668:	46a3      	mov	fp, r4
    166a:	9c03      	ldr	r4, [sp, #12]
    166c:	4645      	mov	r5, r8
    166e:	432c      	orrs	r4, r5
    1670:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1672:	3901      	subs	r1, #1
    1674:	d325      	bcc.n	16c2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1676:	2420      	movs	r4, #32
    1678:	4264      	negs	r4, r4
    167a:	190c      	adds	r4, r1, r4
    167c:	d4e7      	bmi.n	164e <long_division+0x32>
    167e:	0005      	movs	r5, r0
    1680:	40a5      	lsls	r5, r4
    1682:	46a8      	mov	r8, r5
    1684:	0004      	movs	r4, r0
    1686:	408c      	lsls	r4, r1
    1688:	46a1      	mov	r9, r4
		r = r << 1;
    168a:	1892      	adds	r2, r2, r2
    168c:	415b      	adcs	r3, r3
    168e:	0014      	movs	r4, r2
    1690:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1692:	9e05      	ldr	r6, [sp, #20]
    1694:	464f      	mov	r7, r9
    1696:	403e      	ands	r6, r7
    1698:	46b4      	mov	ip, r6
    169a:	9e04      	ldr	r6, [sp, #16]
    169c:	4647      	mov	r7, r8
    169e:	403e      	ands	r6, r7
    16a0:	46b2      	mov	sl, r6
    16a2:	4666      	mov	r6, ip
    16a4:	4657      	mov	r7, sl
    16a6:	433e      	orrs	r6, r7
    16a8:	d003      	beq.n	16b2 <long_division+0x96>
			r |= 0x01;
    16aa:	0006      	movs	r6, r0
    16ac:	4326      	orrs	r6, r4
    16ae:	0032      	movs	r2, r6
    16b0:	002b      	movs	r3, r5
		if (r >= d) {
    16b2:	9c00      	ldr	r4, [sp, #0]
    16b4:	9d01      	ldr	r5, [sp, #4]
    16b6:	429d      	cmp	r5, r3
    16b8:	d8db      	bhi.n	1672 <long_division+0x56>
    16ba:	d1ce      	bne.n	165a <long_division+0x3e>
    16bc:	4294      	cmp	r4, r2
    16be:	d8d8      	bhi.n	1672 <long_division+0x56>
    16c0:	e7cb      	b.n	165a <long_division+0x3e>
    16c2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    16c4:	4658      	mov	r0, fp
    16c6:	0019      	movs	r1, r3
    16c8:	b007      	add	sp, #28
    16ca:	bc3c      	pop	{r2, r3, r4, r5}
    16cc:	4690      	mov	r8, r2
    16ce:	4699      	mov	r9, r3
    16d0:	46a2      	mov	sl, r4
    16d2:	46ab      	mov	fp, r5
    16d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000016d6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    16d6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    16d8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    16da:	2340      	movs	r3, #64	; 0x40
    16dc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    16de:	4281      	cmp	r1, r0
    16e0:	d202      	bcs.n	16e8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    16e2:	0018      	movs	r0, r3
    16e4:	bd10      	pop	{r4, pc}
		baud_calculated++;
    16e6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    16e8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    16ea:	1c63      	adds	r3, r4, #1
    16ec:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    16ee:	4288      	cmp	r0, r1
    16f0:	d9f9      	bls.n	16e6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    16f2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    16f4:	2cff      	cmp	r4, #255	; 0xff
    16f6:	d8f4      	bhi.n	16e2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    16f8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    16fa:	2300      	movs	r3, #0
    16fc:	e7f1      	b.n	16e2 <_sercom_get_sync_baud_val+0xc>
	...

00001700 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1700:	b5f0      	push	{r4, r5, r6, r7, lr}
    1702:	b083      	sub	sp, #12
    1704:	000f      	movs	r7, r1
    1706:	0016      	movs	r6, r2
    1708:	aa08      	add	r2, sp, #32
    170a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    170c:	0004      	movs	r4, r0
    170e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1710:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1712:	42bc      	cmp	r4, r7
    1714:	d902      	bls.n	171c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1716:	0010      	movs	r0, r2
    1718:	b003      	add	sp, #12
    171a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    171c:	2b00      	cmp	r3, #0
    171e:	d114      	bne.n	174a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1720:	0002      	movs	r2, r0
    1722:	0008      	movs	r0, r1
    1724:	2100      	movs	r1, #0
    1726:	4c19      	ldr	r4, [pc, #100]	; (178c <_sercom_get_async_baud_val+0x8c>)
    1728:	47a0      	blx	r4
    172a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    172c:	003a      	movs	r2, r7
    172e:	2300      	movs	r3, #0
    1730:	2000      	movs	r0, #0
    1732:	4c17      	ldr	r4, [pc, #92]	; (1790 <_sercom_get_async_baud_val+0x90>)
    1734:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1736:	2200      	movs	r2, #0
    1738:	2301      	movs	r3, #1
    173a:	1a12      	subs	r2, r2, r0
    173c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    173e:	0c12      	lsrs	r2, r2, #16
    1740:	041b      	lsls	r3, r3, #16
    1742:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1744:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1746:	2200      	movs	r2, #0
    1748:	e7e5      	b.n	1716 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    174a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    174c:	2b01      	cmp	r3, #1
    174e:	d1f9      	bne.n	1744 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1750:	000a      	movs	r2, r1
    1752:	2300      	movs	r3, #0
    1754:	2100      	movs	r1, #0
    1756:	4c0d      	ldr	r4, [pc, #52]	; (178c <_sercom_get_async_baud_val+0x8c>)
    1758:	47a0      	blx	r4
    175a:	0002      	movs	r2, r0
    175c:	000b      	movs	r3, r1
    175e:	9200      	str	r2, [sp, #0]
    1760:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1762:	0038      	movs	r0, r7
    1764:	2100      	movs	r1, #0
    1766:	4c0a      	ldr	r4, [pc, #40]	; (1790 <_sercom_get_async_baud_val+0x90>)
    1768:	47a0      	blx	r4
    176a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    176c:	2380      	movs	r3, #128	; 0x80
    176e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1770:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1772:	4298      	cmp	r0, r3
    1774:	d8cf      	bhi.n	1716 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1776:	0f79      	lsrs	r1, r7, #29
    1778:	00f8      	lsls	r0, r7, #3
    177a:	9a00      	ldr	r2, [sp, #0]
    177c:	9b01      	ldr	r3, [sp, #4]
    177e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1780:	00ea      	lsls	r2, r5, #3
    1782:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1784:	b2d2      	uxtb	r2, r2
    1786:	0352      	lsls	r2, r2, #13
    1788:	432a      	orrs	r2, r5
    178a:	e7db      	b.n	1744 <_sercom_get_async_baud_val+0x44>
    178c:	000033f5 	.word	0x000033f5
    1790:	0000161d 	.word	0x0000161d

00001794 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1794:	b510      	push	{r4, lr}
    1796:	b082      	sub	sp, #8
    1798:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    179a:	4b0e      	ldr	r3, [pc, #56]	; (17d4 <sercom_set_gclk_generator+0x40>)
    179c:	781b      	ldrb	r3, [r3, #0]
    179e:	2b00      	cmp	r3, #0
    17a0:	d007      	beq.n	17b2 <sercom_set_gclk_generator+0x1e>
    17a2:	2900      	cmp	r1, #0
    17a4:	d105      	bne.n	17b2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    17a6:	4b0b      	ldr	r3, [pc, #44]	; (17d4 <sercom_set_gclk_generator+0x40>)
    17a8:	785b      	ldrb	r3, [r3, #1]
    17aa:	4283      	cmp	r3, r0
    17ac:	d010      	beq.n	17d0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    17ae:	201d      	movs	r0, #29
    17b0:	e00c      	b.n	17cc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    17b2:	a901      	add	r1, sp, #4
    17b4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    17b6:	2013      	movs	r0, #19
    17b8:	4b07      	ldr	r3, [pc, #28]	; (17d8 <sercom_set_gclk_generator+0x44>)
    17ba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    17bc:	2013      	movs	r0, #19
    17be:	4b07      	ldr	r3, [pc, #28]	; (17dc <sercom_set_gclk_generator+0x48>)
    17c0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    17c2:	4b04      	ldr	r3, [pc, #16]	; (17d4 <sercom_set_gclk_generator+0x40>)
    17c4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    17c6:	2201      	movs	r2, #1
    17c8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    17ca:	2000      	movs	r0, #0
}
    17cc:	b002      	add	sp, #8
    17ce:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    17d0:	2000      	movs	r0, #0
    17d2:	e7fb      	b.n	17cc <sercom_set_gclk_generator+0x38>
    17d4:	20000090 	.word	0x20000090
    17d8:	0000236d 	.word	0x0000236d
    17dc:	000022e1 	.word	0x000022e1

000017e0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    17e0:	4b40      	ldr	r3, [pc, #256]	; (18e4 <_sercom_get_default_pad+0x104>)
    17e2:	4298      	cmp	r0, r3
    17e4:	d031      	beq.n	184a <_sercom_get_default_pad+0x6a>
    17e6:	d90a      	bls.n	17fe <_sercom_get_default_pad+0x1e>
    17e8:	4b3f      	ldr	r3, [pc, #252]	; (18e8 <_sercom_get_default_pad+0x108>)
    17ea:	4298      	cmp	r0, r3
    17ec:	d04d      	beq.n	188a <_sercom_get_default_pad+0xaa>
    17ee:	4b3f      	ldr	r3, [pc, #252]	; (18ec <_sercom_get_default_pad+0x10c>)
    17f0:	4298      	cmp	r0, r3
    17f2:	d05a      	beq.n	18aa <_sercom_get_default_pad+0xca>
    17f4:	4b3e      	ldr	r3, [pc, #248]	; (18f0 <_sercom_get_default_pad+0x110>)
    17f6:	4298      	cmp	r0, r3
    17f8:	d037      	beq.n	186a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    17fa:	2000      	movs	r0, #0
}
    17fc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    17fe:	4b3d      	ldr	r3, [pc, #244]	; (18f4 <_sercom_get_default_pad+0x114>)
    1800:	4298      	cmp	r0, r3
    1802:	d00c      	beq.n	181e <_sercom_get_default_pad+0x3e>
    1804:	4b3c      	ldr	r3, [pc, #240]	; (18f8 <_sercom_get_default_pad+0x118>)
    1806:	4298      	cmp	r0, r3
    1808:	d1f7      	bne.n	17fa <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    180a:	2901      	cmp	r1, #1
    180c:	d017      	beq.n	183e <_sercom_get_default_pad+0x5e>
    180e:	2900      	cmp	r1, #0
    1810:	d05d      	beq.n	18ce <_sercom_get_default_pad+0xee>
    1812:	2902      	cmp	r1, #2
    1814:	d015      	beq.n	1842 <_sercom_get_default_pad+0x62>
    1816:	2903      	cmp	r1, #3
    1818:	d015      	beq.n	1846 <_sercom_get_default_pad+0x66>
	return 0;
    181a:	2000      	movs	r0, #0
    181c:	e7ee      	b.n	17fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    181e:	2901      	cmp	r1, #1
    1820:	d007      	beq.n	1832 <_sercom_get_default_pad+0x52>
    1822:	2900      	cmp	r1, #0
    1824:	d051      	beq.n	18ca <_sercom_get_default_pad+0xea>
    1826:	2902      	cmp	r1, #2
    1828:	d005      	beq.n	1836 <_sercom_get_default_pad+0x56>
    182a:	2903      	cmp	r1, #3
    182c:	d005      	beq.n	183a <_sercom_get_default_pad+0x5a>
	return 0;
    182e:	2000      	movs	r0, #0
    1830:	e7e4      	b.n	17fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1832:	4832      	ldr	r0, [pc, #200]	; (18fc <_sercom_get_default_pad+0x11c>)
    1834:	e7e2      	b.n	17fc <_sercom_get_default_pad+0x1c>
    1836:	4832      	ldr	r0, [pc, #200]	; (1900 <_sercom_get_default_pad+0x120>)
    1838:	e7e0      	b.n	17fc <_sercom_get_default_pad+0x1c>
    183a:	4832      	ldr	r0, [pc, #200]	; (1904 <_sercom_get_default_pad+0x124>)
    183c:	e7de      	b.n	17fc <_sercom_get_default_pad+0x1c>
    183e:	4832      	ldr	r0, [pc, #200]	; (1908 <_sercom_get_default_pad+0x128>)
    1840:	e7dc      	b.n	17fc <_sercom_get_default_pad+0x1c>
    1842:	4832      	ldr	r0, [pc, #200]	; (190c <_sercom_get_default_pad+0x12c>)
    1844:	e7da      	b.n	17fc <_sercom_get_default_pad+0x1c>
    1846:	4832      	ldr	r0, [pc, #200]	; (1910 <_sercom_get_default_pad+0x130>)
    1848:	e7d8      	b.n	17fc <_sercom_get_default_pad+0x1c>
    184a:	2901      	cmp	r1, #1
    184c:	d007      	beq.n	185e <_sercom_get_default_pad+0x7e>
    184e:	2900      	cmp	r1, #0
    1850:	d03f      	beq.n	18d2 <_sercom_get_default_pad+0xf2>
    1852:	2902      	cmp	r1, #2
    1854:	d005      	beq.n	1862 <_sercom_get_default_pad+0x82>
    1856:	2903      	cmp	r1, #3
    1858:	d005      	beq.n	1866 <_sercom_get_default_pad+0x86>
	return 0;
    185a:	2000      	movs	r0, #0
    185c:	e7ce      	b.n	17fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    185e:	482d      	ldr	r0, [pc, #180]	; (1914 <_sercom_get_default_pad+0x134>)
    1860:	e7cc      	b.n	17fc <_sercom_get_default_pad+0x1c>
    1862:	482d      	ldr	r0, [pc, #180]	; (1918 <_sercom_get_default_pad+0x138>)
    1864:	e7ca      	b.n	17fc <_sercom_get_default_pad+0x1c>
    1866:	482d      	ldr	r0, [pc, #180]	; (191c <_sercom_get_default_pad+0x13c>)
    1868:	e7c8      	b.n	17fc <_sercom_get_default_pad+0x1c>
    186a:	2901      	cmp	r1, #1
    186c:	d007      	beq.n	187e <_sercom_get_default_pad+0x9e>
    186e:	2900      	cmp	r1, #0
    1870:	d031      	beq.n	18d6 <_sercom_get_default_pad+0xf6>
    1872:	2902      	cmp	r1, #2
    1874:	d005      	beq.n	1882 <_sercom_get_default_pad+0xa2>
    1876:	2903      	cmp	r1, #3
    1878:	d005      	beq.n	1886 <_sercom_get_default_pad+0xa6>
	return 0;
    187a:	2000      	movs	r0, #0
    187c:	e7be      	b.n	17fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    187e:	4828      	ldr	r0, [pc, #160]	; (1920 <_sercom_get_default_pad+0x140>)
    1880:	e7bc      	b.n	17fc <_sercom_get_default_pad+0x1c>
    1882:	4828      	ldr	r0, [pc, #160]	; (1924 <_sercom_get_default_pad+0x144>)
    1884:	e7ba      	b.n	17fc <_sercom_get_default_pad+0x1c>
    1886:	4828      	ldr	r0, [pc, #160]	; (1928 <_sercom_get_default_pad+0x148>)
    1888:	e7b8      	b.n	17fc <_sercom_get_default_pad+0x1c>
    188a:	2901      	cmp	r1, #1
    188c:	d007      	beq.n	189e <_sercom_get_default_pad+0xbe>
    188e:	2900      	cmp	r1, #0
    1890:	d023      	beq.n	18da <_sercom_get_default_pad+0xfa>
    1892:	2902      	cmp	r1, #2
    1894:	d005      	beq.n	18a2 <_sercom_get_default_pad+0xc2>
    1896:	2903      	cmp	r1, #3
    1898:	d005      	beq.n	18a6 <_sercom_get_default_pad+0xc6>
	return 0;
    189a:	2000      	movs	r0, #0
    189c:	e7ae      	b.n	17fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    189e:	4823      	ldr	r0, [pc, #140]	; (192c <_sercom_get_default_pad+0x14c>)
    18a0:	e7ac      	b.n	17fc <_sercom_get_default_pad+0x1c>
    18a2:	4823      	ldr	r0, [pc, #140]	; (1930 <_sercom_get_default_pad+0x150>)
    18a4:	e7aa      	b.n	17fc <_sercom_get_default_pad+0x1c>
    18a6:	4823      	ldr	r0, [pc, #140]	; (1934 <_sercom_get_default_pad+0x154>)
    18a8:	e7a8      	b.n	17fc <_sercom_get_default_pad+0x1c>
    18aa:	2901      	cmp	r1, #1
    18ac:	d007      	beq.n	18be <_sercom_get_default_pad+0xde>
    18ae:	2900      	cmp	r1, #0
    18b0:	d015      	beq.n	18de <_sercom_get_default_pad+0xfe>
    18b2:	2902      	cmp	r1, #2
    18b4:	d005      	beq.n	18c2 <_sercom_get_default_pad+0xe2>
    18b6:	2903      	cmp	r1, #3
    18b8:	d005      	beq.n	18c6 <_sercom_get_default_pad+0xe6>
	return 0;
    18ba:	2000      	movs	r0, #0
    18bc:	e79e      	b.n	17fc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18be:	481e      	ldr	r0, [pc, #120]	; (1938 <_sercom_get_default_pad+0x158>)
    18c0:	e79c      	b.n	17fc <_sercom_get_default_pad+0x1c>
    18c2:	481e      	ldr	r0, [pc, #120]	; (193c <_sercom_get_default_pad+0x15c>)
    18c4:	e79a      	b.n	17fc <_sercom_get_default_pad+0x1c>
    18c6:	481e      	ldr	r0, [pc, #120]	; (1940 <_sercom_get_default_pad+0x160>)
    18c8:	e798      	b.n	17fc <_sercom_get_default_pad+0x1c>
    18ca:	481e      	ldr	r0, [pc, #120]	; (1944 <_sercom_get_default_pad+0x164>)
    18cc:	e796      	b.n	17fc <_sercom_get_default_pad+0x1c>
    18ce:	2003      	movs	r0, #3
    18d0:	e794      	b.n	17fc <_sercom_get_default_pad+0x1c>
    18d2:	481d      	ldr	r0, [pc, #116]	; (1948 <_sercom_get_default_pad+0x168>)
    18d4:	e792      	b.n	17fc <_sercom_get_default_pad+0x1c>
    18d6:	481d      	ldr	r0, [pc, #116]	; (194c <_sercom_get_default_pad+0x16c>)
    18d8:	e790      	b.n	17fc <_sercom_get_default_pad+0x1c>
    18da:	481d      	ldr	r0, [pc, #116]	; (1950 <_sercom_get_default_pad+0x170>)
    18dc:	e78e      	b.n	17fc <_sercom_get_default_pad+0x1c>
    18de:	481d      	ldr	r0, [pc, #116]	; (1954 <_sercom_get_default_pad+0x174>)
    18e0:	e78c      	b.n	17fc <_sercom_get_default_pad+0x1c>
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	42001000 	.word	0x42001000
    18e8:	42001800 	.word	0x42001800
    18ec:	42001c00 	.word	0x42001c00
    18f0:	42001400 	.word	0x42001400
    18f4:	42000800 	.word	0x42000800
    18f8:	42000c00 	.word	0x42000c00
    18fc:	00050003 	.word	0x00050003
    1900:	00060003 	.word	0x00060003
    1904:	00070003 	.word	0x00070003
    1908:	00010003 	.word	0x00010003
    190c:	001e0003 	.word	0x001e0003
    1910:	001f0003 	.word	0x001f0003
    1914:	00090003 	.word	0x00090003
    1918:	000a0003 	.word	0x000a0003
    191c:	000b0003 	.word	0x000b0003
    1920:	00110003 	.word	0x00110003
    1924:	00120003 	.word	0x00120003
    1928:	00130003 	.word	0x00130003
    192c:	000d0003 	.word	0x000d0003
    1930:	000e0003 	.word	0x000e0003
    1934:	000f0003 	.word	0x000f0003
    1938:	00170003 	.word	0x00170003
    193c:	00180003 	.word	0x00180003
    1940:	00190003 	.word	0x00190003
    1944:	00040003 	.word	0x00040003
    1948:	00080003 	.word	0x00080003
    194c:	00100003 	.word	0x00100003
    1950:	000c0003 	.word	0x000c0003
    1954:	00160003 	.word	0x00160003

00001958 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1958:	b530      	push	{r4, r5, lr}
    195a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    195c:	4b0b      	ldr	r3, [pc, #44]	; (198c <_sercom_get_sercom_inst_index+0x34>)
    195e:	466a      	mov	r2, sp
    1960:	cb32      	ldmia	r3!, {r1, r4, r5}
    1962:	c232      	stmia	r2!, {r1, r4, r5}
    1964:	cb32      	ldmia	r3!, {r1, r4, r5}
    1966:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1968:	9b00      	ldr	r3, [sp, #0]
    196a:	4283      	cmp	r3, r0
    196c:	d00b      	beq.n	1986 <_sercom_get_sercom_inst_index+0x2e>
    196e:	2301      	movs	r3, #1
    1970:	009a      	lsls	r2, r3, #2
    1972:	4669      	mov	r1, sp
    1974:	5852      	ldr	r2, [r2, r1]
    1976:	4282      	cmp	r2, r0
    1978:	d006      	beq.n	1988 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    197a:	3301      	adds	r3, #1
    197c:	2b06      	cmp	r3, #6
    197e:	d1f7      	bne.n	1970 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1980:	2000      	movs	r0, #0
}
    1982:	b007      	add	sp, #28
    1984:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1986:	2300      	movs	r3, #0
			return i;
    1988:	b2d8      	uxtb	r0, r3
    198a:	e7fa      	b.n	1982 <_sercom_get_sercom_inst_index+0x2a>
    198c:	0000513c 	.word	0x0000513c

00001990 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1990:	4770      	bx	lr
	...

00001994 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1994:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1996:	4b0a      	ldr	r3, [pc, #40]	; (19c0 <_sercom_set_handler+0x2c>)
    1998:	781b      	ldrb	r3, [r3, #0]
    199a:	2b00      	cmp	r3, #0
    199c:	d10c      	bne.n	19b8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    199e:	4f09      	ldr	r7, [pc, #36]	; (19c4 <_sercom_set_handler+0x30>)
    19a0:	4e09      	ldr	r6, [pc, #36]	; (19c8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    19a2:	4d0a      	ldr	r5, [pc, #40]	; (19cc <_sercom_set_handler+0x38>)
    19a4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    19a6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    19a8:	195a      	adds	r2, r3, r5
    19aa:	6014      	str	r4, [r2, #0]
    19ac:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19ae:	2b18      	cmp	r3, #24
    19b0:	d1f9      	bne.n	19a6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    19b2:	2201      	movs	r2, #1
    19b4:	4b02      	ldr	r3, [pc, #8]	; (19c0 <_sercom_set_handler+0x2c>)
    19b6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    19b8:	0080      	lsls	r0, r0, #2
    19ba:	4b02      	ldr	r3, [pc, #8]	; (19c4 <_sercom_set_handler+0x30>)
    19bc:	50c1      	str	r1, [r0, r3]
}
    19be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19c0:	20000092 	.word	0x20000092
    19c4:	20000094 	.word	0x20000094
    19c8:	00001991 	.word	0x00001991
    19cc:	20000130 	.word	0x20000130

000019d0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    19d0:	b500      	push	{lr}
    19d2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    19d4:	2309      	movs	r3, #9
    19d6:	466a      	mov	r2, sp
    19d8:	7013      	strb	r3, [r2, #0]
    19da:	3301      	adds	r3, #1
    19dc:	7053      	strb	r3, [r2, #1]
    19de:	3301      	adds	r3, #1
    19e0:	7093      	strb	r3, [r2, #2]
    19e2:	3301      	adds	r3, #1
    19e4:	70d3      	strb	r3, [r2, #3]
    19e6:	3301      	adds	r3, #1
    19e8:	7113      	strb	r3, [r2, #4]
    19ea:	3301      	adds	r3, #1
    19ec:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    19ee:	4b03      	ldr	r3, [pc, #12]	; (19fc <_sercom_get_interrupt_vector+0x2c>)
    19f0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    19f2:	466b      	mov	r3, sp
    19f4:	5618      	ldrsb	r0, [r3, r0]
}
    19f6:	b003      	add	sp, #12
    19f8:	bd00      	pop	{pc}
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	00001959 	.word	0x00001959

00001a00 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1a00:	b510      	push	{r4, lr}
    1a02:	4b02      	ldr	r3, [pc, #8]	; (1a0c <SERCOM0_Handler+0xc>)
    1a04:	681b      	ldr	r3, [r3, #0]
    1a06:	2000      	movs	r0, #0
    1a08:	4798      	blx	r3
    1a0a:	bd10      	pop	{r4, pc}
    1a0c:	20000094 	.word	0x20000094

00001a10 <SERCOM1_Handler>:
    1a10:	b510      	push	{r4, lr}
    1a12:	4b02      	ldr	r3, [pc, #8]	; (1a1c <SERCOM1_Handler+0xc>)
    1a14:	685b      	ldr	r3, [r3, #4]
    1a16:	2001      	movs	r0, #1
    1a18:	4798      	blx	r3
    1a1a:	bd10      	pop	{r4, pc}
    1a1c:	20000094 	.word	0x20000094

00001a20 <SERCOM2_Handler>:
    1a20:	b510      	push	{r4, lr}
    1a22:	4b02      	ldr	r3, [pc, #8]	; (1a2c <SERCOM2_Handler+0xc>)
    1a24:	689b      	ldr	r3, [r3, #8]
    1a26:	2002      	movs	r0, #2
    1a28:	4798      	blx	r3
    1a2a:	bd10      	pop	{r4, pc}
    1a2c:	20000094 	.word	0x20000094

00001a30 <SERCOM3_Handler>:
    1a30:	b510      	push	{r4, lr}
    1a32:	4b02      	ldr	r3, [pc, #8]	; (1a3c <SERCOM3_Handler+0xc>)
    1a34:	68db      	ldr	r3, [r3, #12]
    1a36:	2003      	movs	r0, #3
    1a38:	4798      	blx	r3
    1a3a:	bd10      	pop	{r4, pc}
    1a3c:	20000094 	.word	0x20000094

00001a40 <SERCOM4_Handler>:
    1a40:	b510      	push	{r4, lr}
    1a42:	4b02      	ldr	r3, [pc, #8]	; (1a4c <SERCOM4_Handler+0xc>)
    1a44:	691b      	ldr	r3, [r3, #16]
    1a46:	2004      	movs	r0, #4
    1a48:	4798      	blx	r3
    1a4a:	bd10      	pop	{r4, pc}
    1a4c:	20000094 	.word	0x20000094

00001a50 <SERCOM5_Handler>:
    1a50:	b510      	push	{r4, lr}
    1a52:	4b02      	ldr	r3, [pc, #8]	; (1a5c <SERCOM5_Handler+0xc>)
    1a54:	695b      	ldr	r3, [r3, #20]
    1a56:	2005      	movs	r0, #5
    1a58:	4798      	blx	r3
    1a5a:	bd10      	pop	{r4, pc}
    1a5c:	20000094 	.word	0x20000094

00001a60 <FIR_filter_init>:
* @param[in]	InputInt Use me to describe inputs to functions
* @param[out]	*pvParameters Use me to describe outputs of functions passed as arguments
* @return		Use me to explain the return of an argument.
* @note         
*****************************************************************************/
void FIR_filter_init(FIR_Filter *obj){
    1a60:	0003      	movs	r3, r0
    1a62:	0001      	movs	r1, r0
    1a64:	3140      	adds	r1, #64	; 0x40

    /* Clear the filter buffer*/
    for(uint8_t i = 0; i < FIR_FILTER_LENGTH; i++){
        obj->buffer[i] = 0;
    1a66:	2200      	movs	r2, #0
    1a68:	c304      	stmia	r3!, {r2}
    for(uint8_t i = 0; i < FIR_FILTER_LENGTH; i++){
    1a6a:	428b      	cmp	r3, r1
    1a6c:	d1fc      	bne.n	1a68 <FIR_filter_init+0x8>
    }

    /*Reset the buffer index to 0*/
    obj->buffer_index = 0;
    1a6e:	2200      	movs	r2, #0
    1a70:	2340      	movs	r3, #64	; 0x40
    1a72:	54c2      	strb	r2, [r0, r3]

    /*Clear the filter output*/
    obj->output = 0;
    1a74:	2300      	movs	r3, #0
    1a76:	6443      	str	r3, [r0, #68]	; 0x44
}
    1a78:	4770      	bx	lr
	...

00001a7c <FIR_update>:
* @param[in]	InputInt Use me to describe inputs to functions
* @param[out]	*pvParameters Use me to describe outputs of functions passed as arguments
* @return		Use me to explain the return of an argument.
* @note         
*****************************************************************************/
float FIR_update(FIR_Filter *obj, float input){
    1a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a7e:	46de      	mov	lr, fp
    1a80:	4657      	mov	r7, sl
    1a82:	464e      	mov	r6, r9
    1a84:	4645      	mov	r5, r8
    1a86:	b5e0      	push	{r5, r6, r7, lr}
    1a88:	b085      	sub	sp, #20
    1a8a:	0007      	movs	r7, r0

    /*Store the input */
    obj->buffer[obj->buffer_index] = input;
    1a8c:	2340      	movs	r3, #64	; 0x40
    1a8e:	5cc3      	ldrb	r3, [r0, r3]
    1a90:	009a      	lsls	r2, r3, #2
    1a92:	5011      	str	r1, [r2, r0]

    /*increment the buffer index*/
    obj->buffer_index++;
    1a94:	3301      	adds	r3, #1
    1a96:	b2db      	uxtb	r3, r3
    if(obj->buffer_index == FIR_FILTER_LENGTH){
    1a98:	2b10      	cmp	r3, #16
    1a9a:	d012      	beq.n	1ac2 <FIR_update+0x46>
    obj->buffer_index++;
    1a9c:	2240      	movs	r2, #64	; 0x40
    1a9e:	5483      	strb	r3, [r0, r2]
        obj->buffer_index = 0;
    }

    /*clear the output and compute new output */
    obj->output = 0;
    1aa0:	2300      	movs	r3, #0
    1aa2:	647b      	str	r3, [r7, #68]	; 0x44
    uint8_t index = obj->buffer_index;
    1aa4:	2240      	movs	r2, #64	; 0x40
    1aa6:	5cbc      	ldrb	r4, [r7, r2]
    1aa8:	4d18      	ldr	r5, [pc, #96]	; (1b0c <FIR_update+0x90>)
    1aaa:	3240      	adds	r2, #64	; 0x40
    1aac:	4693      	mov	fp, r2
    1aae:	44ab      	add	fp, r5
    1ab0:	9301      	str	r3, [sp, #4]
        else {
            index = FIR_FILTER_LENGTH - 1;
        }

        /*Multiply the impulse response with input*/
        obj->output += impulse_response[i] * obj->buffer[index];
    1ab2:	4b17      	ldr	r3, [pc, #92]	; (1b10 <FIR_update+0x94>)
    1ab4:	4698      	mov	r8, r3
    1ab6:	4b17      	ldr	r3, [pc, #92]	; (1b14 <FIR_update+0x98>)
    1ab8:	469a      	mov	sl, r3
    1aba:	4b17      	ldr	r3, [pc, #92]	; (1b18 <FIR_update+0x9c>)
    1abc:	4699      	mov	r9, r3
    1abe:	4e17      	ldr	r6, [pc, #92]	; (1b1c <FIR_update+0xa0>)
    1ac0:	e016      	b.n	1af0 <FIR_update+0x74>
        obj->buffer_index = 0;
    1ac2:	2200      	movs	r2, #0
    1ac4:	2340      	movs	r3, #64	; 0x40
    1ac6:	54c2      	strb	r2, [r0, r3]
    1ac8:	e7ea      	b.n	1aa0 <FIR_update+0x24>
            index = FIR_FILTER_LENGTH - 1;
    1aca:	240f      	movs	r4, #15
        obj->output += impulse_response[i] * obj->buffer[index];
    1acc:	00a3      	lsls	r3, r4, #2
    1ace:	59d8      	ldr	r0, [r3, r7]
    1ad0:	47c0      	blx	r8
    1ad2:	cd0c      	ldmia	r5!, {r2, r3}
    1ad4:	47d0      	blx	sl
    1ad6:	9002      	str	r0, [sp, #8]
    1ad8:	9103      	str	r1, [sp, #12]
    1ada:	9801      	ldr	r0, [sp, #4]
    1adc:	47c0      	blx	r8
    1ade:	0002      	movs	r2, r0
    1ae0:	000b      	movs	r3, r1
    1ae2:	9802      	ldr	r0, [sp, #8]
    1ae4:	9903      	ldr	r1, [sp, #12]
    1ae6:	47c8      	blx	r9
    1ae8:	47b0      	blx	r6
    1aea:	9001      	str	r0, [sp, #4]
    for(uint8_t i = 0; i < FIR_FILTER_LENGTH; i++){
    1aec:	455d      	cmp	r5, fp
    1aee:	d004      	beq.n	1afa <FIR_update+0x7e>
		if(index > 0){
    1af0:	2c00      	cmp	r4, #0
    1af2:	d0ea      	beq.n	1aca <FIR_update+0x4e>
            index--;
    1af4:	3c01      	subs	r4, #1
    1af6:	b2e4      	uxtb	r4, r4
    1af8:	e7e8      	b.n	1acc <FIR_update+0x50>
    1afa:	6478      	str	r0, [r7, #68]	; 0x44
    }

    return obj->output;
    1afc:	b005      	add	sp, #20
    1afe:	bc3c      	pop	{r2, r3, r4, r5}
    1b00:	4690      	mov	r8, r2
    1b02:	4699      	mov	r9, r3
    1b04:	46a2      	mov	sl, r4
    1b06:	46ab      	mov	fp, r5
    1b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	00005158 	.word	0x00005158
    1b10:	00004ed9 	.word	0x00004ed9
    1b14:	00004251 	.word	0x00004251
    1b18:	000035c9 	.word	0x000035c9
    1b1c:	00004f7d 	.word	0x00004f7d

00001b20 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1b20:	b570      	push	{r4, r5, r6, lr}
    1b22:	b082      	sub	sp, #8
    1b24:	0005      	movs	r5, r0
    1b26:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1b28:	2200      	movs	r2, #0
    1b2a:	466b      	mov	r3, sp
    1b2c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1b2e:	4c06      	ldr	r4, [pc, #24]	; (1b48 <usart_serial_getchar+0x28>)
    1b30:	466b      	mov	r3, sp
    1b32:	1d99      	adds	r1, r3, #6
    1b34:	0028      	movs	r0, r5
    1b36:	47a0      	blx	r4
    1b38:	2800      	cmp	r0, #0
    1b3a:	d1f9      	bne.n	1b30 <usart_serial_getchar+0x10>

	*c = temp;
    1b3c:	466b      	mov	r3, sp
    1b3e:	3306      	adds	r3, #6
    1b40:	881b      	ldrh	r3, [r3, #0]
    1b42:	7033      	strb	r3, [r6, #0]
}
    1b44:	b002      	add	sp, #8
    1b46:	bd70      	pop	{r4, r5, r6, pc}
    1b48:	0000141f 	.word	0x0000141f

00001b4c <usart_serial_putchar>:
{
    1b4c:	b570      	push	{r4, r5, r6, lr}
    1b4e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1b50:	b28c      	uxth	r4, r1
    1b52:	4e03      	ldr	r6, [pc, #12]	; (1b60 <usart_serial_putchar+0x14>)
    1b54:	0021      	movs	r1, r4
    1b56:	0028      	movs	r0, r5
    1b58:	47b0      	blx	r6
    1b5a:	2800      	cmp	r0, #0
    1b5c:	d1fa      	bne.n	1b54 <usart_serial_putchar+0x8>
}
    1b5e:	bd70      	pop	{r4, r5, r6, pc}
    1b60:	000013f9 	.word	0x000013f9

00001b64 <configure_console>:

/******************************************************************************
* Forward Declarations
******************************************************************************/
void configure_console(void)
 {
    1b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b66:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1b68:	2380      	movs	r3, #128	; 0x80
    1b6a:	05db      	lsls	r3, r3, #23
    1b6c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1b6e:	2300      	movs	r3, #0
    1b70:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1b72:	22ff      	movs	r2, #255	; 0xff
    1b74:	4669      	mov	r1, sp
    1b76:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1b78:	2200      	movs	r2, #0
    1b7a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1b7c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1b7e:	2401      	movs	r4, #1
    1b80:	2124      	movs	r1, #36	; 0x24
    1b82:	4668      	mov	r0, sp
    1b84:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    1b86:	3101      	adds	r1, #1
    1b88:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    1b8a:	3101      	adds	r1, #1
    1b8c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    1b8e:	3101      	adds	r1, #1
    1b90:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    1b92:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1b94:	3105      	adds	r1, #5
    1b96:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1b98:	3101      	adds	r1, #1
    1b9a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1b9c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1b9e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1ba0:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1ba2:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1ba4:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1ba6:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    1ba8:	2313      	movs	r3, #19
    1baa:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1bac:	7742      	strb	r2, [r0, #29]
	 struct usart_config usart_conf;
	 usart_get_config_defaults(&usart_conf);
	 usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1bae:	23c4      	movs	r3, #196	; 0xc4
    1bb0:	039b      	lsls	r3, r3, #14
    1bb2:	9303      	str	r3, [sp, #12]
	 usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1bb4:	2301      	movs	r3, #1
    1bb6:	425b      	negs	r3, r3
    1bb8:	930c      	str	r3, [sp, #48]	; 0x30
	 usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1bba:	930d      	str	r3, [sp, #52]	; 0x34
	 usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1bbc:	4b18      	ldr	r3, [pc, #96]	; (1c20 <configure_console+0xbc>)
    1bbe:	930e      	str	r3, [sp, #56]	; 0x38
	 usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1bc0:	4b18      	ldr	r3, [pc, #96]	; (1c24 <configure_console+0xc0>)
    1bc2:	930f      	str	r3, [sp, #60]	; 0x3c
	 usart_conf.baudrate    = 115200;
    1bc4:	23e1      	movs	r3, #225	; 0xe1
    1bc6:	025b      	lsls	r3, r3, #9
    1bc8:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1bca:	4d17      	ldr	r5, [pc, #92]	; (1c28 <configure_console+0xc4>)
    1bcc:	4b17      	ldr	r3, [pc, #92]	; (1c2c <configure_console+0xc8>)
    1bce:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1bd0:	4a17      	ldr	r2, [pc, #92]	; (1c30 <configure_console+0xcc>)
    1bd2:	4b18      	ldr	r3, [pc, #96]	; (1c34 <configure_console+0xd0>)
    1bd4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1bd6:	4a18      	ldr	r2, [pc, #96]	; (1c38 <configure_console+0xd4>)
    1bd8:	4b18      	ldr	r3, [pc, #96]	; (1c3c <configure_console+0xd8>)
    1bda:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1bdc:	466a      	mov	r2, sp
    1bde:	4918      	ldr	r1, [pc, #96]	; (1c40 <configure_console+0xdc>)
    1be0:	0028      	movs	r0, r5
    1be2:	4b18      	ldr	r3, [pc, #96]	; (1c44 <configure_console+0xe0>)
    1be4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1be6:	4f18      	ldr	r7, [pc, #96]	; (1c48 <configure_console+0xe4>)
    1be8:	683b      	ldr	r3, [r7, #0]
    1bea:	6898      	ldr	r0, [r3, #8]
    1bec:	2100      	movs	r1, #0
    1bee:	4e17      	ldr	r6, [pc, #92]	; (1c4c <configure_console+0xe8>)
    1bf0:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1bf2:	683b      	ldr	r3, [r7, #0]
    1bf4:	6858      	ldr	r0, [r3, #4]
    1bf6:	2100      	movs	r1, #0
    1bf8:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1bfa:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1bfc:	0030      	movs	r0, r6
    1bfe:	4b14      	ldr	r3, [pc, #80]	; (1c50 <configure_console+0xec>)
    1c00:	4798      	blx	r3
    1c02:	231f      	movs	r3, #31
    1c04:	4018      	ands	r0, r3
    1c06:	4084      	lsls	r4, r0
    1c08:	4b12      	ldr	r3, [pc, #72]	; (1c54 <configure_console+0xf0>)
    1c0a:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c0c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1c0e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1c10:	2b00      	cmp	r3, #0
    1c12:	d1fc      	bne.n	1c0e <configure_console+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1c14:	6833      	ldr	r3, [r6, #0]
    1c16:	2202      	movs	r2, #2
    1c18:	4313      	orrs	r3, r2
    1c1a:	6033      	str	r3, [r6, #0]

	 stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
	 usart_enable(&usart_instance);
 }
    1c1c:	b011      	add	sp, #68	; 0x44
    1c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c20:	002a0003 	.word	0x002a0003
    1c24:	002b0003 	.word	0x002b0003
    1c28:	200000ac 	.word	0x200000ac
    1c2c:	2000012c 	.word	0x2000012c
    1c30:	00001b4d 	.word	0x00001b4d
    1c34:	20000128 	.word	0x20000128
    1c38:	00001b21 	.word	0x00001b21
    1c3c:	20000124 	.word	0x20000124
    1c40:	42001800 	.word	0x42001800
    1c44:	000010bd 	.word	0x000010bd
    1c48:	20000010 	.word	0x20000010
    1c4c:	0000289d 	.word	0x0000289d
    1c50:	000019d1 	.word	0x000019d1
    1c54:	e000e100 	.word	0xe000e100

00001c58 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1c58:	4b0c      	ldr	r3, [pc, #48]	; (1c8c <cpu_irq_enter_critical+0x34>)
    1c5a:	681b      	ldr	r3, [r3, #0]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d106      	bne.n	1c6e <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1c60:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1c64:	2b00      	cmp	r3, #0
    1c66:	d007      	beq.n	1c78 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1c68:	2200      	movs	r2, #0
    1c6a:	4b09      	ldr	r3, [pc, #36]	; (1c90 <cpu_irq_enter_critical+0x38>)
    1c6c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1c6e:	4a07      	ldr	r2, [pc, #28]	; (1c8c <cpu_irq_enter_critical+0x34>)
    1c70:	6813      	ldr	r3, [r2, #0]
    1c72:	3301      	adds	r3, #1
    1c74:	6013      	str	r3, [r2, #0]
}
    1c76:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1c78:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1c7a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1c7e:	2200      	movs	r2, #0
    1c80:	4b04      	ldr	r3, [pc, #16]	; (1c94 <cpu_irq_enter_critical+0x3c>)
    1c82:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1c84:	3201      	adds	r2, #1
    1c86:	4b02      	ldr	r3, [pc, #8]	; (1c90 <cpu_irq_enter_critical+0x38>)
    1c88:	701a      	strb	r2, [r3, #0]
    1c8a:	e7f0      	b.n	1c6e <cpu_irq_enter_critical+0x16>
    1c8c:	200000e0 	.word	0x200000e0
    1c90:	200000e4 	.word	0x200000e4
    1c94:	2000000c 	.word	0x2000000c

00001c98 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1c98:	4b08      	ldr	r3, [pc, #32]	; (1cbc <cpu_irq_leave_critical+0x24>)
    1c9a:	681a      	ldr	r2, [r3, #0]
    1c9c:	3a01      	subs	r2, #1
    1c9e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1ca0:	681b      	ldr	r3, [r3, #0]
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d109      	bne.n	1cba <cpu_irq_leave_critical+0x22>
    1ca6:	4b06      	ldr	r3, [pc, #24]	; (1cc0 <cpu_irq_leave_critical+0x28>)
    1ca8:	781b      	ldrb	r3, [r3, #0]
    1caa:	2b00      	cmp	r3, #0
    1cac:	d005      	beq.n	1cba <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1cae:	2201      	movs	r2, #1
    1cb0:	4b04      	ldr	r3, [pc, #16]	; (1cc4 <cpu_irq_leave_critical+0x2c>)
    1cb2:	701a      	strb	r2, [r3, #0]
    1cb4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1cb8:	b662      	cpsie	i
	}
}
    1cba:	4770      	bx	lr
    1cbc:	200000e0 	.word	0x200000e0
    1cc0:	200000e4 	.word	0x200000e4
    1cc4:	2000000c 	.word	0x2000000c

00001cc8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cca:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1ccc:	ac01      	add	r4, sp, #4
    1cce:	2501      	movs	r5, #1
    1cd0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1cd2:	2700      	movs	r7, #0
    1cd4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1cd6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1cd8:	0021      	movs	r1, r4
    1cda:	2017      	movs	r0, #23
    1cdc:	4e06      	ldr	r6, [pc, #24]	; (1cf8 <system_board_init+0x30>)
    1cde:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1ce0:	2280      	movs	r2, #128	; 0x80
    1ce2:	0412      	lsls	r2, r2, #16
    1ce4:	4b05      	ldr	r3, [pc, #20]	; (1cfc <system_board_init+0x34>)
    1ce6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1ce8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1cea:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1cec:	0021      	movs	r1, r4
    1cee:	2037      	movs	r0, #55	; 0x37
    1cf0:	47b0      	blx	r6
}
    1cf2:	b003      	add	sp, #12
    1cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	00001d01 	.word	0x00001d01
    1cfc:	41004400 	.word	0x41004400

00001d00 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1d00:	b500      	push	{lr}
    1d02:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1d04:	ab01      	add	r3, sp, #4
    1d06:	2280      	movs	r2, #128	; 0x80
    1d08:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1d0a:	780a      	ldrb	r2, [r1, #0]
    1d0c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1d0e:	784a      	ldrb	r2, [r1, #1]
    1d10:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1d12:	788a      	ldrb	r2, [r1, #2]
    1d14:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1d16:	0019      	movs	r1, r3
    1d18:	4b01      	ldr	r3, [pc, #4]	; (1d20 <port_pin_set_config+0x20>)
    1d1a:	4798      	blx	r3
}
    1d1c:	b003      	add	sp, #12
    1d1e:	bd00      	pop	{pc}
    1d20:	00002465 	.word	0x00002465

00001d24 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1d24:	b510      	push	{r4, lr}
	switch (clock_source) {
    1d26:	2808      	cmp	r0, #8
    1d28:	d803      	bhi.n	1d32 <system_clock_source_get_hz+0xe>
    1d2a:	0080      	lsls	r0, r0, #2
    1d2c:	4b1c      	ldr	r3, [pc, #112]	; (1da0 <system_clock_source_get_hz+0x7c>)
    1d2e:	581b      	ldr	r3, [r3, r0]
    1d30:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1d32:	2000      	movs	r0, #0
    1d34:	e032      	b.n	1d9c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1d36:	4b1b      	ldr	r3, [pc, #108]	; (1da4 <system_clock_source_get_hz+0x80>)
    1d38:	6918      	ldr	r0, [r3, #16]
    1d3a:	e02f      	b.n	1d9c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1d3c:	4b1a      	ldr	r3, [pc, #104]	; (1da8 <system_clock_source_get_hz+0x84>)
    1d3e:	6a1b      	ldr	r3, [r3, #32]
    1d40:	059b      	lsls	r3, r3, #22
    1d42:	0f9b      	lsrs	r3, r3, #30
    1d44:	4819      	ldr	r0, [pc, #100]	; (1dac <system_clock_source_get_hz+0x88>)
    1d46:	40d8      	lsrs	r0, r3
    1d48:	e028      	b.n	1d9c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1d4a:	4b16      	ldr	r3, [pc, #88]	; (1da4 <system_clock_source_get_hz+0x80>)
    1d4c:	6958      	ldr	r0, [r3, #20]
    1d4e:	e025      	b.n	1d9c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1d50:	4b14      	ldr	r3, [pc, #80]	; (1da4 <system_clock_source_get_hz+0x80>)
    1d52:	681b      	ldr	r3, [r3, #0]
			return 0;
    1d54:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1d56:	079b      	lsls	r3, r3, #30
    1d58:	d520      	bpl.n	1d9c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d5a:	4913      	ldr	r1, [pc, #76]	; (1da8 <system_clock_source_get_hz+0x84>)
    1d5c:	2210      	movs	r2, #16
    1d5e:	68cb      	ldr	r3, [r1, #12]
    1d60:	421a      	tst	r2, r3
    1d62:	d0fc      	beq.n	1d5e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1d64:	4b0f      	ldr	r3, [pc, #60]	; (1da4 <system_clock_source_get_hz+0x80>)
    1d66:	681a      	ldr	r2, [r3, #0]
    1d68:	2324      	movs	r3, #36	; 0x24
    1d6a:	4013      	ands	r3, r2
    1d6c:	2b04      	cmp	r3, #4
    1d6e:	d001      	beq.n	1d74 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1d70:	480f      	ldr	r0, [pc, #60]	; (1db0 <system_clock_source_get_hz+0x8c>)
    1d72:	e013      	b.n	1d9c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d74:	2000      	movs	r0, #0
    1d76:	4b0f      	ldr	r3, [pc, #60]	; (1db4 <system_clock_source_get_hz+0x90>)
    1d78:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1d7a:	4b0a      	ldr	r3, [pc, #40]	; (1da4 <system_clock_source_get_hz+0x80>)
    1d7c:	689b      	ldr	r3, [r3, #8]
    1d7e:	041b      	lsls	r3, r3, #16
    1d80:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d82:	4358      	muls	r0, r3
    1d84:	e00a      	b.n	1d9c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d86:	2350      	movs	r3, #80	; 0x50
    1d88:	4a07      	ldr	r2, [pc, #28]	; (1da8 <system_clock_source_get_hz+0x84>)
    1d8a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1d8c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d8e:	075b      	lsls	r3, r3, #29
    1d90:	d504      	bpl.n	1d9c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1d92:	4b04      	ldr	r3, [pc, #16]	; (1da4 <system_clock_source_get_hz+0x80>)
    1d94:	68d8      	ldr	r0, [r3, #12]
    1d96:	e001      	b.n	1d9c <system_clock_source_get_hz+0x78>
		return 32768UL;
    1d98:	2080      	movs	r0, #128	; 0x80
    1d9a:	0200      	lsls	r0, r0, #8
	}
}
    1d9c:	bd10      	pop	{r4, pc}
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	000051d8 	.word	0x000051d8
    1da4:	200000e8 	.word	0x200000e8
    1da8:	40000800 	.word	0x40000800
    1dac:	007a1200 	.word	0x007a1200
    1db0:	02dc6c00 	.word	0x02dc6c00
    1db4:	00002389 	.word	0x00002389

00001db8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1db8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1dba:	490c      	ldr	r1, [pc, #48]	; (1dec <system_clock_source_osc8m_set_config+0x34>)
    1dbc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1dbe:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1dc0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1dc2:	7840      	ldrb	r0, [r0, #1]
    1dc4:	2201      	movs	r2, #1
    1dc6:	4010      	ands	r0, r2
    1dc8:	0180      	lsls	r0, r0, #6
    1dca:	2640      	movs	r6, #64	; 0x40
    1dcc:	43b3      	bics	r3, r6
    1dce:	4303      	orrs	r3, r0
    1dd0:	402a      	ands	r2, r5
    1dd2:	01d2      	lsls	r2, r2, #7
    1dd4:	2080      	movs	r0, #128	; 0x80
    1dd6:	4383      	bics	r3, r0
    1dd8:	4313      	orrs	r3, r2
    1dda:	2203      	movs	r2, #3
    1ddc:	4022      	ands	r2, r4
    1dde:	0212      	lsls	r2, r2, #8
    1de0:	4803      	ldr	r0, [pc, #12]	; (1df0 <system_clock_source_osc8m_set_config+0x38>)
    1de2:	4003      	ands	r3, r0
    1de4:	4313      	orrs	r3, r2
    1de6:	620b      	str	r3, [r1, #32]
}
    1de8:	bd70      	pop	{r4, r5, r6, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	40000800 	.word	0x40000800
    1df0:	fffffcff 	.word	0xfffffcff

00001df4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1df4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1df6:	46de      	mov	lr, fp
    1df8:	4657      	mov	r7, sl
    1dfa:	464e      	mov	r6, r9
    1dfc:	4645      	mov	r5, r8
    1dfe:	b5e0      	push	{r5, r6, r7, lr}
    1e00:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1e02:	4b26      	ldr	r3, [pc, #152]	; (1e9c <system_clock_source_xosc32k_set_config+0xa8>)
    1e04:	469b      	mov	fp, r3
    1e06:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1e08:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1e0a:	7800      	ldrb	r0, [r0, #0]
    1e0c:	4242      	negs	r2, r0
    1e0e:	4142      	adcs	r2, r0
    1e10:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1e12:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1e14:	78ca      	ldrb	r2, [r1, #3]
    1e16:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1e18:	790a      	ldrb	r2, [r1, #4]
    1e1a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1e1c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1e1e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1e20:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1e22:	688a      	ldr	r2, [r1, #8]
    1e24:	491e      	ldr	r1, [pc, #120]	; (1ea0 <system_clock_source_xosc32k_set_config+0xac>)
    1e26:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1e28:	2101      	movs	r1, #1
    1e2a:	464a      	mov	r2, r9
    1e2c:	0092      	lsls	r2, r2, #2
    1e2e:	4691      	mov	r9, r2
    1e30:	2204      	movs	r2, #4
    1e32:	4393      	bics	r3, r2
    1e34:	464a      	mov	r2, r9
    1e36:	4313      	orrs	r3, r2
    1e38:	4642      	mov	r2, r8
    1e3a:	400a      	ands	r2, r1
    1e3c:	00d2      	lsls	r2, r2, #3
    1e3e:	4690      	mov	r8, r2
    1e40:	2208      	movs	r2, #8
    1e42:	4393      	bics	r3, r2
    1e44:	4642      	mov	r2, r8
    1e46:	4313      	orrs	r3, r2
    1e48:	4662      	mov	r2, ip
    1e4a:	400a      	ands	r2, r1
    1e4c:	0112      	lsls	r2, r2, #4
    1e4e:	4694      	mov	ip, r2
    1e50:	2210      	movs	r2, #16
    1e52:	4393      	bics	r3, r2
    1e54:	4662      	mov	r2, ip
    1e56:	4313      	orrs	r3, r2
    1e58:	4008      	ands	r0, r1
    1e5a:	0140      	lsls	r0, r0, #5
    1e5c:	2220      	movs	r2, #32
    1e5e:	4393      	bics	r3, r2
    1e60:	4303      	orrs	r3, r0
    1e62:	400f      	ands	r7, r1
    1e64:	01bf      	lsls	r7, r7, #6
    1e66:	2040      	movs	r0, #64	; 0x40
    1e68:	4383      	bics	r3, r0
    1e6a:	433b      	orrs	r3, r7
    1e6c:	400e      	ands	r6, r1
    1e6e:	01f6      	lsls	r6, r6, #7
    1e70:	3040      	adds	r0, #64	; 0x40
    1e72:	4383      	bics	r3, r0
    1e74:	4333      	orrs	r3, r6
    1e76:	3879      	subs	r0, #121	; 0x79
    1e78:	4005      	ands	r5, r0
    1e7a:	022d      	lsls	r5, r5, #8
    1e7c:	4809      	ldr	r0, [pc, #36]	; (1ea4 <system_clock_source_xosc32k_set_config+0xb0>)
    1e7e:	4003      	ands	r3, r0
    1e80:	432b      	orrs	r3, r5
    1e82:	4021      	ands	r1, r4
    1e84:	0309      	lsls	r1, r1, #12
    1e86:	4808      	ldr	r0, [pc, #32]	; (1ea8 <system_clock_source_xosc32k_set_config+0xb4>)
    1e88:	4003      	ands	r3, r0
    1e8a:	430b      	orrs	r3, r1
    1e8c:	465a      	mov	r2, fp
    1e8e:	8293      	strh	r3, [r2, #20]
}
    1e90:	bc3c      	pop	{r2, r3, r4, r5}
    1e92:	4690      	mov	r8, r2
    1e94:	4699      	mov	r9, r3
    1e96:	46a2      	mov	sl, r4
    1e98:	46ab      	mov	fp, r5
    1e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e9c:	40000800 	.word	0x40000800
    1ea0:	200000e8 	.word	0x200000e8
    1ea4:	fffff8ff 	.word	0xfffff8ff
    1ea8:	ffffefff 	.word	0xffffefff

00001eac <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1eac:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1eae:	7a03      	ldrb	r3, [r0, #8]
    1eb0:	069b      	lsls	r3, r3, #26
    1eb2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1eb4:	8942      	ldrh	r2, [r0, #10]
    1eb6:	0592      	lsls	r2, r2, #22
    1eb8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1eba:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1ebc:	4918      	ldr	r1, [pc, #96]	; (1f20 <system_clock_source_dfll_set_config+0x74>)
    1ebe:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1ec0:	7983      	ldrb	r3, [r0, #6]
    1ec2:	79c2      	ldrb	r2, [r0, #7]
    1ec4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1ec6:	8842      	ldrh	r2, [r0, #2]
    1ec8:	8884      	ldrh	r4, [r0, #4]
    1eca:	4322      	orrs	r2, r4
    1ecc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1ece:	7842      	ldrb	r2, [r0, #1]
    1ed0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1ed2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1ed4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1ed6:	7803      	ldrb	r3, [r0, #0]
    1ed8:	2b04      	cmp	r3, #4
    1eda:	d011      	beq.n	1f00 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1edc:	2b20      	cmp	r3, #32
    1ede:	d10e      	bne.n	1efe <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1ee0:	7b03      	ldrb	r3, [r0, #12]
    1ee2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1ee4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1ee6:	4313      	orrs	r3, r2
    1ee8:	89c2      	ldrh	r2, [r0, #14]
    1eea:	0412      	lsls	r2, r2, #16
    1eec:	490d      	ldr	r1, [pc, #52]	; (1f24 <system_clock_source_dfll_set_config+0x78>)
    1eee:	400a      	ands	r2, r1
    1ef0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1ef2:	4a0b      	ldr	r2, [pc, #44]	; (1f20 <system_clock_source_dfll_set_config+0x74>)
    1ef4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1ef6:	6811      	ldr	r1, [r2, #0]
    1ef8:	4b0b      	ldr	r3, [pc, #44]	; (1f28 <system_clock_source_dfll_set_config+0x7c>)
    1efa:	430b      	orrs	r3, r1
    1efc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1efe:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1f00:	7b03      	ldrb	r3, [r0, #12]
    1f02:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1f04:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1f06:	4313      	orrs	r3, r2
    1f08:	89c2      	ldrh	r2, [r0, #14]
    1f0a:	0412      	lsls	r2, r2, #16
    1f0c:	4905      	ldr	r1, [pc, #20]	; (1f24 <system_clock_source_dfll_set_config+0x78>)
    1f0e:	400a      	ands	r2, r1
    1f10:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1f12:	4a03      	ldr	r2, [pc, #12]	; (1f20 <system_clock_source_dfll_set_config+0x74>)
    1f14:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1f16:	6813      	ldr	r3, [r2, #0]
    1f18:	2104      	movs	r1, #4
    1f1a:	430b      	orrs	r3, r1
    1f1c:	6013      	str	r3, [r2, #0]
    1f1e:	e7ee      	b.n	1efe <system_clock_source_dfll_set_config+0x52>
    1f20:	200000e8 	.word	0x200000e8
    1f24:	03ff0000 	.word	0x03ff0000
    1f28:	00000424 	.word	0x00000424

00001f2c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1f2c:	2808      	cmp	r0, #8
    1f2e:	d803      	bhi.n	1f38 <system_clock_source_enable+0xc>
    1f30:	0080      	lsls	r0, r0, #2
    1f32:	4b25      	ldr	r3, [pc, #148]	; (1fc8 <system_clock_source_enable+0x9c>)
    1f34:	581b      	ldr	r3, [r3, r0]
    1f36:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1f38:	2017      	movs	r0, #23
    1f3a:	e044      	b.n	1fc6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1f3c:	4a23      	ldr	r2, [pc, #140]	; (1fcc <system_clock_source_enable+0xa0>)
    1f3e:	6a13      	ldr	r3, [r2, #32]
    1f40:	2102      	movs	r1, #2
    1f42:	430b      	orrs	r3, r1
    1f44:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1f46:	2000      	movs	r0, #0
    1f48:	e03d      	b.n	1fc6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1f4a:	4a20      	ldr	r2, [pc, #128]	; (1fcc <system_clock_source_enable+0xa0>)
    1f4c:	6993      	ldr	r3, [r2, #24]
    1f4e:	2102      	movs	r1, #2
    1f50:	430b      	orrs	r3, r1
    1f52:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1f54:	2000      	movs	r0, #0
		break;
    1f56:	e036      	b.n	1fc6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1f58:	4a1c      	ldr	r2, [pc, #112]	; (1fcc <system_clock_source_enable+0xa0>)
    1f5a:	8a13      	ldrh	r3, [r2, #16]
    1f5c:	2102      	movs	r1, #2
    1f5e:	430b      	orrs	r3, r1
    1f60:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1f62:	2000      	movs	r0, #0
		break;
    1f64:	e02f      	b.n	1fc6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1f66:	4a19      	ldr	r2, [pc, #100]	; (1fcc <system_clock_source_enable+0xa0>)
    1f68:	8a93      	ldrh	r3, [r2, #20]
    1f6a:	2102      	movs	r1, #2
    1f6c:	430b      	orrs	r3, r1
    1f6e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1f70:	2000      	movs	r0, #0
		break;
    1f72:	e028      	b.n	1fc6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1f74:	4916      	ldr	r1, [pc, #88]	; (1fd0 <system_clock_source_enable+0xa4>)
    1f76:	680b      	ldr	r3, [r1, #0]
    1f78:	2202      	movs	r2, #2
    1f7a:	4313      	orrs	r3, r2
    1f7c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1f7e:	4b13      	ldr	r3, [pc, #76]	; (1fcc <system_clock_source_enable+0xa0>)
    1f80:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1f82:	0019      	movs	r1, r3
    1f84:	320e      	adds	r2, #14
    1f86:	68cb      	ldr	r3, [r1, #12]
    1f88:	421a      	tst	r2, r3
    1f8a:	d0fc      	beq.n	1f86 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1f8c:	4a10      	ldr	r2, [pc, #64]	; (1fd0 <system_clock_source_enable+0xa4>)
    1f8e:	6891      	ldr	r1, [r2, #8]
    1f90:	4b0e      	ldr	r3, [pc, #56]	; (1fcc <system_clock_source_enable+0xa0>)
    1f92:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1f94:	6852      	ldr	r2, [r2, #4]
    1f96:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1f98:	2200      	movs	r2, #0
    1f9a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1f9c:	0019      	movs	r1, r3
    1f9e:	3210      	adds	r2, #16
    1fa0:	68cb      	ldr	r3, [r1, #12]
    1fa2:	421a      	tst	r2, r3
    1fa4:	d0fc      	beq.n	1fa0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1fa6:	4b0a      	ldr	r3, [pc, #40]	; (1fd0 <system_clock_source_enable+0xa4>)
    1fa8:	681b      	ldr	r3, [r3, #0]
    1faa:	b29b      	uxth	r3, r3
    1fac:	4a07      	ldr	r2, [pc, #28]	; (1fcc <system_clock_source_enable+0xa0>)
    1fae:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1fb0:	2000      	movs	r0, #0
    1fb2:	e008      	b.n	1fc6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1fb4:	4905      	ldr	r1, [pc, #20]	; (1fcc <system_clock_source_enable+0xa0>)
    1fb6:	2244      	movs	r2, #68	; 0x44
    1fb8:	5c8b      	ldrb	r3, [r1, r2]
    1fba:	2002      	movs	r0, #2
    1fbc:	4303      	orrs	r3, r0
    1fbe:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1fc0:	2000      	movs	r0, #0
		break;
    1fc2:	e000      	b.n	1fc6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1fc4:	2000      	movs	r0, #0
}
    1fc6:	4770      	bx	lr
    1fc8:	000051fc 	.word	0x000051fc
    1fcc:	40000800 	.word	0x40000800
    1fd0:	200000e8 	.word	0x200000e8

00001fd4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1fd8:	22c2      	movs	r2, #194	; 0xc2
    1fda:	00d2      	lsls	r2, r2, #3
    1fdc:	4b47      	ldr	r3, [pc, #284]	; (20fc <STACK_SIZE+0xfc>)
    1fde:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1fe0:	4a47      	ldr	r2, [pc, #284]	; (2100 <STACK_SIZE+0x100>)
    1fe2:	6853      	ldr	r3, [r2, #4]
    1fe4:	211e      	movs	r1, #30
    1fe6:	438b      	bics	r3, r1
    1fe8:	391a      	subs	r1, #26
    1fea:	430b      	orrs	r3, r1
    1fec:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1fee:	2202      	movs	r2, #2
    1ff0:	ab01      	add	r3, sp, #4
    1ff2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ff4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1ff6:	4d43      	ldr	r5, [pc, #268]	; (2104 <STACK_SIZE+0x104>)
    1ff8:	b2e0      	uxtb	r0, r4
    1ffa:	a901      	add	r1, sp, #4
    1ffc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ffe:	3401      	adds	r4, #1
    2000:	2c25      	cmp	r4, #37	; 0x25
    2002:	d1f9      	bne.n	1ff8 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2004:	a80a      	add	r0, sp, #40	; 0x28
    2006:	2300      	movs	r3, #0
    2008:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    200a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    200c:	2280      	movs	r2, #128	; 0x80
    200e:	0212      	lsls	r2, r2, #8
    2010:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2012:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2014:	2201      	movs	r2, #1
    2016:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    2018:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    201a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    201c:	3202      	adds	r2, #2
    201e:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2020:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2022:	4b39      	ldr	r3, [pc, #228]	; (2108 <STACK_SIZE+0x108>)
    2024:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2026:	2005      	movs	r0, #5
    2028:	4b38      	ldr	r3, [pc, #224]	; (210c <STACK_SIZE+0x10c>)
    202a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    202c:	4933      	ldr	r1, [pc, #204]	; (20fc <STACK_SIZE+0xfc>)
    202e:	2202      	movs	r2, #2
    2030:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2032:	421a      	tst	r2, r3
    2034:	d0fc      	beq.n	2030 <STACK_SIZE+0x30>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    2036:	4a31      	ldr	r2, [pc, #196]	; (20fc <STACK_SIZE+0xfc>)
    2038:	8a93      	ldrh	r3, [r2, #20]
    203a:	2180      	movs	r1, #128	; 0x80
    203c:	430b      	orrs	r3, r1
    203e:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2040:	ab05      	add	r3, sp, #20
    2042:	2100      	movs	r1, #0
    2044:	2200      	movs	r2, #0
    2046:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2048:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    204a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    204c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    204e:	313f      	adds	r1, #63	; 0x3f
    2050:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2052:	393b      	subs	r1, #59	; 0x3b
    2054:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2056:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2058:	4b2d      	ldr	r3, [pc, #180]	; (2110 <STACK_SIZE+0x110>)
    205a:	681b      	ldr	r3, [r3, #0]
    205c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    205e:	2b3f      	cmp	r3, #63	; 0x3f
    2060:	d04a      	beq.n	20f8 <STACK_SIZE+0xf8>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2062:	a805      	add	r0, sp, #20
    2064:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2066:	4b2b      	ldr	r3, [pc, #172]	; (2114 <STACK_SIZE+0x114>)
    2068:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    206a:	2307      	movs	r3, #7
    206c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    206e:	3338      	adds	r3, #56	; 0x38
    2070:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2072:	4b29      	ldr	r3, [pc, #164]	; (2118 <STACK_SIZE+0x118>)
    2074:	4798      	blx	r3
	config->run_in_standby  = false;
    2076:	a804      	add	r0, sp, #16
    2078:	2500      	movs	r5, #0
    207a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    207c:	2601      	movs	r6, #1
    207e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2080:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2082:	4b26      	ldr	r3, [pc, #152]	; (211c <STACK_SIZE+0x11c>)
    2084:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2086:	2006      	movs	r0, #6
    2088:	4f20      	ldr	r7, [pc, #128]	; (210c <STACK_SIZE+0x10c>)
    208a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    208c:	4b24      	ldr	r3, [pc, #144]	; (2120 <STACK_SIZE+0x120>)
    208e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2090:	ac01      	add	r4, sp, #4
    2092:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2094:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2096:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2098:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    209a:	2305      	movs	r3, #5
    209c:	7023      	strb	r3, [r4, #0]
    209e:	0021      	movs	r1, r4
    20a0:	2001      	movs	r0, #1
    20a2:	4b20      	ldr	r3, [pc, #128]	; (2124 <STACK_SIZE+0x124>)
    20a4:	4798      	blx	r3
    20a6:	2001      	movs	r0, #1
    20a8:	4b1f      	ldr	r3, [pc, #124]	; (2128 <STACK_SIZE+0x128>)
    20aa:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    20ac:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    20ae:	0021      	movs	r1, r4
    20b0:	2000      	movs	r0, #0
    20b2:	4b14      	ldr	r3, [pc, #80]	; (2104 <STACK_SIZE+0x104>)
    20b4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    20b6:	2000      	movs	r0, #0
    20b8:	4b1c      	ldr	r3, [pc, #112]	; (212c <STACK_SIZE+0x12c>)
    20ba:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    20bc:	2007      	movs	r0, #7
    20be:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    20c0:	490e      	ldr	r1, [pc, #56]	; (20fc <STACK_SIZE+0xfc>)
    20c2:	22d0      	movs	r2, #208	; 0xd0
    20c4:	68cb      	ldr	r3, [r1, #12]
    20c6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    20c8:	2bd0      	cmp	r3, #208	; 0xd0
    20ca:	d1fb      	bne.n	20c4 <STACK_SIZE+0xc4>
	PM->CPUSEL.reg = (uint32_t)divider;
    20cc:	4a18      	ldr	r2, [pc, #96]	; (2130 <STACK_SIZE+0x130>)
    20ce:	2300      	movs	r3, #0
    20d0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    20d2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    20d4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    20d6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    20d8:	a901      	add	r1, sp, #4
    20da:	2201      	movs	r2, #1
    20dc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    20de:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    20e0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    20e2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    20e4:	3307      	adds	r3, #7
    20e6:	700b      	strb	r3, [r1, #0]
    20e8:	2000      	movs	r0, #0
    20ea:	4b0e      	ldr	r3, [pc, #56]	; (2124 <STACK_SIZE+0x124>)
    20ec:	4798      	blx	r3
    20ee:	2000      	movs	r0, #0
    20f0:	4b0d      	ldr	r3, [pc, #52]	; (2128 <STACK_SIZE+0x128>)
    20f2:	4798      	blx	r3
#endif
}
    20f4:	b00f      	add	sp, #60	; 0x3c
    20f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    20f8:	3b20      	subs	r3, #32
    20fa:	e7b2      	b.n	2062 <STACK_SIZE+0x62>
    20fc:	40000800 	.word	0x40000800
    2100:	41004000 	.word	0x41004000
    2104:	0000236d 	.word	0x0000236d
    2108:	00001df5 	.word	0x00001df5
    210c:	00001f2d 	.word	0x00001f2d
    2110:	00806024 	.word	0x00806024
    2114:	000005b9 	.word	0x000005b9
    2118:	00001ead 	.word	0x00001ead
    211c:	00001db9 	.word	0x00001db9
    2120:	00002135 	.word	0x00002135
    2124:	00002159 	.word	0x00002159
    2128:	00002211 	.word	0x00002211
    212c:	000022e1 	.word	0x000022e1
    2130:	40000400 	.word	0x40000400

00002134 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2134:	4a06      	ldr	r2, [pc, #24]	; (2150 <system_gclk_init+0x1c>)
    2136:	6993      	ldr	r3, [r2, #24]
    2138:	2108      	movs	r1, #8
    213a:	430b      	orrs	r3, r1
    213c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    213e:	2201      	movs	r2, #1
    2140:	4b04      	ldr	r3, [pc, #16]	; (2154 <system_gclk_init+0x20>)
    2142:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2144:	0019      	movs	r1, r3
    2146:	780b      	ldrb	r3, [r1, #0]
    2148:	4213      	tst	r3, r2
    214a:	d1fc      	bne.n	2146 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    214c:	4770      	bx	lr
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	40000400 	.word	0x40000400
    2154:	40000c00 	.word	0x40000c00

00002158 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2158:	b570      	push	{r4, r5, r6, lr}
    215a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    215c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    215e:	780d      	ldrb	r5, [r1, #0]
    2160:	022d      	lsls	r5, r5, #8
    2162:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2164:	784b      	ldrb	r3, [r1, #1]
    2166:	2b00      	cmp	r3, #0
    2168:	d002      	beq.n	2170 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    216a:	2380      	movs	r3, #128	; 0x80
    216c:	02db      	lsls	r3, r3, #11
    216e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2170:	7a4b      	ldrb	r3, [r1, #9]
    2172:	2b00      	cmp	r3, #0
    2174:	d002      	beq.n	217c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2176:	2380      	movs	r3, #128	; 0x80
    2178:	031b      	lsls	r3, r3, #12
    217a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    217c:	6848      	ldr	r0, [r1, #4]
    217e:	2801      	cmp	r0, #1
    2180:	d910      	bls.n	21a4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2182:	1e43      	subs	r3, r0, #1
    2184:	4218      	tst	r0, r3
    2186:	d134      	bne.n	21f2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2188:	2802      	cmp	r0, #2
    218a:	d930      	bls.n	21ee <system_gclk_gen_set_config+0x96>
    218c:	2302      	movs	r3, #2
    218e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2190:	3201      	adds	r2, #1
						mask <<= 1) {
    2192:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2194:	4298      	cmp	r0, r3
    2196:	d8fb      	bhi.n	2190 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2198:	0212      	lsls	r2, r2, #8
    219a:	4332      	orrs	r2, r6
    219c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    219e:	2380      	movs	r3, #128	; 0x80
    21a0:	035b      	lsls	r3, r3, #13
    21a2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    21a4:	7a0b      	ldrb	r3, [r1, #8]
    21a6:	2b00      	cmp	r3, #0
    21a8:	d002      	beq.n	21b0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    21aa:	2380      	movs	r3, #128	; 0x80
    21ac:	039b      	lsls	r3, r3, #14
    21ae:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21b0:	4a13      	ldr	r2, [pc, #76]	; (2200 <system_gclk_gen_set_config+0xa8>)
    21b2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    21b4:	b25b      	sxtb	r3, r3
    21b6:	2b00      	cmp	r3, #0
    21b8:	dbfb      	blt.n	21b2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    21ba:	4b12      	ldr	r3, [pc, #72]	; (2204 <system_gclk_gen_set_config+0xac>)
    21bc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    21be:	4b12      	ldr	r3, [pc, #72]	; (2208 <system_gclk_gen_set_config+0xb0>)
    21c0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21c2:	4a0f      	ldr	r2, [pc, #60]	; (2200 <system_gclk_gen_set_config+0xa8>)
    21c4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    21c6:	b25b      	sxtb	r3, r3
    21c8:	2b00      	cmp	r3, #0
    21ca:	dbfb      	blt.n	21c4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    21cc:	4b0c      	ldr	r3, [pc, #48]	; (2200 <system_gclk_gen_set_config+0xa8>)
    21ce:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21d0:	001a      	movs	r2, r3
    21d2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    21d4:	b25b      	sxtb	r3, r3
    21d6:	2b00      	cmp	r3, #0
    21d8:	dbfb      	blt.n	21d2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    21da:	4a09      	ldr	r2, [pc, #36]	; (2200 <system_gclk_gen_set_config+0xa8>)
    21dc:	6853      	ldr	r3, [r2, #4]
    21de:	2180      	movs	r1, #128	; 0x80
    21e0:	0249      	lsls	r1, r1, #9
    21e2:	400b      	ands	r3, r1
    21e4:	431d      	orrs	r5, r3
    21e6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    21e8:	4b08      	ldr	r3, [pc, #32]	; (220c <system_gclk_gen_set_config+0xb4>)
    21ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21ec:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    21ee:	2200      	movs	r2, #0
    21f0:	e7d2      	b.n	2198 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    21f2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    21f4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    21f6:	2380      	movs	r3, #128	; 0x80
    21f8:	029b      	lsls	r3, r3, #10
    21fa:	431d      	orrs	r5, r3
    21fc:	e7d2      	b.n	21a4 <system_gclk_gen_set_config+0x4c>
    21fe:	46c0      	nop			; (mov r8, r8)
    2200:	40000c00 	.word	0x40000c00
    2204:	00001c59 	.word	0x00001c59
    2208:	40000c08 	.word	0x40000c08
    220c:	00001c99 	.word	0x00001c99

00002210 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2210:	b510      	push	{r4, lr}
    2212:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2214:	4a0b      	ldr	r2, [pc, #44]	; (2244 <system_gclk_gen_enable+0x34>)
    2216:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2218:	b25b      	sxtb	r3, r3
    221a:	2b00      	cmp	r3, #0
    221c:	dbfb      	blt.n	2216 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    221e:	4b0a      	ldr	r3, [pc, #40]	; (2248 <system_gclk_gen_enable+0x38>)
    2220:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2222:	4b0a      	ldr	r3, [pc, #40]	; (224c <system_gclk_gen_enable+0x3c>)
    2224:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2226:	4a07      	ldr	r2, [pc, #28]	; (2244 <system_gclk_gen_enable+0x34>)
    2228:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    222a:	b25b      	sxtb	r3, r3
    222c:	2b00      	cmp	r3, #0
    222e:	dbfb      	blt.n	2228 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2230:	4a04      	ldr	r2, [pc, #16]	; (2244 <system_gclk_gen_enable+0x34>)
    2232:	6851      	ldr	r1, [r2, #4]
    2234:	2380      	movs	r3, #128	; 0x80
    2236:	025b      	lsls	r3, r3, #9
    2238:	430b      	orrs	r3, r1
    223a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    223c:	4b04      	ldr	r3, [pc, #16]	; (2250 <system_gclk_gen_enable+0x40>)
    223e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2240:	bd10      	pop	{r4, pc}
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	40000c00 	.word	0x40000c00
    2248:	00001c59 	.word	0x00001c59
    224c:	40000c04 	.word	0x40000c04
    2250:	00001c99 	.word	0x00001c99

00002254 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2254:	b570      	push	{r4, r5, r6, lr}
    2256:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2258:	4a1a      	ldr	r2, [pc, #104]	; (22c4 <system_gclk_gen_get_hz+0x70>)
    225a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    225c:	b25b      	sxtb	r3, r3
    225e:	2b00      	cmp	r3, #0
    2260:	dbfb      	blt.n	225a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2262:	4b19      	ldr	r3, [pc, #100]	; (22c8 <system_gclk_gen_get_hz+0x74>)
    2264:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2266:	4b19      	ldr	r3, [pc, #100]	; (22cc <system_gclk_gen_get_hz+0x78>)
    2268:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    226a:	4a16      	ldr	r2, [pc, #88]	; (22c4 <system_gclk_gen_get_hz+0x70>)
    226c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    226e:	b25b      	sxtb	r3, r3
    2270:	2b00      	cmp	r3, #0
    2272:	dbfb      	blt.n	226c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2274:	4e13      	ldr	r6, [pc, #76]	; (22c4 <system_gclk_gen_get_hz+0x70>)
    2276:	6870      	ldr	r0, [r6, #4]
    2278:	04c0      	lsls	r0, r0, #19
    227a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    227c:	4b14      	ldr	r3, [pc, #80]	; (22d0 <system_gclk_gen_get_hz+0x7c>)
    227e:	4798      	blx	r3
    2280:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2282:	4b12      	ldr	r3, [pc, #72]	; (22cc <system_gclk_gen_get_hz+0x78>)
    2284:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2286:	6876      	ldr	r6, [r6, #4]
    2288:	02f6      	lsls	r6, r6, #11
    228a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    228c:	4b11      	ldr	r3, [pc, #68]	; (22d4 <system_gclk_gen_get_hz+0x80>)
    228e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2290:	4a0c      	ldr	r2, [pc, #48]	; (22c4 <system_gclk_gen_get_hz+0x70>)
    2292:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2294:	b25b      	sxtb	r3, r3
    2296:	2b00      	cmp	r3, #0
    2298:	dbfb      	blt.n	2292 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    229a:	4b0a      	ldr	r3, [pc, #40]	; (22c4 <system_gclk_gen_get_hz+0x70>)
    229c:	689c      	ldr	r4, [r3, #8]
    229e:	0224      	lsls	r4, r4, #8
    22a0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    22a2:	4b0d      	ldr	r3, [pc, #52]	; (22d8 <system_gclk_gen_get_hz+0x84>)
    22a4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    22a6:	2e00      	cmp	r6, #0
    22a8:	d107      	bne.n	22ba <system_gclk_gen_get_hz+0x66>
    22aa:	2c01      	cmp	r4, #1
    22ac:	d907      	bls.n	22be <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    22ae:	0021      	movs	r1, r4
    22b0:	0028      	movs	r0, r5
    22b2:	4b0a      	ldr	r3, [pc, #40]	; (22dc <system_gclk_gen_get_hz+0x88>)
    22b4:	4798      	blx	r3
    22b6:	0005      	movs	r5, r0
    22b8:	e001      	b.n	22be <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    22ba:	3401      	adds	r4, #1
    22bc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    22be:	0028      	movs	r0, r5
    22c0:	bd70      	pop	{r4, r5, r6, pc}
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	40000c00 	.word	0x40000c00
    22c8:	00001c59 	.word	0x00001c59
    22cc:	40000c04 	.word	0x40000c04
    22d0:	00001d25 	.word	0x00001d25
    22d4:	40000c08 	.word	0x40000c08
    22d8:	00001c99 	.word	0x00001c99
    22dc:	0000329d 	.word	0x0000329d

000022e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    22e0:	b510      	push	{r4, lr}
    22e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    22e4:	4b06      	ldr	r3, [pc, #24]	; (2300 <system_gclk_chan_enable+0x20>)
    22e6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    22e8:	4b06      	ldr	r3, [pc, #24]	; (2304 <system_gclk_chan_enable+0x24>)
    22ea:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    22ec:	4a06      	ldr	r2, [pc, #24]	; (2308 <system_gclk_chan_enable+0x28>)
    22ee:	8853      	ldrh	r3, [r2, #2]
    22f0:	2180      	movs	r1, #128	; 0x80
    22f2:	01c9      	lsls	r1, r1, #7
    22f4:	430b      	orrs	r3, r1
    22f6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    22f8:	4b04      	ldr	r3, [pc, #16]	; (230c <system_gclk_chan_enable+0x2c>)
    22fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    22fc:	bd10      	pop	{r4, pc}
    22fe:	46c0      	nop			; (mov r8, r8)
    2300:	00001c59 	.word	0x00001c59
    2304:	40000c02 	.word	0x40000c02
    2308:	40000c00 	.word	0x40000c00
    230c:	00001c99 	.word	0x00001c99

00002310 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2310:	b510      	push	{r4, lr}
    2312:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2314:	4b0f      	ldr	r3, [pc, #60]	; (2354 <system_gclk_chan_disable+0x44>)
    2316:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2318:	4b0f      	ldr	r3, [pc, #60]	; (2358 <system_gclk_chan_disable+0x48>)
    231a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    231c:	4a0f      	ldr	r2, [pc, #60]	; (235c <system_gclk_chan_disable+0x4c>)
    231e:	8853      	ldrh	r3, [r2, #2]
    2320:	051b      	lsls	r3, r3, #20
    2322:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2324:	8853      	ldrh	r3, [r2, #2]
    2326:	490e      	ldr	r1, [pc, #56]	; (2360 <system_gclk_chan_disable+0x50>)
    2328:	400b      	ands	r3, r1
    232a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    232c:	8853      	ldrh	r3, [r2, #2]
    232e:	490d      	ldr	r1, [pc, #52]	; (2364 <system_gclk_chan_disable+0x54>)
    2330:	400b      	ands	r3, r1
    2332:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2334:	0011      	movs	r1, r2
    2336:	2280      	movs	r2, #128	; 0x80
    2338:	01d2      	lsls	r2, r2, #7
    233a:	884b      	ldrh	r3, [r1, #2]
    233c:	4213      	tst	r3, r2
    233e:	d1fc      	bne.n	233a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2340:	4906      	ldr	r1, [pc, #24]	; (235c <system_gclk_chan_disable+0x4c>)
    2342:	884a      	ldrh	r2, [r1, #2]
    2344:	0203      	lsls	r3, r0, #8
    2346:	4806      	ldr	r0, [pc, #24]	; (2360 <system_gclk_chan_disable+0x50>)
    2348:	4002      	ands	r2, r0
    234a:	4313      	orrs	r3, r2
    234c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    234e:	4b06      	ldr	r3, [pc, #24]	; (2368 <system_gclk_chan_disable+0x58>)
    2350:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2352:	bd10      	pop	{r4, pc}
    2354:	00001c59 	.word	0x00001c59
    2358:	40000c02 	.word	0x40000c02
    235c:	40000c00 	.word	0x40000c00
    2360:	fffff0ff 	.word	0xfffff0ff
    2364:	ffffbfff 	.word	0xffffbfff
    2368:	00001c99 	.word	0x00001c99

0000236c <system_gclk_chan_set_config>:
{
    236c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    236e:	780c      	ldrb	r4, [r1, #0]
    2370:	0224      	lsls	r4, r4, #8
    2372:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2374:	4b02      	ldr	r3, [pc, #8]	; (2380 <system_gclk_chan_set_config+0x14>)
    2376:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2378:	b2a4      	uxth	r4, r4
    237a:	4b02      	ldr	r3, [pc, #8]	; (2384 <system_gclk_chan_set_config+0x18>)
    237c:	805c      	strh	r4, [r3, #2]
}
    237e:	bd10      	pop	{r4, pc}
    2380:	00002311 	.word	0x00002311
    2384:	40000c00 	.word	0x40000c00

00002388 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2388:	b510      	push	{r4, lr}
    238a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    238c:	4b06      	ldr	r3, [pc, #24]	; (23a8 <system_gclk_chan_get_hz+0x20>)
    238e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2390:	4b06      	ldr	r3, [pc, #24]	; (23ac <system_gclk_chan_get_hz+0x24>)
    2392:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2394:	4b06      	ldr	r3, [pc, #24]	; (23b0 <system_gclk_chan_get_hz+0x28>)
    2396:	885c      	ldrh	r4, [r3, #2]
    2398:	0524      	lsls	r4, r4, #20
    239a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    239c:	4b05      	ldr	r3, [pc, #20]	; (23b4 <system_gclk_chan_get_hz+0x2c>)
    239e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    23a0:	0020      	movs	r0, r4
    23a2:	4b05      	ldr	r3, [pc, #20]	; (23b8 <system_gclk_chan_get_hz+0x30>)
    23a4:	4798      	blx	r3
}
    23a6:	bd10      	pop	{r4, pc}
    23a8:	00001c59 	.word	0x00001c59
    23ac:	40000c02 	.word	0x40000c02
    23b0:	40000c00 	.word	0x40000c00
    23b4:	00001c99 	.word	0x00001c99
    23b8:	00002255 	.word	0x00002255

000023bc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    23bc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    23be:	78d3      	ldrb	r3, [r2, #3]
    23c0:	2b00      	cmp	r3, #0
    23c2:	d135      	bne.n	2430 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    23c4:	7813      	ldrb	r3, [r2, #0]
    23c6:	2b80      	cmp	r3, #128	; 0x80
    23c8:	d029      	beq.n	241e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    23ca:	061b      	lsls	r3, r3, #24
    23cc:	2480      	movs	r4, #128	; 0x80
    23ce:	0264      	lsls	r4, r4, #9
    23d0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    23d2:	7854      	ldrb	r4, [r2, #1]
    23d4:	2502      	movs	r5, #2
    23d6:	43ac      	bics	r4, r5
    23d8:	d106      	bne.n	23e8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    23da:	7894      	ldrb	r4, [r2, #2]
    23dc:	2c00      	cmp	r4, #0
    23de:	d120      	bne.n	2422 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    23e0:	2480      	movs	r4, #128	; 0x80
    23e2:	02a4      	lsls	r4, r4, #10
    23e4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    23e6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    23e8:	7854      	ldrb	r4, [r2, #1]
    23ea:	3c01      	subs	r4, #1
    23ec:	2c01      	cmp	r4, #1
    23ee:	d91c      	bls.n	242a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    23f0:	040d      	lsls	r5, r1, #16
    23f2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    23f4:	24a0      	movs	r4, #160	; 0xa0
    23f6:	05e4      	lsls	r4, r4, #23
    23f8:	432c      	orrs	r4, r5
    23fa:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    23fc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    23fe:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2400:	24d0      	movs	r4, #208	; 0xd0
    2402:	0624      	lsls	r4, r4, #24
    2404:	432c      	orrs	r4, r5
    2406:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2408:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    240a:	78d4      	ldrb	r4, [r2, #3]
    240c:	2c00      	cmp	r4, #0
    240e:	d122      	bne.n	2456 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2410:	035b      	lsls	r3, r3, #13
    2412:	d51c      	bpl.n	244e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2414:	7893      	ldrb	r3, [r2, #2]
    2416:	2b01      	cmp	r3, #1
    2418:	d01e      	beq.n	2458 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    241a:	6141      	str	r1, [r0, #20]
    241c:	e017      	b.n	244e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    241e:	2300      	movs	r3, #0
    2420:	e7d7      	b.n	23d2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2422:	24c0      	movs	r4, #192	; 0xc0
    2424:	02e4      	lsls	r4, r4, #11
    2426:	4323      	orrs	r3, r4
    2428:	e7dd      	b.n	23e6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    242a:	4c0d      	ldr	r4, [pc, #52]	; (2460 <_system_pinmux_config+0xa4>)
    242c:	4023      	ands	r3, r4
    242e:	e7df      	b.n	23f0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2430:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2432:	040c      	lsls	r4, r1, #16
    2434:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2436:	23a0      	movs	r3, #160	; 0xa0
    2438:	05db      	lsls	r3, r3, #23
    243a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    243c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    243e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2440:	23d0      	movs	r3, #208	; 0xd0
    2442:	061b      	lsls	r3, r3, #24
    2444:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2446:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2448:	78d3      	ldrb	r3, [r2, #3]
    244a:	2b00      	cmp	r3, #0
    244c:	d103      	bne.n	2456 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    244e:	7853      	ldrb	r3, [r2, #1]
    2450:	3b01      	subs	r3, #1
    2452:	2b01      	cmp	r3, #1
    2454:	d902      	bls.n	245c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2456:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2458:	6181      	str	r1, [r0, #24]
    245a:	e7f8      	b.n	244e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    245c:	6081      	str	r1, [r0, #8]
}
    245e:	e7fa      	b.n	2456 <_system_pinmux_config+0x9a>
    2460:	fffbffff 	.word	0xfffbffff

00002464 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2464:	b510      	push	{r4, lr}
    2466:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2468:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    246a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    246c:	2900      	cmp	r1, #0
    246e:	d104      	bne.n	247a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2470:	0943      	lsrs	r3, r0, #5
    2472:	01db      	lsls	r3, r3, #7
    2474:	4905      	ldr	r1, [pc, #20]	; (248c <system_pinmux_pin_set_config+0x28>)
    2476:	468c      	mov	ip, r1
    2478:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    247a:	241f      	movs	r4, #31
    247c:	4020      	ands	r0, r4
    247e:	2101      	movs	r1, #1
    2480:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2482:	0018      	movs	r0, r3
    2484:	4b02      	ldr	r3, [pc, #8]	; (2490 <system_pinmux_pin_set_config+0x2c>)
    2486:	4798      	blx	r3
}
    2488:	bd10      	pop	{r4, pc}
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	41004400 	.word	0x41004400
    2490:	000023bd 	.word	0x000023bd

00002494 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2494:	4770      	bx	lr
	...

00002498 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2498:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    249a:	4b05      	ldr	r3, [pc, #20]	; (24b0 <system_init+0x18>)
    249c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    249e:	4b05      	ldr	r3, [pc, #20]	; (24b4 <system_init+0x1c>)
    24a0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    24a2:	4b05      	ldr	r3, [pc, #20]	; (24b8 <system_init+0x20>)
    24a4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    24a6:	4b05      	ldr	r3, [pc, #20]	; (24bc <system_init+0x24>)
    24a8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    24aa:	4b05      	ldr	r3, [pc, #20]	; (24c0 <system_init+0x28>)
    24ac:	4798      	blx	r3
}
    24ae:	bd10      	pop	{r4, pc}
    24b0:	00001fd5 	.word	0x00001fd5
    24b4:	00001cc9 	.word	0x00001cc9
    24b8:	00002495 	.word	0x00002495
    24bc:	00002495 	.word	0x00002495
    24c0:	00002495 	.word	0x00002495

000024c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    24c4:	e7fe      	b.n	24c4 <Dummy_Handler>
	...

000024c8 <Reset_Handler>:
{
    24c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    24ca:	4a2a      	ldr	r2, [pc, #168]	; (2574 <Reset_Handler+0xac>)
    24cc:	4b2a      	ldr	r3, [pc, #168]	; (2578 <Reset_Handler+0xb0>)
    24ce:	429a      	cmp	r2, r3
    24d0:	d011      	beq.n	24f6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    24d2:	001a      	movs	r2, r3
    24d4:	4b29      	ldr	r3, [pc, #164]	; (257c <Reset_Handler+0xb4>)
    24d6:	429a      	cmp	r2, r3
    24d8:	d20d      	bcs.n	24f6 <Reset_Handler+0x2e>
    24da:	4a29      	ldr	r2, [pc, #164]	; (2580 <Reset_Handler+0xb8>)
    24dc:	3303      	adds	r3, #3
    24de:	1a9b      	subs	r3, r3, r2
    24e0:	089b      	lsrs	r3, r3, #2
    24e2:	3301      	adds	r3, #1
    24e4:	009b      	lsls	r3, r3, #2
    24e6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    24e8:	4823      	ldr	r0, [pc, #140]	; (2578 <Reset_Handler+0xb0>)
    24ea:	4922      	ldr	r1, [pc, #136]	; (2574 <Reset_Handler+0xac>)
    24ec:	588c      	ldr	r4, [r1, r2]
    24ee:	5084      	str	r4, [r0, r2]
    24f0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    24f2:	429a      	cmp	r2, r3
    24f4:	d1fa      	bne.n	24ec <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    24f6:	4a23      	ldr	r2, [pc, #140]	; (2584 <Reset_Handler+0xbc>)
    24f8:	4b23      	ldr	r3, [pc, #140]	; (2588 <Reset_Handler+0xc0>)
    24fa:	429a      	cmp	r2, r3
    24fc:	d20a      	bcs.n	2514 <Reset_Handler+0x4c>
    24fe:	43d3      	mvns	r3, r2
    2500:	4921      	ldr	r1, [pc, #132]	; (2588 <Reset_Handler+0xc0>)
    2502:	185b      	adds	r3, r3, r1
    2504:	2103      	movs	r1, #3
    2506:	438b      	bics	r3, r1
    2508:	3304      	adds	r3, #4
    250a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    250c:	2100      	movs	r1, #0
    250e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2510:	4293      	cmp	r3, r2
    2512:	d1fc      	bne.n	250e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2514:	4a1d      	ldr	r2, [pc, #116]	; (258c <Reset_Handler+0xc4>)
    2516:	21ff      	movs	r1, #255	; 0xff
    2518:	4b1d      	ldr	r3, [pc, #116]	; (2590 <Reset_Handler+0xc8>)
    251a:	438b      	bics	r3, r1
    251c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    251e:	39fd      	subs	r1, #253	; 0xfd
    2520:	2390      	movs	r3, #144	; 0x90
    2522:	005b      	lsls	r3, r3, #1
    2524:	4a1b      	ldr	r2, [pc, #108]	; (2594 <Reset_Handler+0xcc>)
    2526:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2528:	4a1b      	ldr	r2, [pc, #108]	; (2598 <Reset_Handler+0xd0>)
    252a:	78d3      	ldrb	r3, [r2, #3]
    252c:	2503      	movs	r5, #3
    252e:	43ab      	bics	r3, r5
    2530:	2402      	movs	r4, #2
    2532:	4323      	orrs	r3, r4
    2534:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2536:	78d3      	ldrb	r3, [r2, #3]
    2538:	270c      	movs	r7, #12
    253a:	43bb      	bics	r3, r7
    253c:	2608      	movs	r6, #8
    253e:	4333      	orrs	r3, r6
    2540:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2542:	4b16      	ldr	r3, [pc, #88]	; (259c <Reset_Handler+0xd4>)
    2544:	7b98      	ldrb	r0, [r3, #14]
    2546:	2230      	movs	r2, #48	; 0x30
    2548:	4390      	bics	r0, r2
    254a:	2220      	movs	r2, #32
    254c:	4310      	orrs	r0, r2
    254e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2550:	7b99      	ldrb	r1, [r3, #14]
    2552:	43b9      	bics	r1, r7
    2554:	4331      	orrs	r1, r6
    2556:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2558:	7b9a      	ldrb	r2, [r3, #14]
    255a:	43aa      	bics	r2, r5
    255c:	4322      	orrs	r2, r4
    255e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2560:	4a0f      	ldr	r2, [pc, #60]	; (25a0 <Reset_Handler+0xd8>)
    2562:	6853      	ldr	r3, [r2, #4]
    2564:	2180      	movs	r1, #128	; 0x80
    2566:	430b      	orrs	r3, r1
    2568:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    256a:	4b0e      	ldr	r3, [pc, #56]	; (25a4 <Reset_Handler+0xdc>)
    256c:	4798      	blx	r3
        main();
    256e:	4b0e      	ldr	r3, [pc, #56]	; (25a8 <Reset_Handler+0xe0>)
    2570:	4798      	blx	r3
    2572:	e7fe      	b.n	2572 <Reset_Handler+0xaa>
    2574:	00005390 	.word	0x00005390
    2578:	20000000 	.word	0x20000000
    257c:	20000074 	.word	0x20000074
    2580:	20000004 	.word	0x20000004
    2584:	20000074 	.word	0x20000074
    2588:	20000208 	.word	0x20000208
    258c:	e000ed00 	.word	0xe000ed00
    2590:	00000000 	.word	0x00000000
    2594:	41007000 	.word	0x41007000
    2598:	41005000 	.word	0x41005000
    259c:	41004800 	.word	0x41004800
    25a0:	41004000 	.word	0x41004000
    25a4:	00002771 	.word	0x00002771
    25a8:	00002615 	.word	0x00002615

000025ac <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    25ac:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    25ae:	4a06      	ldr	r2, [pc, #24]	; (25c8 <_sbrk+0x1c>)
    25b0:	6812      	ldr	r2, [r2, #0]
    25b2:	2a00      	cmp	r2, #0
    25b4:	d004      	beq.n	25c0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    25b6:	4a04      	ldr	r2, [pc, #16]	; (25c8 <_sbrk+0x1c>)
    25b8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    25ba:	18c3      	adds	r3, r0, r3
    25bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    25be:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    25c0:	4902      	ldr	r1, [pc, #8]	; (25cc <_sbrk+0x20>)
    25c2:	4a01      	ldr	r2, [pc, #4]	; (25c8 <_sbrk+0x1c>)
    25c4:	6011      	str	r1, [r2, #0]
    25c6:	e7f6      	b.n	25b6 <_sbrk+0xa>
    25c8:	20000100 	.word	0x20000100
    25cc:	20002208 	.word	0x20002208

000025d0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    25d0:	2001      	movs	r0, #1
    25d2:	4240      	negs	r0, r0
    25d4:	4770      	bx	lr

000025d6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    25d6:	2380      	movs	r3, #128	; 0x80
    25d8:	019b      	lsls	r3, r3, #6
    25da:	604b      	str	r3, [r1, #4]

	return 0;
}
    25dc:	2000      	movs	r0, #0
    25de:	4770      	bx	lr

000025e0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    25e0:	2001      	movs	r0, #1
    25e2:	4770      	bx	lr

000025e4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    25e4:	2000      	movs	r0, #0
    25e6:	4770      	bx	lr

000025e8 <tcc_callback>:
FIR_Filter LowPass_z;

static void i2c_set_config(void);
static void configure_tcc(void);

static void tcc_callback(struct tcc_module *const module_inst){
    25e8:	b510      	push	{r4, lr}
		
		/*Get Data from accelerometer sensor*/
		ADXL345_get_data(&acc_sensor);	
    25ea:	4c05      	ldr	r4, [pc, #20]	; (2600 <tcc_callback+0x18>)
    25ec:	0020      	movs	r0, r4
    25ee:	4b05      	ldr	r3, [pc, #20]	; (2604 <tcc_callback+0x1c>)
    25f0:	4798      	blx	r3
		
		/*update FIR filter*/
		filt_acc[2] = FIR_update(&LowPass_z, acc_sensor.acc_mps[2]);
    25f2:	6921      	ldr	r1, [r4, #16]
    25f4:	4804      	ldr	r0, [pc, #16]	; (2608 <tcc_callback+0x20>)
    25f6:	4b05      	ldr	r3, [pc, #20]	; (260c <tcc_callback+0x24>)
    25f8:	4798      	blx	r3
    25fa:	4b05      	ldr	r3, [pc, #20]	; (2610 <tcc_callback+0x28>)
    25fc:	6098      	str	r0, [r3, #8]
		//int decc = (int)((z - intpp)*10);
		//
		//int intp = (int)acc_sensor.acc_mps[2];
		//int dec = (int)((acc_sensor.acc_mps[2] - intp)*10);
		//printf("%d.%d   ---  %d.%d\r\n",intp,dec,intpp,decc);
}
    25fe:	bd10      	pop	{r4, pc}
    2600:	20000148 	.word	0x20000148
    2604:	000001e5 	.word	0x000001e5
    2608:	200001bc 	.word	0x200001bc
    260c:	00001a7d 	.word	0x00001a7d
    2610:	20000104 	.word	0x20000104

00002614 <main>:
 
int main (void)
{
    2614:	b570      	push	{r4, r5, r6, lr}
    2616:	b0aa      	sub	sp, #168	; 0xa8
	system_init();
    2618:	4b3d      	ldr	r3, [pc, #244]	; (2710 <main+0xfc>)
    261a:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */

	/* Configure USART console for printf debugging*/
	configure_console();
    261c:	4b3d      	ldr	r3, [pc, #244]	; (2714 <main+0x100>)
    261e:	4798      	blx	r3
	printf(" Debugging Check\r\n");
    2620:	483d      	ldr	r0, [pc, #244]	; (2718 <main+0x104>)
    2622:	4b3e      	ldr	r3, [pc, #248]	; (271c <main+0x108>)
    2624:	4798      	blx	r3
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2626:	aa01      	add	r2, sp, #4
    2628:	2364      	movs	r3, #100	; 0x64
    262a:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    262c:	4b3c      	ldr	r3, [pc, #240]	; (2720 <main+0x10c>)
    262e:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2630:	2300      	movs	r3, #0
    2632:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2634:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    2636:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2638:	2180      	movs	r1, #128	; 0x80
    263a:	0389      	lsls	r1, r1, #14
    263c:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    263e:	2101      	movs	r1, #1
    2640:	4249      	negs	r1, r1
    2642:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    2644:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2646:	3125      	adds	r1, #37	; 0x25
    2648:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    264a:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    264c:	3108      	adds	r1, #8
    264e:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2650:	3101      	adds	r1, #1
    2652:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    2654:	3101      	adds	r1, #1
    2656:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2658:	33d7      	adds	r3, #215	; 0xd7
    265a:	8613      	strh	r3, [r2, #48]	; 0x30
	
	/*set default values for the structure*/
	i2c_master_get_config_defaults(&i2c_config);
	
	/* define the pins for sercom*/
	i2c_config.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0; //SDA
    265c:	4b31      	ldr	r3, [pc, #196]	; (2724 <main+0x110>)
    265e:	61d3      	str	r3, [r2, #28]
	i2c_config.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1; //SCL
    2660:	4b31      	ldr	r3, [pc, #196]	; (2728 <main+0x114>)
    2662:	6213      	str	r3, [r2, #32]
	
	/*write the configuration to master module*/
	status_check = i2c_master_init(&i2c_master,SERCOM0,&i2c_config);
    2664:	4931      	ldr	r1, [pc, #196]	; (272c <main+0x118>)
    2666:	4832      	ldr	r0, [pc, #200]	; (2730 <main+0x11c>)
    2668:	4b32      	ldr	r3, [pc, #200]	; (2734 <main+0x120>)
    266a:	4798      	blx	r3
	if( status_check != STATUS_OK){
    266c:	2800      	cmp	r0, #0
    266e:	d004      	beq.n	267a <main+0x66>
		while(1){
			printf("Could not initialize i2c\n");
    2670:	4d31      	ldr	r5, [pc, #196]	; (2738 <main+0x124>)
    2672:	4c2a      	ldr	r4, [pc, #168]	; (271c <main+0x108>)
    2674:	0028      	movs	r0, r5
    2676:	47a0      	blx	r4
    2678:	e7fc      	b.n	2674 <main+0x60>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    267a:	4b2d      	ldr	r3, [pc, #180]	; (2730 <main+0x11c>)
    267c:	681b      	ldr	r3, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    267e:	2207      	movs	r2, #7
    2680:	69d9      	ldr	r1, [r3, #28]
	while (i2c_master_is_syncing(module)) {
    2682:	420a      	tst	r2, r1
    2684:	d1fc      	bne.n	2680 <main+0x6c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2686:	681a      	ldr	r2, [r3, #0]
    2688:	2102      	movs	r1, #2
    268a:	430a      	orrs	r2, r1
    268c:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    268e:	4a28      	ldr	r2, [pc, #160]	; (2730 <main+0x11c>)
    2690:	88d0      	ldrh	r0, [r2, #6]
	uint32_t timeout_counter = 0;
    2692:	2200      	movs	r2, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2694:	310e      	adds	r1, #14
    2696:	e002      	b.n	269e <main+0x8a>
		timeout_counter++;
    2698:	3201      	adds	r2, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    269a:	4282      	cmp	r2, r0
    269c:	d203      	bcs.n	26a6 <main+0x92>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    269e:	8b5c      	ldrh	r4, [r3, #26]
    26a0:	420c      	tst	r4, r1
    26a2:	d0f9      	beq.n	2698 <main+0x84>
    26a4:	e001      	b.n	26aa <main+0x96>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    26a6:	2210      	movs	r2, #16
    26a8:	835a      	strh	r2, [r3, #26]
}

static void configure_tcc(void){
	
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    26aa:	4e24      	ldr	r6, [pc, #144]	; (273c <main+0x128>)
    26ac:	ac01      	add	r4, sp, #4
    26ae:	0031      	movs	r1, r6
    26b0:	0020      	movs	r0, r4
    26b2:	4b23      	ldr	r3, [pc, #140]	; (2740 <main+0x12c>)
    26b4:	4798      	blx	r3
	config_tcc.counter.clock_source = GCLK_GENERATOR_1;
    26b6:	2301      	movs	r3, #1
    26b8:	72a3      	strb	r3, [r4, #10]
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    26ba:	3304      	adds	r3, #4
    26bc:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = 5;
    26be:	6063      	str	r3, [r4, #4]
	tcc_init(&tcc_instance, TCC0, &config_tcc);
    26c0:	4d20      	ldr	r5, [pc, #128]	; (2744 <main+0x130>)
    26c2:	0022      	movs	r2, r4
    26c4:	0031      	movs	r1, r6
    26c6:	0028      	movs	r0, r5
    26c8:	4b1f      	ldr	r3, [pc, #124]	; (2748 <main+0x134>)
    26ca:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    26cc:	682b      	ldr	r3, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    26ce:	2202      	movs	r2, #2
    26d0:	6899      	ldr	r1, [r3, #8]
    26d2:	420a      	tst	r2, r1
    26d4:	d1fc      	bne.n	26d0 <main+0xbc>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    26d6:	681a      	ldr	r2, [r3, #0]
    26d8:	2102      	movs	r1, #2
    26da:	430a      	orrs	r2, r1
    26dc:	601a      	str	r2, [r3, #0]
	tcc_register_callback(&tcc_instance, tcc_callback,TCC_CALLBACK_OVERFLOW);
    26de:	4c19      	ldr	r4, [pc, #100]	; (2744 <main+0x130>)
    26e0:	2200      	movs	r2, #0
    26e2:	491a      	ldr	r1, [pc, #104]	; (274c <main+0x138>)
    26e4:	0020      	movs	r0, r4
    26e6:	4b1a      	ldr	r3, [pc, #104]	; (2750 <main+0x13c>)
    26e8:	4798      	blx	r3
	tcc_enable_callback(&tcc_instance, TCC_CALLBACK_OVERFLOW);
    26ea:	2100      	movs	r1, #0
    26ec:	0020      	movs	r0, r4
    26ee:	4b19      	ldr	r3, [pc, #100]	; (2754 <main+0x140>)
    26f0:	4798      	blx	r3
	uint8_t err = ADXL345_init(&acc_sensor, &i2c_master, &data_packet);
    26f2:	4a19      	ldr	r2, [pc, #100]	; (2758 <main+0x144>)
    26f4:	490e      	ldr	r1, [pc, #56]	; (2730 <main+0x11c>)
    26f6:	4819      	ldr	r0, [pc, #100]	; (275c <main+0x148>)
    26f8:	4b19      	ldr	r3, [pc, #100]	; (2760 <main+0x14c>)
    26fa:	4798      	blx	r3
	if(err == 0){
    26fc:	2800      	cmp	r0, #0
    26fe:	d102      	bne.n	2706 <main+0xf2>
		printf(" Successfully Initialized Accelerometer ADXL345 \r\n");
    2700:	4818      	ldr	r0, [pc, #96]	; (2764 <main+0x150>)
    2702:	4b06      	ldr	r3, [pc, #24]	; (271c <main+0x108>)
    2704:	4798      	blx	r3
	FIR_filter_init(&LowPass_z);
    2706:	4818      	ldr	r0, [pc, #96]	; (2768 <main+0x154>)
    2708:	4b18      	ldr	r3, [pc, #96]	; (276c <main+0x158>)
    270a:	4798      	blx	r3
    270c:	e7fe      	b.n	270c <main+0xf8>
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	00002499 	.word	0x00002499
    2714:	00001b65 	.word	0x00001b65
    2718:	00005220 	.word	0x00005220
    271c:	00002889 	.word	0x00002889
    2720:	00000d48 	.word	0x00000d48
    2724:	00080002 	.word	0x00080002
    2728:	00090002 	.word	0x00090002
    272c:	42000800 	.word	0x42000800
    2730:	200001b0 	.word	0x200001b0
    2734:	000003b5 	.word	0x000003b5
    2738:	00005234 	.word	0x00005234
    273c:	42002000 	.word	0x42002000
    2740:	000009fd 	.word	0x000009fd
    2744:	20000170 	.word	0x20000170
    2748:	00000b49 	.word	0x00000b49
    274c:	000025e9 	.word	0x000025e9
    2750:	00000f55 	.word	0x00000f55
    2754:	00000f6d 	.word	0x00000f6d
    2758:	20000164 	.word	0x20000164
    275c:	20000148 	.word	0x20000148
    2760:	00000319 	.word	0x00000319
    2764:	00005250 	.word	0x00005250
    2768:	200001bc 	.word	0x200001bc
    276c:	00001a61 	.word	0x00001a61

00002770 <__libc_init_array>:
    2770:	b570      	push	{r4, r5, r6, lr}
    2772:	2600      	movs	r6, #0
    2774:	4d0c      	ldr	r5, [pc, #48]	; (27a8 <__libc_init_array+0x38>)
    2776:	4c0d      	ldr	r4, [pc, #52]	; (27ac <__libc_init_array+0x3c>)
    2778:	1b64      	subs	r4, r4, r5
    277a:	10a4      	asrs	r4, r4, #2
    277c:	42a6      	cmp	r6, r4
    277e:	d109      	bne.n	2794 <__libc_init_array+0x24>
    2780:	2600      	movs	r6, #0
    2782:	f002 fdf1 	bl	5368 <_init>
    2786:	4d0a      	ldr	r5, [pc, #40]	; (27b0 <__libc_init_array+0x40>)
    2788:	4c0a      	ldr	r4, [pc, #40]	; (27b4 <__libc_init_array+0x44>)
    278a:	1b64      	subs	r4, r4, r5
    278c:	10a4      	asrs	r4, r4, #2
    278e:	42a6      	cmp	r6, r4
    2790:	d105      	bne.n	279e <__libc_init_array+0x2e>
    2792:	bd70      	pop	{r4, r5, r6, pc}
    2794:	00b3      	lsls	r3, r6, #2
    2796:	58eb      	ldr	r3, [r5, r3]
    2798:	4798      	blx	r3
    279a:	3601      	adds	r6, #1
    279c:	e7ee      	b.n	277c <__libc_init_array+0xc>
    279e:	00b3      	lsls	r3, r6, #2
    27a0:	58eb      	ldr	r3, [r5, r3]
    27a2:	4798      	blx	r3
    27a4:	3601      	adds	r6, #1
    27a6:	e7f2      	b.n	278e <__libc_init_array+0x1e>
    27a8:	00005374 	.word	0x00005374
    27ac:	00005374 	.word	0x00005374
    27b0:	00005374 	.word	0x00005374
    27b4:	00005378 	.word	0x00005378

000027b8 <memset>:
    27b8:	0003      	movs	r3, r0
    27ba:	1882      	adds	r2, r0, r2
    27bc:	4293      	cmp	r3, r2
    27be:	d100      	bne.n	27c2 <memset+0xa>
    27c0:	4770      	bx	lr
    27c2:	7019      	strb	r1, [r3, #0]
    27c4:	3301      	adds	r3, #1
    27c6:	e7f9      	b.n	27bc <memset+0x4>

000027c8 <_puts_r>:
    27c8:	b570      	push	{r4, r5, r6, lr}
    27ca:	0005      	movs	r5, r0
    27cc:	000e      	movs	r6, r1
    27ce:	2800      	cmp	r0, #0
    27d0:	d004      	beq.n	27dc <_puts_r+0x14>
    27d2:	6983      	ldr	r3, [r0, #24]
    27d4:	2b00      	cmp	r3, #0
    27d6:	d101      	bne.n	27dc <_puts_r+0x14>
    27d8:	f000 fada 	bl	2d90 <__sinit>
    27dc:	69ab      	ldr	r3, [r5, #24]
    27de:	68ac      	ldr	r4, [r5, #8]
    27e0:	2b00      	cmp	r3, #0
    27e2:	d102      	bne.n	27ea <_puts_r+0x22>
    27e4:	0028      	movs	r0, r5
    27e6:	f000 fad3 	bl	2d90 <__sinit>
    27ea:	4b24      	ldr	r3, [pc, #144]	; (287c <_puts_r+0xb4>)
    27ec:	429c      	cmp	r4, r3
    27ee:	d10f      	bne.n	2810 <_puts_r+0x48>
    27f0:	686c      	ldr	r4, [r5, #4]
    27f2:	89a3      	ldrh	r3, [r4, #12]
    27f4:	071b      	lsls	r3, r3, #28
    27f6:	d502      	bpl.n	27fe <_puts_r+0x36>
    27f8:	6923      	ldr	r3, [r4, #16]
    27fa:	2b00      	cmp	r3, #0
    27fc:	d120      	bne.n	2840 <_puts_r+0x78>
    27fe:	0021      	movs	r1, r4
    2800:	0028      	movs	r0, r5
    2802:	f000 f957 	bl	2ab4 <__swsetup_r>
    2806:	2800      	cmp	r0, #0
    2808:	d01a      	beq.n	2840 <_puts_r+0x78>
    280a:	2001      	movs	r0, #1
    280c:	4240      	negs	r0, r0
    280e:	bd70      	pop	{r4, r5, r6, pc}
    2810:	4b1b      	ldr	r3, [pc, #108]	; (2880 <_puts_r+0xb8>)
    2812:	429c      	cmp	r4, r3
    2814:	d101      	bne.n	281a <_puts_r+0x52>
    2816:	68ac      	ldr	r4, [r5, #8]
    2818:	e7eb      	b.n	27f2 <_puts_r+0x2a>
    281a:	4b1a      	ldr	r3, [pc, #104]	; (2884 <_puts_r+0xbc>)
    281c:	429c      	cmp	r4, r3
    281e:	d1e8      	bne.n	27f2 <_puts_r+0x2a>
    2820:	68ec      	ldr	r4, [r5, #12]
    2822:	e7e6      	b.n	27f2 <_puts_r+0x2a>
    2824:	3b01      	subs	r3, #1
    2826:	3601      	adds	r6, #1
    2828:	60a3      	str	r3, [r4, #8]
    282a:	2b00      	cmp	r3, #0
    282c:	da04      	bge.n	2838 <_puts_r+0x70>
    282e:	69a2      	ldr	r2, [r4, #24]
    2830:	4293      	cmp	r3, r2
    2832:	db16      	blt.n	2862 <_puts_r+0x9a>
    2834:	290a      	cmp	r1, #10
    2836:	d014      	beq.n	2862 <_puts_r+0x9a>
    2838:	6823      	ldr	r3, [r4, #0]
    283a:	1c5a      	adds	r2, r3, #1
    283c:	6022      	str	r2, [r4, #0]
    283e:	7019      	strb	r1, [r3, #0]
    2840:	7831      	ldrb	r1, [r6, #0]
    2842:	68a3      	ldr	r3, [r4, #8]
    2844:	2900      	cmp	r1, #0
    2846:	d1ed      	bne.n	2824 <_puts_r+0x5c>
    2848:	3b01      	subs	r3, #1
    284a:	60a3      	str	r3, [r4, #8]
    284c:	2b00      	cmp	r3, #0
    284e:	da0f      	bge.n	2870 <_puts_r+0xa8>
    2850:	0022      	movs	r2, r4
    2852:	310a      	adds	r1, #10
    2854:	0028      	movs	r0, r5
    2856:	f000 f8d7 	bl	2a08 <__swbuf_r>
    285a:	1c43      	adds	r3, r0, #1
    285c:	d0d5      	beq.n	280a <_puts_r+0x42>
    285e:	200a      	movs	r0, #10
    2860:	e7d5      	b.n	280e <_puts_r+0x46>
    2862:	0022      	movs	r2, r4
    2864:	0028      	movs	r0, r5
    2866:	f000 f8cf 	bl	2a08 <__swbuf_r>
    286a:	1c43      	adds	r3, r0, #1
    286c:	d1e8      	bne.n	2840 <_puts_r+0x78>
    286e:	e7cc      	b.n	280a <_puts_r+0x42>
    2870:	200a      	movs	r0, #10
    2872:	6823      	ldr	r3, [r4, #0]
    2874:	1c5a      	adds	r2, r3, #1
    2876:	6022      	str	r2, [r4, #0]
    2878:	7018      	strb	r0, [r3, #0]
    287a:	e7c8      	b.n	280e <_puts_r+0x46>
    287c:	000052a8 	.word	0x000052a8
    2880:	000052c8 	.word	0x000052c8
    2884:	00005288 	.word	0x00005288

00002888 <puts>:
    2888:	b510      	push	{r4, lr}
    288a:	4b03      	ldr	r3, [pc, #12]	; (2898 <puts+0x10>)
    288c:	0001      	movs	r1, r0
    288e:	6818      	ldr	r0, [r3, #0]
    2890:	f7ff ff9a 	bl	27c8 <_puts_r>
    2894:	bd10      	pop	{r4, pc}
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	20000010 	.word	0x20000010

0000289c <setbuf>:
    289c:	424a      	negs	r2, r1
    289e:	414a      	adcs	r2, r1
    28a0:	2380      	movs	r3, #128	; 0x80
    28a2:	b510      	push	{r4, lr}
    28a4:	0052      	lsls	r2, r2, #1
    28a6:	00db      	lsls	r3, r3, #3
    28a8:	f000 f802 	bl	28b0 <setvbuf>
    28ac:	bd10      	pop	{r4, pc}
	...

000028b0 <setvbuf>:
    28b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b2:	001d      	movs	r5, r3
    28b4:	4b4f      	ldr	r3, [pc, #316]	; (29f4 <setvbuf+0x144>)
    28b6:	b085      	sub	sp, #20
    28b8:	681e      	ldr	r6, [r3, #0]
    28ba:	0004      	movs	r4, r0
    28bc:	000f      	movs	r7, r1
    28be:	9200      	str	r2, [sp, #0]
    28c0:	2e00      	cmp	r6, #0
    28c2:	d005      	beq.n	28d0 <setvbuf+0x20>
    28c4:	69b3      	ldr	r3, [r6, #24]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d102      	bne.n	28d0 <setvbuf+0x20>
    28ca:	0030      	movs	r0, r6
    28cc:	f000 fa60 	bl	2d90 <__sinit>
    28d0:	4b49      	ldr	r3, [pc, #292]	; (29f8 <setvbuf+0x148>)
    28d2:	429c      	cmp	r4, r3
    28d4:	d150      	bne.n	2978 <setvbuf+0xc8>
    28d6:	6874      	ldr	r4, [r6, #4]
    28d8:	9b00      	ldr	r3, [sp, #0]
    28da:	2b02      	cmp	r3, #2
    28dc:	d005      	beq.n	28ea <setvbuf+0x3a>
    28de:	2b01      	cmp	r3, #1
    28e0:	d900      	bls.n	28e4 <setvbuf+0x34>
    28e2:	e084      	b.n	29ee <setvbuf+0x13e>
    28e4:	2d00      	cmp	r5, #0
    28e6:	da00      	bge.n	28ea <setvbuf+0x3a>
    28e8:	e081      	b.n	29ee <setvbuf+0x13e>
    28ea:	0021      	movs	r1, r4
    28ec:	0030      	movs	r0, r6
    28ee:	f000 f9e1 	bl	2cb4 <_fflush_r>
    28f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    28f4:	2900      	cmp	r1, #0
    28f6:	d008      	beq.n	290a <setvbuf+0x5a>
    28f8:	0023      	movs	r3, r4
    28fa:	3344      	adds	r3, #68	; 0x44
    28fc:	4299      	cmp	r1, r3
    28fe:	d002      	beq.n	2906 <setvbuf+0x56>
    2900:	0030      	movs	r0, r6
    2902:	f000 fb51 	bl	2fa8 <_free_r>
    2906:	2300      	movs	r3, #0
    2908:	6363      	str	r3, [r4, #52]	; 0x34
    290a:	2300      	movs	r3, #0
    290c:	61a3      	str	r3, [r4, #24]
    290e:	6063      	str	r3, [r4, #4]
    2910:	89a3      	ldrh	r3, [r4, #12]
    2912:	061b      	lsls	r3, r3, #24
    2914:	d503      	bpl.n	291e <setvbuf+0x6e>
    2916:	6921      	ldr	r1, [r4, #16]
    2918:	0030      	movs	r0, r6
    291a:	f000 fb45 	bl	2fa8 <_free_r>
    291e:	89a3      	ldrh	r3, [r4, #12]
    2920:	4a36      	ldr	r2, [pc, #216]	; (29fc <setvbuf+0x14c>)
    2922:	4013      	ands	r3, r2
    2924:	81a3      	strh	r3, [r4, #12]
    2926:	9b00      	ldr	r3, [sp, #0]
    2928:	2b02      	cmp	r3, #2
    292a:	d05a      	beq.n	29e2 <setvbuf+0x132>
    292c:	ab03      	add	r3, sp, #12
    292e:	aa02      	add	r2, sp, #8
    2930:	0021      	movs	r1, r4
    2932:	0030      	movs	r0, r6
    2934:	f000 fac2 	bl	2ebc <__swhatbuf_r>
    2938:	89a3      	ldrh	r3, [r4, #12]
    293a:	4318      	orrs	r0, r3
    293c:	81a0      	strh	r0, [r4, #12]
    293e:	2d00      	cmp	r5, #0
    2940:	d124      	bne.n	298c <setvbuf+0xdc>
    2942:	9d02      	ldr	r5, [sp, #8]
    2944:	0028      	movs	r0, r5
    2946:	f000 fb25 	bl	2f94 <malloc>
    294a:	9501      	str	r5, [sp, #4]
    294c:	1e07      	subs	r7, r0, #0
    294e:	d142      	bne.n	29d6 <setvbuf+0x126>
    2950:	9b02      	ldr	r3, [sp, #8]
    2952:	9301      	str	r3, [sp, #4]
    2954:	42ab      	cmp	r3, r5
    2956:	d139      	bne.n	29cc <setvbuf+0x11c>
    2958:	2001      	movs	r0, #1
    295a:	4240      	negs	r0, r0
    295c:	2302      	movs	r3, #2
    295e:	89a2      	ldrh	r2, [r4, #12]
    2960:	4313      	orrs	r3, r2
    2962:	81a3      	strh	r3, [r4, #12]
    2964:	2300      	movs	r3, #0
    2966:	60a3      	str	r3, [r4, #8]
    2968:	0023      	movs	r3, r4
    296a:	3347      	adds	r3, #71	; 0x47
    296c:	6023      	str	r3, [r4, #0]
    296e:	6123      	str	r3, [r4, #16]
    2970:	2301      	movs	r3, #1
    2972:	6163      	str	r3, [r4, #20]
    2974:	b005      	add	sp, #20
    2976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2978:	4b21      	ldr	r3, [pc, #132]	; (2a00 <setvbuf+0x150>)
    297a:	429c      	cmp	r4, r3
    297c:	d101      	bne.n	2982 <setvbuf+0xd2>
    297e:	68b4      	ldr	r4, [r6, #8]
    2980:	e7aa      	b.n	28d8 <setvbuf+0x28>
    2982:	4b20      	ldr	r3, [pc, #128]	; (2a04 <setvbuf+0x154>)
    2984:	429c      	cmp	r4, r3
    2986:	d1a7      	bne.n	28d8 <setvbuf+0x28>
    2988:	68f4      	ldr	r4, [r6, #12]
    298a:	e7a5      	b.n	28d8 <setvbuf+0x28>
    298c:	2f00      	cmp	r7, #0
    298e:	d0d9      	beq.n	2944 <setvbuf+0x94>
    2990:	69b3      	ldr	r3, [r6, #24]
    2992:	2b00      	cmp	r3, #0
    2994:	d102      	bne.n	299c <setvbuf+0xec>
    2996:	0030      	movs	r0, r6
    2998:	f000 f9fa 	bl	2d90 <__sinit>
    299c:	9b00      	ldr	r3, [sp, #0]
    299e:	2b01      	cmp	r3, #1
    29a0:	d103      	bne.n	29aa <setvbuf+0xfa>
    29a2:	89a3      	ldrh	r3, [r4, #12]
    29a4:	9a00      	ldr	r2, [sp, #0]
    29a6:	431a      	orrs	r2, r3
    29a8:	81a2      	strh	r2, [r4, #12]
    29aa:	2008      	movs	r0, #8
    29ac:	89a3      	ldrh	r3, [r4, #12]
    29ae:	6027      	str	r7, [r4, #0]
    29b0:	6127      	str	r7, [r4, #16]
    29b2:	6165      	str	r5, [r4, #20]
    29b4:	4018      	ands	r0, r3
    29b6:	d018      	beq.n	29ea <setvbuf+0x13a>
    29b8:	2001      	movs	r0, #1
    29ba:	4018      	ands	r0, r3
    29bc:	2300      	movs	r3, #0
    29be:	4298      	cmp	r0, r3
    29c0:	d011      	beq.n	29e6 <setvbuf+0x136>
    29c2:	426d      	negs	r5, r5
    29c4:	60a3      	str	r3, [r4, #8]
    29c6:	61a5      	str	r5, [r4, #24]
    29c8:	0018      	movs	r0, r3
    29ca:	e7d3      	b.n	2974 <setvbuf+0xc4>
    29cc:	9801      	ldr	r0, [sp, #4]
    29ce:	f000 fae1 	bl	2f94 <malloc>
    29d2:	1e07      	subs	r7, r0, #0
    29d4:	d0c0      	beq.n	2958 <setvbuf+0xa8>
    29d6:	2380      	movs	r3, #128	; 0x80
    29d8:	89a2      	ldrh	r2, [r4, #12]
    29da:	9d01      	ldr	r5, [sp, #4]
    29dc:	4313      	orrs	r3, r2
    29de:	81a3      	strh	r3, [r4, #12]
    29e0:	e7d6      	b.n	2990 <setvbuf+0xe0>
    29e2:	2000      	movs	r0, #0
    29e4:	e7ba      	b.n	295c <setvbuf+0xac>
    29e6:	60a5      	str	r5, [r4, #8]
    29e8:	e7c4      	b.n	2974 <setvbuf+0xc4>
    29ea:	60a0      	str	r0, [r4, #8]
    29ec:	e7c2      	b.n	2974 <setvbuf+0xc4>
    29ee:	2001      	movs	r0, #1
    29f0:	4240      	negs	r0, r0
    29f2:	e7bf      	b.n	2974 <setvbuf+0xc4>
    29f4:	20000010 	.word	0x20000010
    29f8:	000052a8 	.word	0x000052a8
    29fc:	fffff35c 	.word	0xfffff35c
    2a00:	000052c8 	.word	0x000052c8
    2a04:	00005288 	.word	0x00005288

00002a08 <__swbuf_r>:
    2a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a0a:	0005      	movs	r5, r0
    2a0c:	000e      	movs	r6, r1
    2a0e:	0014      	movs	r4, r2
    2a10:	2800      	cmp	r0, #0
    2a12:	d004      	beq.n	2a1e <__swbuf_r+0x16>
    2a14:	6983      	ldr	r3, [r0, #24]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d101      	bne.n	2a1e <__swbuf_r+0x16>
    2a1a:	f000 f9b9 	bl	2d90 <__sinit>
    2a1e:	4b22      	ldr	r3, [pc, #136]	; (2aa8 <__swbuf_r+0xa0>)
    2a20:	429c      	cmp	r4, r3
    2a22:	d12d      	bne.n	2a80 <__swbuf_r+0x78>
    2a24:	686c      	ldr	r4, [r5, #4]
    2a26:	69a3      	ldr	r3, [r4, #24]
    2a28:	60a3      	str	r3, [r4, #8]
    2a2a:	89a3      	ldrh	r3, [r4, #12]
    2a2c:	071b      	lsls	r3, r3, #28
    2a2e:	d531      	bpl.n	2a94 <__swbuf_r+0x8c>
    2a30:	6923      	ldr	r3, [r4, #16]
    2a32:	2b00      	cmp	r3, #0
    2a34:	d02e      	beq.n	2a94 <__swbuf_r+0x8c>
    2a36:	6823      	ldr	r3, [r4, #0]
    2a38:	6922      	ldr	r2, [r4, #16]
    2a3a:	b2f7      	uxtb	r7, r6
    2a3c:	1a98      	subs	r0, r3, r2
    2a3e:	6963      	ldr	r3, [r4, #20]
    2a40:	b2f6      	uxtb	r6, r6
    2a42:	4298      	cmp	r0, r3
    2a44:	db05      	blt.n	2a52 <__swbuf_r+0x4a>
    2a46:	0021      	movs	r1, r4
    2a48:	0028      	movs	r0, r5
    2a4a:	f000 f933 	bl	2cb4 <_fflush_r>
    2a4e:	2800      	cmp	r0, #0
    2a50:	d126      	bne.n	2aa0 <__swbuf_r+0x98>
    2a52:	68a3      	ldr	r3, [r4, #8]
    2a54:	3001      	adds	r0, #1
    2a56:	3b01      	subs	r3, #1
    2a58:	60a3      	str	r3, [r4, #8]
    2a5a:	6823      	ldr	r3, [r4, #0]
    2a5c:	1c5a      	adds	r2, r3, #1
    2a5e:	6022      	str	r2, [r4, #0]
    2a60:	701f      	strb	r7, [r3, #0]
    2a62:	6963      	ldr	r3, [r4, #20]
    2a64:	4298      	cmp	r0, r3
    2a66:	d004      	beq.n	2a72 <__swbuf_r+0x6a>
    2a68:	89a3      	ldrh	r3, [r4, #12]
    2a6a:	07db      	lsls	r3, r3, #31
    2a6c:	d51a      	bpl.n	2aa4 <__swbuf_r+0x9c>
    2a6e:	2e0a      	cmp	r6, #10
    2a70:	d118      	bne.n	2aa4 <__swbuf_r+0x9c>
    2a72:	0021      	movs	r1, r4
    2a74:	0028      	movs	r0, r5
    2a76:	f000 f91d 	bl	2cb4 <_fflush_r>
    2a7a:	2800      	cmp	r0, #0
    2a7c:	d012      	beq.n	2aa4 <__swbuf_r+0x9c>
    2a7e:	e00f      	b.n	2aa0 <__swbuf_r+0x98>
    2a80:	4b0a      	ldr	r3, [pc, #40]	; (2aac <__swbuf_r+0xa4>)
    2a82:	429c      	cmp	r4, r3
    2a84:	d101      	bne.n	2a8a <__swbuf_r+0x82>
    2a86:	68ac      	ldr	r4, [r5, #8]
    2a88:	e7cd      	b.n	2a26 <__swbuf_r+0x1e>
    2a8a:	4b09      	ldr	r3, [pc, #36]	; (2ab0 <__swbuf_r+0xa8>)
    2a8c:	429c      	cmp	r4, r3
    2a8e:	d1ca      	bne.n	2a26 <__swbuf_r+0x1e>
    2a90:	68ec      	ldr	r4, [r5, #12]
    2a92:	e7c8      	b.n	2a26 <__swbuf_r+0x1e>
    2a94:	0021      	movs	r1, r4
    2a96:	0028      	movs	r0, r5
    2a98:	f000 f80c 	bl	2ab4 <__swsetup_r>
    2a9c:	2800      	cmp	r0, #0
    2a9e:	d0ca      	beq.n	2a36 <__swbuf_r+0x2e>
    2aa0:	2601      	movs	r6, #1
    2aa2:	4276      	negs	r6, r6
    2aa4:	0030      	movs	r0, r6
    2aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2aa8:	000052a8 	.word	0x000052a8
    2aac:	000052c8 	.word	0x000052c8
    2ab0:	00005288 	.word	0x00005288

00002ab4 <__swsetup_r>:
    2ab4:	4b36      	ldr	r3, [pc, #216]	; (2b90 <__swsetup_r+0xdc>)
    2ab6:	b570      	push	{r4, r5, r6, lr}
    2ab8:	681d      	ldr	r5, [r3, #0]
    2aba:	0006      	movs	r6, r0
    2abc:	000c      	movs	r4, r1
    2abe:	2d00      	cmp	r5, #0
    2ac0:	d005      	beq.n	2ace <__swsetup_r+0x1a>
    2ac2:	69ab      	ldr	r3, [r5, #24]
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d102      	bne.n	2ace <__swsetup_r+0x1a>
    2ac8:	0028      	movs	r0, r5
    2aca:	f000 f961 	bl	2d90 <__sinit>
    2ace:	4b31      	ldr	r3, [pc, #196]	; (2b94 <__swsetup_r+0xe0>)
    2ad0:	429c      	cmp	r4, r3
    2ad2:	d10f      	bne.n	2af4 <__swsetup_r+0x40>
    2ad4:	686c      	ldr	r4, [r5, #4]
    2ad6:	230c      	movs	r3, #12
    2ad8:	5ee2      	ldrsh	r2, [r4, r3]
    2ada:	b293      	uxth	r3, r2
    2adc:	0719      	lsls	r1, r3, #28
    2ade:	d42d      	bmi.n	2b3c <__swsetup_r+0x88>
    2ae0:	06d9      	lsls	r1, r3, #27
    2ae2:	d411      	bmi.n	2b08 <__swsetup_r+0x54>
    2ae4:	2309      	movs	r3, #9
    2ae6:	2001      	movs	r0, #1
    2ae8:	6033      	str	r3, [r6, #0]
    2aea:	3337      	adds	r3, #55	; 0x37
    2aec:	4313      	orrs	r3, r2
    2aee:	81a3      	strh	r3, [r4, #12]
    2af0:	4240      	negs	r0, r0
    2af2:	bd70      	pop	{r4, r5, r6, pc}
    2af4:	4b28      	ldr	r3, [pc, #160]	; (2b98 <__swsetup_r+0xe4>)
    2af6:	429c      	cmp	r4, r3
    2af8:	d101      	bne.n	2afe <__swsetup_r+0x4a>
    2afa:	68ac      	ldr	r4, [r5, #8]
    2afc:	e7eb      	b.n	2ad6 <__swsetup_r+0x22>
    2afe:	4b27      	ldr	r3, [pc, #156]	; (2b9c <__swsetup_r+0xe8>)
    2b00:	429c      	cmp	r4, r3
    2b02:	d1e8      	bne.n	2ad6 <__swsetup_r+0x22>
    2b04:	68ec      	ldr	r4, [r5, #12]
    2b06:	e7e6      	b.n	2ad6 <__swsetup_r+0x22>
    2b08:	075b      	lsls	r3, r3, #29
    2b0a:	d513      	bpl.n	2b34 <__swsetup_r+0x80>
    2b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2b0e:	2900      	cmp	r1, #0
    2b10:	d008      	beq.n	2b24 <__swsetup_r+0x70>
    2b12:	0023      	movs	r3, r4
    2b14:	3344      	adds	r3, #68	; 0x44
    2b16:	4299      	cmp	r1, r3
    2b18:	d002      	beq.n	2b20 <__swsetup_r+0x6c>
    2b1a:	0030      	movs	r0, r6
    2b1c:	f000 fa44 	bl	2fa8 <_free_r>
    2b20:	2300      	movs	r3, #0
    2b22:	6363      	str	r3, [r4, #52]	; 0x34
    2b24:	2224      	movs	r2, #36	; 0x24
    2b26:	89a3      	ldrh	r3, [r4, #12]
    2b28:	4393      	bics	r3, r2
    2b2a:	81a3      	strh	r3, [r4, #12]
    2b2c:	2300      	movs	r3, #0
    2b2e:	6063      	str	r3, [r4, #4]
    2b30:	6923      	ldr	r3, [r4, #16]
    2b32:	6023      	str	r3, [r4, #0]
    2b34:	2308      	movs	r3, #8
    2b36:	89a2      	ldrh	r2, [r4, #12]
    2b38:	4313      	orrs	r3, r2
    2b3a:	81a3      	strh	r3, [r4, #12]
    2b3c:	6923      	ldr	r3, [r4, #16]
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d10b      	bne.n	2b5a <__swsetup_r+0xa6>
    2b42:	21a0      	movs	r1, #160	; 0xa0
    2b44:	2280      	movs	r2, #128	; 0x80
    2b46:	89a3      	ldrh	r3, [r4, #12]
    2b48:	0089      	lsls	r1, r1, #2
    2b4a:	0092      	lsls	r2, r2, #2
    2b4c:	400b      	ands	r3, r1
    2b4e:	4293      	cmp	r3, r2
    2b50:	d003      	beq.n	2b5a <__swsetup_r+0xa6>
    2b52:	0021      	movs	r1, r4
    2b54:	0030      	movs	r0, r6
    2b56:	f000 f9d9 	bl	2f0c <__smakebuf_r>
    2b5a:	2301      	movs	r3, #1
    2b5c:	89a2      	ldrh	r2, [r4, #12]
    2b5e:	4013      	ands	r3, r2
    2b60:	d011      	beq.n	2b86 <__swsetup_r+0xd2>
    2b62:	2300      	movs	r3, #0
    2b64:	60a3      	str	r3, [r4, #8]
    2b66:	6963      	ldr	r3, [r4, #20]
    2b68:	425b      	negs	r3, r3
    2b6a:	61a3      	str	r3, [r4, #24]
    2b6c:	2000      	movs	r0, #0
    2b6e:	6923      	ldr	r3, [r4, #16]
    2b70:	4283      	cmp	r3, r0
    2b72:	d1be      	bne.n	2af2 <__swsetup_r+0x3e>
    2b74:	230c      	movs	r3, #12
    2b76:	5ee2      	ldrsh	r2, [r4, r3]
    2b78:	0613      	lsls	r3, r2, #24
    2b7a:	d5ba      	bpl.n	2af2 <__swsetup_r+0x3e>
    2b7c:	2340      	movs	r3, #64	; 0x40
    2b7e:	4313      	orrs	r3, r2
    2b80:	81a3      	strh	r3, [r4, #12]
    2b82:	3801      	subs	r0, #1
    2b84:	e7b5      	b.n	2af2 <__swsetup_r+0x3e>
    2b86:	0792      	lsls	r2, r2, #30
    2b88:	d400      	bmi.n	2b8c <__swsetup_r+0xd8>
    2b8a:	6963      	ldr	r3, [r4, #20]
    2b8c:	60a3      	str	r3, [r4, #8]
    2b8e:	e7ed      	b.n	2b6c <__swsetup_r+0xb8>
    2b90:	20000010 	.word	0x20000010
    2b94:	000052a8 	.word	0x000052a8
    2b98:	000052c8 	.word	0x000052c8
    2b9c:	00005288 	.word	0x00005288

00002ba0 <__sflush_r>:
    2ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ba2:	898a      	ldrh	r2, [r1, #12]
    2ba4:	0005      	movs	r5, r0
    2ba6:	000c      	movs	r4, r1
    2ba8:	0713      	lsls	r3, r2, #28
    2baa:	d460      	bmi.n	2c6e <__sflush_r+0xce>
    2bac:	684b      	ldr	r3, [r1, #4]
    2bae:	2b00      	cmp	r3, #0
    2bb0:	dc04      	bgt.n	2bbc <__sflush_r+0x1c>
    2bb2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	dc01      	bgt.n	2bbc <__sflush_r+0x1c>
    2bb8:	2000      	movs	r0, #0
    2bba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2bbc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2bbe:	2f00      	cmp	r7, #0
    2bc0:	d0fa      	beq.n	2bb8 <__sflush_r+0x18>
    2bc2:	2300      	movs	r3, #0
    2bc4:	682e      	ldr	r6, [r5, #0]
    2bc6:	602b      	str	r3, [r5, #0]
    2bc8:	2380      	movs	r3, #128	; 0x80
    2bca:	015b      	lsls	r3, r3, #5
    2bcc:	401a      	ands	r2, r3
    2bce:	d034      	beq.n	2c3a <__sflush_r+0x9a>
    2bd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2bd2:	89a3      	ldrh	r3, [r4, #12]
    2bd4:	075b      	lsls	r3, r3, #29
    2bd6:	d506      	bpl.n	2be6 <__sflush_r+0x46>
    2bd8:	6863      	ldr	r3, [r4, #4]
    2bda:	1ac0      	subs	r0, r0, r3
    2bdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2bde:	2b00      	cmp	r3, #0
    2be0:	d001      	beq.n	2be6 <__sflush_r+0x46>
    2be2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2be4:	1ac0      	subs	r0, r0, r3
    2be6:	0002      	movs	r2, r0
    2be8:	6a21      	ldr	r1, [r4, #32]
    2bea:	2300      	movs	r3, #0
    2bec:	0028      	movs	r0, r5
    2bee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2bf0:	47b8      	blx	r7
    2bf2:	89a1      	ldrh	r1, [r4, #12]
    2bf4:	1c43      	adds	r3, r0, #1
    2bf6:	d106      	bne.n	2c06 <__sflush_r+0x66>
    2bf8:	682b      	ldr	r3, [r5, #0]
    2bfa:	2b1d      	cmp	r3, #29
    2bfc:	d831      	bhi.n	2c62 <__sflush_r+0xc2>
    2bfe:	4a2c      	ldr	r2, [pc, #176]	; (2cb0 <__sflush_r+0x110>)
    2c00:	40da      	lsrs	r2, r3
    2c02:	07d3      	lsls	r3, r2, #31
    2c04:	d52d      	bpl.n	2c62 <__sflush_r+0xc2>
    2c06:	2300      	movs	r3, #0
    2c08:	6063      	str	r3, [r4, #4]
    2c0a:	6923      	ldr	r3, [r4, #16]
    2c0c:	6023      	str	r3, [r4, #0]
    2c0e:	04cb      	lsls	r3, r1, #19
    2c10:	d505      	bpl.n	2c1e <__sflush_r+0x7e>
    2c12:	1c43      	adds	r3, r0, #1
    2c14:	d102      	bne.n	2c1c <__sflush_r+0x7c>
    2c16:	682b      	ldr	r3, [r5, #0]
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d100      	bne.n	2c1e <__sflush_r+0x7e>
    2c1c:	6560      	str	r0, [r4, #84]	; 0x54
    2c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2c20:	602e      	str	r6, [r5, #0]
    2c22:	2900      	cmp	r1, #0
    2c24:	d0c8      	beq.n	2bb8 <__sflush_r+0x18>
    2c26:	0023      	movs	r3, r4
    2c28:	3344      	adds	r3, #68	; 0x44
    2c2a:	4299      	cmp	r1, r3
    2c2c:	d002      	beq.n	2c34 <__sflush_r+0x94>
    2c2e:	0028      	movs	r0, r5
    2c30:	f000 f9ba 	bl	2fa8 <_free_r>
    2c34:	2000      	movs	r0, #0
    2c36:	6360      	str	r0, [r4, #52]	; 0x34
    2c38:	e7bf      	b.n	2bba <__sflush_r+0x1a>
    2c3a:	2301      	movs	r3, #1
    2c3c:	6a21      	ldr	r1, [r4, #32]
    2c3e:	0028      	movs	r0, r5
    2c40:	47b8      	blx	r7
    2c42:	1c43      	adds	r3, r0, #1
    2c44:	d1c5      	bne.n	2bd2 <__sflush_r+0x32>
    2c46:	682b      	ldr	r3, [r5, #0]
    2c48:	2b00      	cmp	r3, #0
    2c4a:	d0c2      	beq.n	2bd2 <__sflush_r+0x32>
    2c4c:	2b1d      	cmp	r3, #29
    2c4e:	d001      	beq.n	2c54 <__sflush_r+0xb4>
    2c50:	2b16      	cmp	r3, #22
    2c52:	d101      	bne.n	2c58 <__sflush_r+0xb8>
    2c54:	602e      	str	r6, [r5, #0]
    2c56:	e7af      	b.n	2bb8 <__sflush_r+0x18>
    2c58:	2340      	movs	r3, #64	; 0x40
    2c5a:	89a2      	ldrh	r2, [r4, #12]
    2c5c:	4313      	orrs	r3, r2
    2c5e:	81a3      	strh	r3, [r4, #12]
    2c60:	e7ab      	b.n	2bba <__sflush_r+0x1a>
    2c62:	2340      	movs	r3, #64	; 0x40
    2c64:	430b      	orrs	r3, r1
    2c66:	2001      	movs	r0, #1
    2c68:	81a3      	strh	r3, [r4, #12]
    2c6a:	4240      	negs	r0, r0
    2c6c:	e7a5      	b.n	2bba <__sflush_r+0x1a>
    2c6e:	690f      	ldr	r7, [r1, #16]
    2c70:	2f00      	cmp	r7, #0
    2c72:	d0a1      	beq.n	2bb8 <__sflush_r+0x18>
    2c74:	680b      	ldr	r3, [r1, #0]
    2c76:	600f      	str	r7, [r1, #0]
    2c78:	1bdb      	subs	r3, r3, r7
    2c7a:	9301      	str	r3, [sp, #4]
    2c7c:	2300      	movs	r3, #0
    2c7e:	0792      	lsls	r2, r2, #30
    2c80:	d100      	bne.n	2c84 <__sflush_r+0xe4>
    2c82:	694b      	ldr	r3, [r1, #20]
    2c84:	60a3      	str	r3, [r4, #8]
    2c86:	9b01      	ldr	r3, [sp, #4]
    2c88:	2b00      	cmp	r3, #0
    2c8a:	dc00      	bgt.n	2c8e <__sflush_r+0xee>
    2c8c:	e794      	b.n	2bb8 <__sflush_r+0x18>
    2c8e:	9b01      	ldr	r3, [sp, #4]
    2c90:	003a      	movs	r2, r7
    2c92:	6a21      	ldr	r1, [r4, #32]
    2c94:	0028      	movs	r0, r5
    2c96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2c98:	47b0      	blx	r6
    2c9a:	2800      	cmp	r0, #0
    2c9c:	dc03      	bgt.n	2ca6 <__sflush_r+0x106>
    2c9e:	2340      	movs	r3, #64	; 0x40
    2ca0:	89a2      	ldrh	r2, [r4, #12]
    2ca2:	4313      	orrs	r3, r2
    2ca4:	e7df      	b.n	2c66 <__sflush_r+0xc6>
    2ca6:	9b01      	ldr	r3, [sp, #4]
    2ca8:	183f      	adds	r7, r7, r0
    2caa:	1a1b      	subs	r3, r3, r0
    2cac:	9301      	str	r3, [sp, #4]
    2cae:	e7ea      	b.n	2c86 <__sflush_r+0xe6>
    2cb0:	20400001 	.word	0x20400001

00002cb4 <_fflush_r>:
    2cb4:	690b      	ldr	r3, [r1, #16]
    2cb6:	b570      	push	{r4, r5, r6, lr}
    2cb8:	0005      	movs	r5, r0
    2cba:	000c      	movs	r4, r1
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	d101      	bne.n	2cc4 <_fflush_r+0x10>
    2cc0:	2000      	movs	r0, #0
    2cc2:	bd70      	pop	{r4, r5, r6, pc}
    2cc4:	2800      	cmp	r0, #0
    2cc6:	d004      	beq.n	2cd2 <_fflush_r+0x1e>
    2cc8:	6983      	ldr	r3, [r0, #24]
    2cca:	2b00      	cmp	r3, #0
    2ccc:	d101      	bne.n	2cd2 <_fflush_r+0x1e>
    2cce:	f000 f85f 	bl	2d90 <__sinit>
    2cd2:	4b0b      	ldr	r3, [pc, #44]	; (2d00 <_fflush_r+0x4c>)
    2cd4:	429c      	cmp	r4, r3
    2cd6:	d109      	bne.n	2cec <_fflush_r+0x38>
    2cd8:	686c      	ldr	r4, [r5, #4]
    2cda:	220c      	movs	r2, #12
    2cdc:	5ea3      	ldrsh	r3, [r4, r2]
    2cde:	2b00      	cmp	r3, #0
    2ce0:	d0ee      	beq.n	2cc0 <_fflush_r+0xc>
    2ce2:	0021      	movs	r1, r4
    2ce4:	0028      	movs	r0, r5
    2ce6:	f7ff ff5b 	bl	2ba0 <__sflush_r>
    2cea:	e7ea      	b.n	2cc2 <_fflush_r+0xe>
    2cec:	4b05      	ldr	r3, [pc, #20]	; (2d04 <_fflush_r+0x50>)
    2cee:	429c      	cmp	r4, r3
    2cf0:	d101      	bne.n	2cf6 <_fflush_r+0x42>
    2cf2:	68ac      	ldr	r4, [r5, #8]
    2cf4:	e7f1      	b.n	2cda <_fflush_r+0x26>
    2cf6:	4b04      	ldr	r3, [pc, #16]	; (2d08 <_fflush_r+0x54>)
    2cf8:	429c      	cmp	r4, r3
    2cfa:	d1ee      	bne.n	2cda <_fflush_r+0x26>
    2cfc:	68ec      	ldr	r4, [r5, #12]
    2cfe:	e7ec      	b.n	2cda <_fflush_r+0x26>
    2d00:	000052a8 	.word	0x000052a8
    2d04:	000052c8 	.word	0x000052c8
    2d08:	00005288 	.word	0x00005288

00002d0c <_cleanup_r>:
    2d0c:	b510      	push	{r4, lr}
    2d0e:	4902      	ldr	r1, [pc, #8]	; (2d18 <_cleanup_r+0xc>)
    2d10:	f000 f8b2 	bl	2e78 <_fwalk_reent>
    2d14:	bd10      	pop	{r4, pc}
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	00002cb5 	.word	0x00002cb5

00002d1c <std.isra.0>:
    2d1c:	2300      	movs	r3, #0
    2d1e:	b510      	push	{r4, lr}
    2d20:	0004      	movs	r4, r0
    2d22:	6003      	str	r3, [r0, #0]
    2d24:	6043      	str	r3, [r0, #4]
    2d26:	6083      	str	r3, [r0, #8]
    2d28:	8181      	strh	r1, [r0, #12]
    2d2a:	6643      	str	r3, [r0, #100]	; 0x64
    2d2c:	81c2      	strh	r2, [r0, #14]
    2d2e:	6103      	str	r3, [r0, #16]
    2d30:	6143      	str	r3, [r0, #20]
    2d32:	6183      	str	r3, [r0, #24]
    2d34:	0019      	movs	r1, r3
    2d36:	2208      	movs	r2, #8
    2d38:	305c      	adds	r0, #92	; 0x5c
    2d3a:	f7ff fd3d 	bl	27b8 <memset>
    2d3e:	4b05      	ldr	r3, [pc, #20]	; (2d54 <std.isra.0+0x38>)
    2d40:	6224      	str	r4, [r4, #32]
    2d42:	6263      	str	r3, [r4, #36]	; 0x24
    2d44:	4b04      	ldr	r3, [pc, #16]	; (2d58 <std.isra.0+0x3c>)
    2d46:	62a3      	str	r3, [r4, #40]	; 0x28
    2d48:	4b04      	ldr	r3, [pc, #16]	; (2d5c <std.isra.0+0x40>)
    2d4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    2d4c:	4b04      	ldr	r3, [pc, #16]	; (2d60 <std.isra.0+0x44>)
    2d4e:	6323      	str	r3, [r4, #48]	; 0x30
    2d50:	bd10      	pop	{r4, pc}
    2d52:	46c0      	nop			; (mov r8, r8)
    2d54:	0000311d 	.word	0x0000311d
    2d58:	00003145 	.word	0x00003145
    2d5c:	0000317d 	.word	0x0000317d
    2d60:	000031a9 	.word	0x000031a9

00002d64 <__sfmoreglue>:
    2d64:	b570      	push	{r4, r5, r6, lr}
    2d66:	2568      	movs	r5, #104	; 0x68
    2d68:	1e4a      	subs	r2, r1, #1
    2d6a:	4355      	muls	r5, r2
    2d6c:	000e      	movs	r6, r1
    2d6e:	0029      	movs	r1, r5
    2d70:	3174      	adds	r1, #116	; 0x74
    2d72:	f000 f963 	bl	303c <_malloc_r>
    2d76:	1e04      	subs	r4, r0, #0
    2d78:	d008      	beq.n	2d8c <__sfmoreglue+0x28>
    2d7a:	2100      	movs	r1, #0
    2d7c:	002a      	movs	r2, r5
    2d7e:	6001      	str	r1, [r0, #0]
    2d80:	6046      	str	r6, [r0, #4]
    2d82:	300c      	adds	r0, #12
    2d84:	60a0      	str	r0, [r4, #8]
    2d86:	3268      	adds	r2, #104	; 0x68
    2d88:	f7ff fd16 	bl	27b8 <memset>
    2d8c:	0020      	movs	r0, r4
    2d8e:	bd70      	pop	{r4, r5, r6, pc}

00002d90 <__sinit>:
    2d90:	6983      	ldr	r3, [r0, #24]
    2d92:	b513      	push	{r0, r1, r4, lr}
    2d94:	0004      	movs	r4, r0
    2d96:	2b00      	cmp	r3, #0
    2d98:	d128      	bne.n	2dec <__sinit+0x5c>
    2d9a:	6483      	str	r3, [r0, #72]	; 0x48
    2d9c:	64c3      	str	r3, [r0, #76]	; 0x4c
    2d9e:	6503      	str	r3, [r0, #80]	; 0x50
    2da0:	4b13      	ldr	r3, [pc, #76]	; (2df0 <__sinit+0x60>)
    2da2:	4a14      	ldr	r2, [pc, #80]	; (2df4 <__sinit+0x64>)
    2da4:	681b      	ldr	r3, [r3, #0]
    2da6:	6282      	str	r2, [r0, #40]	; 0x28
    2da8:	9301      	str	r3, [sp, #4]
    2daa:	4298      	cmp	r0, r3
    2dac:	d101      	bne.n	2db2 <__sinit+0x22>
    2dae:	2301      	movs	r3, #1
    2db0:	6183      	str	r3, [r0, #24]
    2db2:	0020      	movs	r0, r4
    2db4:	f000 f820 	bl	2df8 <__sfp>
    2db8:	6060      	str	r0, [r4, #4]
    2dba:	0020      	movs	r0, r4
    2dbc:	f000 f81c 	bl	2df8 <__sfp>
    2dc0:	60a0      	str	r0, [r4, #8]
    2dc2:	0020      	movs	r0, r4
    2dc4:	f000 f818 	bl	2df8 <__sfp>
    2dc8:	2200      	movs	r2, #0
    2dca:	60e0      	str	r0, [r4, #12]
    2dcc:	2104      	movs	r1, #4
    2dce:	6860      	ldr	r0, [r4, #4]
    2dd0:	f7ff ffa4 	bl	2d1c <std.isra.0>
    2dd4:	2201      	movs	r2, #1
    2dd6:	2109      	movs	r1, #9
    2dd8:	68a0      	ldr	r0, [r4, #8]
    2dda:	f7ff ff9f 	bl	2d1c <std.isra.0>
    2dde:	2202      	movs	r2, #2
    2de0:	2112      	movs	r1, #18
    2de2:	68e0      	ldr	r0, [r4, #12]
    2de4:	f7ff ff9a 	bl	2d1c <std.isra.0>
    2de8:	2301      	movs	r3, #1
    2dea:	61a3      	str	r3, [r4, #24]
    2dec:	bd13      	pop	{r0, r1, r4, pc}
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	00005284 	.word	0x00005284
    2df4:	00002d0d 	.word	0x00002d0d

00002df8 <__sfp>:
    2df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dfa:	4b1e      	ldr	r3, [pc, #120]	; (2e74 <__sfp+0x7c>)
    2dfc:	0007      	movs	r7, r0
    2dfe:	681e      	ldr	r6, [r3, #0]
    2e00:	69b3      	ldr	r3, [r6, #24]
    2e02:	2b00      	cmp	r3, #0
    2e04:	d102      	bne.n	2e0c <__sfp+0x14>
    2e06:	0030      	movs	r0, r6
    2e08:	f7ff ffc2 	bl	2d90 <__sinit>
    2e0c:	3648      	adds	r6, #72	; 0x48
    2e0e:	68b4      	ldr	r4, [r6, #8]
    2e10:	6873      	ldr	r3, [r6, #4]
    2e12:	3b01      	subs	r3, #1
    2e14:	d504      	bpl.n	2e20 <__sfp+0x28>
    2e16:	6833      	ldr	r3, [r6, #0]
    2e18:	2b00      	cmp	r3, #0
    2e1a:	d007      	beq.n	2e2c <__sfp+0x34>
    2e1c:	6836      	ldr	r6, [r6, #0]
    2e1e:	e7f6      	b.n	2e0e <__sfp+0x16>
    2e20:	220c      	movs	r2, #12
    2e22:	5ea5      	ldrsh	r5, [r4, r2]
    2e24:	2d00      	cmp	r5, #0
    2e26:	d00d      	beq.n	2e44 <__sfp+0x4c>
    2e28:	3468      	adds	r4, #104	; 0x68
    2e2a:	e7f2      	b.n	2e12 <__sfp+0x1a>
    2e2c:	2104      	movs	r1, #4
    2e2e:	0038      	movs	r0, r7
    2e30:	f7ff ff98 	bl	2d64 <__sfmoreglue>
    2e34:	6030      	str	r0, [r6, #0]
    2e36:	2800      	cmp	r0, #0
    2e38:	d1f0      	bne.n	2e1c <__sfp+0x24>
    2e3a:	230c      	movs	r3, #12
    2e3c:	0004      	movs	r4, r0
    2e3e:	603b      	str	r3, [r7, #0]
    2e40:	0020      	movs	r0, r4
    2e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e44:	2301      	movs	r3, #1
    2e46:	0020      	movs	r0, r4
    2e48:	425b      	negs	r3, r3
    2e4a:	81e3      	strh	r3, [r4, #14]
    2e4c:	3302      	adds	r3, #2
    2e4e:	81a3      	strh	r3, [r4, #12]
    2e50:	6665      	str	r5, [r4, #100]	; 0x64
    2e52:	6025      	str	r5, [r4, #0]
    2e54:	60a5      	str	r5, [r4, #8]
    2e56:	6065      	str	r5, [r4, #4]
    2e58:	6125      	str	r5, [r4, #16]
    2e5a:	6165      	str	r5, [r4, #20]
    2e5c:	61a5      	str	r5, [r4, #24]
    2e5e:	2208      	movs	r2, #8
    2e60:	0029      	movs	r1, r5
    2e62:	305c      	adds	r0, #92	; 0x5c
    2e64:	f7ff fca8 	bl	27b8 <memset>
    2e68:	6365      	str	r5, [r4, #52]	; 0x34
    2e6a:	63a5      	str	r5, [r4, #56]	; 0x38
    2e6c:	64a5      	str	r5, [r4, #72]	; 0x48
    2e6e:	64e5      	str	r5, [r4, #76]	; 0x4c
    2e70:	e7e6      	b.n	2e40 <__sfp+0x48>
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	00005284 	.word	0x00005284

00002e78 <_fwalk_reent>:
    2e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2e7a:	0004      	movs	r4, r0
    2e7c:	0007      	movs	r7, r0
    2e7e:	2600      	movs	r6, #0
    2e80:	9101      	str	r1, [sp, #4]
    2e82:	3448      	adds	r4, #72	; 0x48
    2e84:	2c00      	cmp	r4, #0
    2e86:	d101      	bne.n	2e8c <_fwalk_reent+0x14>
    2e88:	0030      	movs	r0, r6
    2e8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2e8c:	6863      	ldr	r3, [r4, #4]
    2e8e:	68a5      	ldr	r5, [r4, #8]
    2e90:	9300      	str	r3, [sp, #0]
    2e92:	9b00      	ldr	r3, [sp, #0]
    2e94:	3b01      	subs	r3, #1
    2e96:	9300      	str	r3, [sp, #0]
    2e98:	d501      	bpl.n	2e9e <_fwalk_reent+0x26>
    2e9a:	6824      	ldr	r4, [r4, #0]
    2e9c:	e7f2      	b.n	2e84 <_fwalk_reent+0xc>
    2e9e:	89ab      	ldrh	r3, [r5, #12]
    2ea0:	2b01      	cmp	r3, #1
    2ea2:	d908      	bls.n	2eb6 <_fwalk_reent+0x3e>
    2ea4:	220e      	movs	r2, #14
    2ea6:	5eab      	ldrsh	r3, [r5, r2]
    2ea8:	3301      	adds	r3, #1
    2eaa:	d004      	beq.n	2eb6 <_fwalk_reent+0x3e>
    2eac:	0029      	movs	r1, r5
    2eae:	0038      	movs	r0, r7
    2eb0:	9b01      	ldr	r3, [sp, #4]
    2eb2:	4798      	blx	r3
    2eb4:	4306      	orrs	r6, r0
    2eb6:	3568      	adds	r5, #104	; 0x68
    2eb8:	e7eb      	b.n	2e92 <_fwalk_reent+0x1a>
	...

00002ebc <__swhatbuf_r>:
    2ebc:	b570      	push	{r4, r5, r6, lr}
    2ebe:	000e      	movs	r6, r1
    2ec0:	001d      	movs	r5, r3
    2ec2:	230e      	movs	r3, #14
    2ec4:	5ec9      	ldrsh	r1, [r1, r3]
    2ec6:	b090      	sub	sp, #64	; 0x40
    2ec8:	0014      	movs	r4, r2
    2eca:	2900      	cmp	r1, #0
    2ecc:	da07      	bge.n	2ede <__swhatbuf_r+0x22>
    2ece:	2300      	movs	r3, #0
    2ed0:	602b      	str	r3, [r5, #0]
    2ed2:	89b3      	ldrh	r3, [r6, #12]
    2ed4:	061b      	lsls	r3, r3, #24
    2ed6:	d411      	bmi.n	2efc <__swhatbuf_r+0x40>
    2ed8:	2380      	movs	r3, #128	; 0x80
    2eda:	00db      	lsls	r3, r3, #3
    2edc:	e00f      	b.n	2efe <__swhatbuf_r+0x42>
    2ede:	aa01      	add	r2, sp, #4
    2ee0:	f000 f98e 	bl	3200 <_fstat_r>
    2ee4:	2800      	cmp	r0, #0
    2ee6:	dbf2      	blt.n	2ece <__swhatbuf_r+0x12>
    2ee8:	22f0      	movs	r2, #240	; 0xf0
    2eea:	9b02      	ldr	r3, [sp, #8]
    2eec:	0212      	lsls	r2, r2, #8
    2eee:	4013      	ands	r3, r2
    2ef0:	4a05      	ldr	r2, [pc, #20]	; (2f08 <__swhatbuf_r+0x4c>)
    2ef2:	189b      	adds	r3, r3, r2
    2ef4:	425a      	negs	r2, r3
    2ef6:	4153      	adcs	r3, r2
    2ef8:	602b      	str	r3, [r5, #0]
    2efa:	e7ed      	b.n	2ed8 <__swhatbuf_r+0x1c>
    2efc:	2340      	movs	r3, #64	; 0x40
    2efe:	2000      	movs	r0, #0
    2f00:	6023      	str	r3, [r4, #0]
    2f02:	b010      	add	sp, #64	; 0x40
    2f04:	bd70      	pop	{r4, r5, r6, pc}
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	ffffe000 	.word	0xffffe000

00002f0c <__smakebuf_r>:
    2f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f0e:	2602      	movs	r6, #2
    2f10:	898b      	ldrh	r3, [r1, #12]
    2f12:	0005      	movs	r5, r0
    2f14:	000c      	movs	r4, r1
    2f16:	4233      	tst	r3, r6
    2f18:	d006      	beq.n	2f28 <__smakebuf_r+0x1c>
    2f1a:	0023      	movs	r3, r4
    2f1c:	3347      	adds	r3, #71	; 0x47
    2f1e:	6023      	str	r3, [r4, #0]
    2f20:	6123      	str	r3, [r4, #16]
    2f22:	2301      	movs	r3, #1
    2f24:	6163      	str	r3, [r4, #20]
    2f26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2f28:	ab01      	add	r3, sp, #4
    2f2a:	466a      	mov	r2, sp
    2f2c:	f7ff ffc6 	bl	2ebc <__swhatbuf_r>
    2f30:	9900      	ldr	r1, [sp, #0]
    2f32:	0007      	movs	r7, r0
    2f34:	0028      	movs	r0, r5
    2f36:	f000 f881 	bl	303c <_malloc_r>
    2f3a:	2800      	cmp	r0, #0
    2f3c:	d108      	bne.n	2f50 <__smakebuf_r+0x44>
    2f3e:	220c      	movs	r2, #12
    2f40:	5ea3      	ldrsh	r3, [r4, r2]
    2f42:	059a      	lsls	r2, r3, #22
    2f44:	d4ef      	bmi.n	2f26 <__smakebuf_r+0x1a>
    2f46:	2203      	movs	r2, #3
    2f48:	4393      	bics	r3, r2
    2f4a:	431e      	orrs	r6, r3
    2f4c:	81a6      	strh	r6, [r4, #12]
    2f4e:	e7e4      	b.n	2f1a <__smakebuf_r+0xe>
    2f50:	4b0f      	ldr	r3, [pc, #60]	; (2f90 <__smakebuf_r+0x84>)
    2f52:	62ab      	str	r3, [r5, #40]	; 0x28
    2f54:	2380      	movs	r3, #128	; 0x80
    2f56:	89a2      	ldrh	r2, [r4, #12]
    2f58:	6020      	str	r0, [r4, #0]
    2f5a:	4313      	orrs	r3, r2
    2f5c:	81a3      	strh	r3, [r4, #12]
    2f5e:	9b00      	ldr	r3, [sp, #0]
    2f60:	6120      	str	r0, [r4, #16]
    2f62:	6163      	str	r3, [r4, #20]
    2f64:	9b01      	ldr	r3, [sp, #4]
    2f66:	2b00      	cmp	r3, #0
    2f68:	d00d      	beq.n	2f86 <__smakebuf_r+0x7a>
    2f6a:	230e      	movs	r3, #14
    2f6c:	5ee1      	ldrsh	r1, [r4, r3]
    2f6e:	0028      	movs	r0, r5
    2f70:	f000 f958 	bl	3224 <_isatty_r>
    2f74:	2800      	cmp	r0, #0
    2f76:	d006      	beq.n	2f86 <__smakebuf_r+0x7a>
    2f78:	2203      	movs	r2, #3
    2f7a:	89a3      	ldrh	r3, [r4, #12]
    2f7c:	4393      	bics	r3, r2
    2f7e:	001a      	movs	r2, r3
    2f80:	2301      	movs	r3, #1
    2f82:	4313      	orrs	r3, r2
    2f84:	81a3      	strh	r3, [r4, #12]
    2f86:	89a0      	ldrh	r0, [r4, #12]
    2f88:	4338      	orrs	r0, r7
    2f8a:	81a0      	strh	r0, [r4, #12]
    2f8c:	e7cb      	b.n	2f26 <__smakebuf_r+0x1a>
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	00002d0d 	.word	0x00002d0d

00002f94 <malloc>:
    2f94:	b510      	push	{r4, lr}
    2f96:	4b03      	ldr	r3, [pc, #12]	; (2fa4 <malloc+0x10>)
    2f98:	0001      	movs	r1, r0
    2f9a:	6818      	ldr	r0, [r3, #0]
    2f9c:	f000 f84e 	bl	303c <_malloc_r>
    2fa0:	bd10      	pop	{r4, pc}
    2fa2:	46c0      	nop			; (mov r8, r8)
    2fa4:	20000010 	.word	0x20000010

00002fa8 <_free_r>:
    2fa8:	b570      	push	{r4, r5, r6, lr}
    2faa:	0005      	movs	r5, r0
    2fac:	2900      	cmp	r1, #0
    2fae:	d010      	beq.n	2fd2 <_free_r+0x2a>
    2fb0:	1f0c      	subs	r4, r1, #4
    2fb2:	6823      	ldr	r3, [r4, #0]
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	da00      	bge.n	2fba <_free_r+0x12>
    2fb8:	18e4      	adds	r4, r4, r3
    2fba:	0028      	movs	r0, r5
    2fbc:	f000 f958 	bl	3270 <__malloc_lock>
    2fc0:	4a1d      	ldr	r2, [pc, #116]	; (3038 <_free_r+0x90>)
    2fc2:	6813      	ldr	r3, [r2, #0]
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	d105      	bne.n	2fd4 <_free_r+0x2c>
    2fc8:	6063      	str	r3, [r4, #4]
    2fca:	6014      	str	r4, [r2, #0]
    2fcc:	0028      	movs	r0, r5
    2fce:	f000 f950 	bl	3272 <__malloc_unlock>
    2fd2:	bd70      	pop	{r4, r5, r6, pc}
    2fd4:	42a3      	cmp	r3, r4
    2fd6:	d909      	bls.n	2fec <_free_r+0x44>
    2fd8:	6821      	ldr	r1, [r4, #0]
    2fda:	1860      	adds	r0, r4, r1
    2fdc:	4283      	cmp	r3, r0
    2fde:	d1f3      	bne.n	2fc8 <_free_r+0x20>
    2fe0:	6818      	ldr	r0, [r3, #0]
    2fe2:	685b      	ldr	r3, [r3, #4]
    2fe4:	1841      	adds	r1, r0, r1
    2fe6:	6021      	str	r1, [r4, #0]
    2fe8:	e7ee      	b.n	2fc8 <_free_r+0x20>
    2fea:	0013      	movs	r3, r2
    2fec:	685a      	ldr	r2, [r3, #4]
    2fee:	2a00      	cmp	r2, #0
    2ff0:	d001      	beq.n	2ff6 <_free_r+0x4e>
    2ff2:	42a2      	cmp	r2, r4
    2ff4:	d9f9      	bls.n	2fea <_free_r+0x42>
    2ff6:	6819      	ldr	r1, [r3, #0]
    2ff8:	1858      	adds	r0, r3, r1
    2ffa:	42a0      	cmp	r0, r4
    2ffc:	d10b      	bne.n	3016 <_free_r+0x6e>
    2ffe:	6820      	ldr	r0, [r4, #0]
    3000:	1809      	adds	r1, r1, r0
    3002:	1858      	adds	r0, r3, r1
    3004:	6019      	str	r1, [r3, #0]
    3006:	4282      	cmp	r2, r0
    3008:	d1e0      	bne.n	2fcc <_free_r+0x24>
    300a:	6810      	ldr	r0, [r2, #0]
    300c:	6852      	ldr	r2, [r2, #4]
    300e:	1841      	adds	r1, r0, r1
    3010:	6019      	str	r1, [r3, #0]
    3012:	605a      	str	r2, [r3, #4]
    3014:	e7da      	b.n	2fcc <_free_r+0x24>
    3016:	42a0      	cmp	r0, r4
    3018:	d902      	bls.n	3020 <_free_r+0x78>
    301a:	230c      	movs	r3, #12
    301c:	602b      	str	r3, [r5, #0]
    301e:	e7d5      	b.n	2fcc <_free_r+0x24>
    3020:	6821      	ldr	r1, [r4, #0]
    3022:	1860      	adds	r0, r4, r1
    3024:	4282      	cmp	r2, r0
    3026:	d103      	bne.n	3030 <_free_r+0x88>
    3028:	6810      	ldr	r0, [r2, #0]
    302a:	6852      	ldr	r2, [r2, #4]
    302c:	1841      	adds	r1, r0, r1
    302e:	6021      	str	r1, [r4, #0]
    3030:	6062      	str	r2, [r4, #4]
    3032:	605c      	str	r4, [r3, #4]
    3034:	e7ca      	b.n	2fcc <_free_r+0x24>
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	20000110 	.word	0x20000110

0000303c <_malloc_r>:
    303c:	2303      	movs	r3, #3
    303e:	b570      	push	{r4, r5, r6, lr}
    3040:	1ccd      	adds	r5, r1, #3
    3042:	439d      	bics	r5, r3
    3044:	3508      	adds	r5, #8
    3046:	0006      	movs	r6, r0
    3048:	2d0c      	cmp	r5, #12
    304a:	d21e      	bcs.n	308a <_malloc_r+0x4e>
    304c:	250c      	movs	r5, #12
    304e:	42a9      	cmp	r1, r5
    3050:	d81d      	bhi.n	308e <_malloc_r+0x52>
    3052:	0030      	movs	r0, r6
    3054:	f000 f90c 	bl	3270 <__malloc_lock>
    3058:	4a25      	ldr	r2, [pc, #148]	; (30f0 <_malloc_r+0xb4>)
    305a:	6814      	ldr	r4, [r2, #0]
    305c:	0021      	movs	r1, r4
    305e:	2900      	cmp	r1, #0
    3060:	d119      	bne.n	3096 <_malloc_r+0x5a>
    3062:	4c24      	ldr	r4, [pc, #144]	; (30f4 <_malloc_r+0xb8>)
    3064:	6823      	ldr	r3, [r4, #0]
    3066:	2b00      	cmp	r3, #0
    3068:	d103      	bne.n	3072 <_malloc_r+0x36>
    306a:	0030      	movs	r0, r6
    306c:	f000 f844 	bl	30f8 <_sbrk_r>
    3070:	6020      	str	r0, [r4, #0]
    3072:	0029      	movs	r1, r5
    3074:	0030      	movs	r0, r6
    3076:	f000 f83f 	bl	30f8 <_sbrk_r>
    307a:	1c43      	adds	r3, r0, #1
    307c:	d12c      	bne.n	30d8 <_malloc_r+0x9c>
    307e:	230c      	movs	r3, #12
    3080:	0030      	movs	r0, r6
    3082:	6033      	str	r3, [r6, #0]
    3084:	f000 f8f5 	bl	3272 <__malloc_unlock>
    3088:	e003      	b.n	3092 <_malloc_r+0x56>
    308a:	2d00      	cmp	r5, #0
    308c:	dadf      	bge.n	304e <_malloc_r+0x12>
    308e:	230c      	movs	r3, #12
    3090:	6033      	str	r3, [r6, #0]
    3092:	2000      	movs	r0, #0
    3094:	bd70      	pop	{r4, r5, r6, pc}
    3096:	680b      	ldr	r3, [r1, #0]
    3098:	1b5b      	subs	r3, r3, r5
    309a:	d41a      	bmi.n	30d2 <_malloc_r+0x96>
    309c:	2b0b      	cmp	r3, #11
    309e:	d903      	bls.n	30a8 <_malloc_r+0x6c>
    30a0:	600b      	str	r3, [r1, #0]
    30a2:	18cc      	adds	r4, r1, r3
    30a4:	6025      	str	r5, [r4, #0]
    30a6:	e003      	b.n	30b0 <_malloc_r+0x74>
    30a8:	428c      	cmp	r4, r1
    30aa:	d10e      	bne.n	30ca <_malloc_r+0x8e>
    30ac:	6863      	ldr	r3, [r4, #4]
    30ae:	6013      	str	r3, [r2, #0]
    30b0:	0030      	movs	r0, r6
    30b2:	f000 f8de 	bl	3272 <__malloc_unlock>
    30b6:	0020      	movs	r0, r4
    30b8:	2207      	movs	r2, #7
    30ba:	300b      	adds	r0, #11
    30bc:	1d23      	adds	r3, r4, #4
    30be:	4390      	bics	r0, r2
    30c0:	1ac3      	subs	r3, r0, r3
    30c2:	d0e7      	beq.n	3094 <_malloc_r+0x58>
    30c4:	425a      	negs	r2, r3
    30c6:	50e2      	str	r2, [r4, r3]
    30c8:	e7e4      	b.n	3094 <_malloc_r+0x58>
    30ca:	684b      	ldr	r3, [r1, #4]
    30cc:	6063      	str	r3, [r4, #4]
    30ce:	000c      	movs	r4, r1
    30d0:	e7ee      	b.n	30b0 <_malloc_r+0x74>
    30d2:	000c      	movs	r4, r1
    30d4:	6849      	ldr	r1, [r1, #4]
    30d6:	e7c2      	b.n	305e <_malloc_r+0x22>
    30d8:	2303      	movs	r3, #3
    30da:	1cc4      	adds	r4, r0, #3
    30dc:	439c      	bics	r4, r3
    30de:	42a0      	cmp	r0, r4
    30e0:	d0e0      	beq.n	30a4 <_malloc_r+0x68>
    30e2:	1a21      	subs	r1, r4, r0
    30e4:	0030      	movs	r0, r6
    30e6:	f000 f807 	bl	30f8 <_sbrk_r>
    30ea:	1c43      	adds	r3, r0, #1
    30ec:	d1da      	bne.n	30a4 <_malloc_r+0x68>
    30ee:	e7c6      	b.n	307e <_malloc_r+0x42>
    30f0:	20000110 	.word	0x20000110
    30f4:	20000114 	.word	0x20000114

000030f8 <_sbrk_r>:
    30f8:	2300      	movs	r3, #0
    30fa:	b570      	push	{r4, r5, r6, lr}
    30fc:	4c06      	ldr	r4, [pc, #24]	; (3118 <_sbrk_r+0x20>)
    30fe:	0005      	movs	r5, r0
    3100:	0008      	movs	r0, r1
    3102:	6023      	str	r3, [r4, #0]
    3104:	f7ff fa52 	bl	25ac <_sbrk>
    3108:	1c43      	adds	r3, r0, #1
    310a:	d103      	bne.n	3114 <_sbrk_r+0x1c>
    310c:	6823      	ldr	r3, [r4, #0]
    310e:	2b00      	cmp	r3, #0
    3110:	d000      	beq.n	3114 <_sbrk_r+0x1c>
    3112:	602b      	str	r3, [r5, #0]
    3114:	bd70      	pop	{r4, r5, r6, pc}
    3116:	46c0      	nop			; (mov r8, r8)
    3118:	20000204 	.word	0x20000204

0000311c <__sread>:
    311c:	b570      	push	{r4, r5, r6, lr}
    311e:	000c      	movs	r4, r1
    3120:	250e      	movs	r5, #14
    3122:	5f49      	ldrsh	r1, [r1, r5]
    3124:	f000 f8a6 	bl	3274 <_read_r>
    3128:	2800      	cmp	r0, #0
    312a:	db03      	blt.n	3134 <__sread+0x18>
    312c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    312e:	181b      	adds	r3, r3, r0
    3130:	6563      	str	r3, [r4, #84]	; 0x54
    3132:	bd70      	pop	{r4, r5, r6, pc}
    3134:	89a3      	ldrh	r3, [r4, #12]
    3136:	4a02      	ldr	r2, [pc, #8]	; (3140 <__sread+0x24>)
    3138:	4013      	ands	r3, r2
    313a:	81a3      	strh	r3, [r4, #12]
    313c:	e7f9      	b.n	3132 <__sread+0x16>
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	ffffefff 	.word	0xffffefff

00003144 <__swrite>:
    3144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3146:	001f      	movs	r7, r3
    3148:	898b      	ldrh	r3, [r1, #12]
    314a:	0005      	movs	r5, r0
    314c:	000c      	movs	r4, r1
    314e:	0016      	movs	r6, r2
    3150:	05db      	lsls	r3, r3, #23
    3152:	d505      	bpl.n	3160 <__swrite+0x1c>
    3154:	230e      	movs	r3, #14
    3156:	5ec9      	ldrsh	r1, [r1, r3]
    3158:	2200      	movs	r2, #0
    315a:	2302      	movs	r3, #2
    315c:	f000 f874 	bl	3248 <_lseek_r>
    3160:	89a3      	ldrh	r3, [r4, #12]
    3162:	4a05      	ldr	r2, [pc, #20]	; (3178 <__swrite+0x34>)
    3164:	0028      	movs	r0, r5
    3166:	4013      	ands	r3, r2
    3168:	81a3      	strh	r3, [r4, #12]
    316a:	0032      	movs	r2, r6
    316c:	230e      	movs	r3, #14
    316e:	5ee1      	ldrsh	r1, [r4, r3]
    3170:	003b      	movs	r3, r7
    3172:	f000 f81f 	bl	31b4 <_write_r>
    3176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3178:	ffffefff 	.word	0xffffefff

0000317c <__sseek>:
    317c:	b570      	push	{r4, r5, r6, lr}
    317e:	000c      	movs	r4, r1
    3180:	250e      	movs	r5, #14
    3182:	5f49      	ldrsh	r1, [r1, r5]
    3184:	f000 f860 	bl	3248 <_lseek_r>
    3188:	89a3      	ldrh	r3, [r4, #12]
    318a:	1c42      	adds	r2, r0, #1
    318c:	d103      	bne.n	3196 <__sseek+0x1a>
    318e:	4a05      	ldr	r2, [pc, #20]	; (31a4 <__sseek+0x28>)
    3190:	4013      	ands	r3, r2
    3192:	81a3      	strh	r3, [r4, #12]
    3194:	bd70      	pop	{r4, r5, r6, pc}
    3196:	2280      	movs	r2, #128	; 0x80
    3198:	0152      	lsls	r2, r2, #5
    319a:	4313      	orrs	r3, r2
    319c:	81a3      	strh	r3, [r4, #12]
    319e:	6560      	str	r0, [r4, #84]	; 0x54
    31a0:	e7f8      	b.n	3194 <__sseek+0x18>
    31a2:	46c0      	nop			; (mov r8, r8)
    31a4:	ffffefff 	.word	0xffffefff

000031a8 <__sclose>:
    31a8:	b510      	push	{r4, lr}
    31aa:	230e      	movs	r3, #14
    31ac:	5ec9      	ldrsh	r1, [r1, r3]
    31ae:	f000 f815 	bl	31dc <_close_r>
    31b2:	bd10      	pop	{r4, pc}

000031b4 <_write_r>:
    31b4:	b570      	push	{r4, r5, r6, lr}
    31b6:	0005      	movs	r5, r0
    31b8:	0008      	movs	r0, r1
    31ba:	0011      	movs	r1, r2
    31bc:	2200      	movs	r2, #0
    31be:	4c06      	ldr	r4, [pc, #24]	; (31d8 <_write_r+0x24>)
    31c0:	6022      	str	r2, [r4, #0]
    31c2:	001a      	movs	r2, r3
    31c4:	f7fd ff52 	bl	106c <_write>
    31c8:	1c43      	adds	r3, r0, #1
    31ca:	d103      	bne.n	31d4 <_write_r+0x20>
    31cc:	6823      	ldr	r3, [r4, #0]
    31ce:	2b00      	cmp	r3, #0
    31d0:	d000      	beq.n	31d4 <_write_r+0x20>
    31d2:	602b      	str	r3, [r5, #0]
    31d4:	bd70      	pop	{r4, r5, r6, pc}
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	20000204 	.word	0x20000204

000031dc <_close_r>:
    31dc:	2300      	movs	r3, #0
    31de:	b570      	push	{r4, r5, r6, lr}
    31e0:	4c06      	ldr	r4, [pc, #24]	; (31fc <_close_r+0x20>)
    31e2:	0005      	movs	r5, r0
    31e4:	0008      	movs	r0, r1
    31e6:	6023      	str	r3, [r4, #0]
    31e8:	f7ff f9f2 	bl	25d0 <_close>
    31ec:	1c43      	adds	r3, r0, #1
    31ee:	d103      	bne.n	31f8 <_close_r+0x1c>
    31f0:	6823      	ldr	r3, [r4, #0]
    31f2:	2b00      	cmp	r3, #0
    31f4:	d000      	beq.n	31f8 <_close_r+0x1c>
    31f6:	602b      	str	r3, [r5, #0]
    31f8:	bd70      	pop	{r4, r5, r6, pc}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	20000204 	.word	0x20000204

00003200 <_fstat_r>:
    3200:	2300      	movs	r3, #0
    3202:	b570      	push	{r4, r5, r6, lr}
    3204:	4c06      	ldr	r4, [pc, #24]	; (3220 <_fstat_r+0x20>)
    3206:	0005      	movs	r5, r0
    3208:	0008      	movs	r0, r1
    320a:	0011      	movs	r1, r2
    320c:	6023      	str	r3, [r4, #0]
    320e:	f7ff f9e2 	bl	25d6 <_fstat>
    3212:	1c43      	adds	r3, r0, #1
    3214:	d103      	bne.n	321e <_fstat_r+0x1e>
    3216:	6823      	ldr	r3, [r4, #0]
    3218:	2b00      	cmp	r3, #0
    321a:	d000      	beq.n	321e <_fstat_r+0x1e>
    321c:	602b      	str	r3, [r5, #0]
    321e:	bd70      	pop	{r4, r5, r6, pc}
    3220:	20000204 	.word	0x20000204

00003224 <_isatty_r>:
    3224:	2300      	movs	r3, #0
    3226:	b570      	push	{r4, r5, r6, lr}
    3228:	4c06      	ldr	r4, [pc, #24]	; (3244 <_isatty_r+0x20>)
    322a:	0005      	movs	r5, r0
    322c:	0008      	movs	r0, r1
    322e:	6023      	str	r3, [r4, #0]
    3230:	f7ff f9d6 	bl	25e0 <_isatty>
    3234:	1c43      	adds	r3, r0, #1
    3236:	d103      	bne.n	3240 <_isatty_r+0x1c>
    3238:	6823      	ldr	r3, [r4, #0]
    323a:	2b00      	cmp	r3, #0
    323c:	d000      	beq.n	3240 <_isatty_r+0x1c>
    323e:	602b      	str	r3, [r5, #0]
    3240:	bd70      	pop	{r4, r5, r6, pc}
    3242:	46c0      	nop			; (mov r8, r8)
    3244:	20000204 	.word	0x20000204

00003248 <_lseek_r>:
    3248:	b570      	push	{r4, r5, r6, lr}
    324a:	0005      	movs	r5, r0
    324c:	0008      	movs	r0, r1
    324e:	0011      	movs	r1, r2
    3250:	2200      	movs	r2, #0
    3252:	4c06      	ldr	r4, [pc, #24]	; (326c <_lseek_r+0x24>)
    3254:	6022      	str	r2, [r4, #0]
    3256:	001a      	movs	r2, r3
    3258:	f7ff f9c4 	bl	25e4 <_lseek>
    325c:	1c43      	adds	r3, r0, #1
    325e:	d103      	bne.n	3268 <_lseek_r+0x20>
    3260:	6823      	ldr	r3, [r4, #0]
    3262:	2b00      	cmp	r3, #0
    3264:	d000      	beq.n	3268 <_lseek_r+0x20>
    3266:	602b      	str	r3, [r5, #0]
    3268:	bd70      	pop	{r4, r5, r6, pc}
    326a:	46c0      	nop			; (mov r8, r8)
    326c:	20000204 	.word	0x20000204

00003270 <__malloc_lock>:
    3270:	4770      	bx	lr

00003272 <__malloc_unlock>:
    3272:	4770      	bx	lr

00003274 <_read_r>:
    3274:	b570      	push	{r4, r5, r6, lr}
    3276:	0005      	movs	r5, r0
    3278:	0008      	movs	r0, r1
    327a:	0011      	movs	r1, r2
    327c:	2200      	movs	r2, #0
    327e:	4c06      	ldr	r4, [pc, #24]	; (3298 <_read_r+0x24>)
    3280:	6022      	str	r2, [r4, #0]
    3282:	001a      	movs	r2, r3
    3284:	f7fd fed0 	bl	1028 <_read>
    3288:	1c43      	adds	r3, r0, #1
    328a:	d103      	bne.n	3294 <_read_r+0x20>
    328c:	6823      	ldr	r3, [r4, #0]
    328e:	2b00      	cmp	r3, #0
    3290:	d000      	beq.n	3294 <_read_r+0x20>
    3292:	602b      	str	r3, [r5, #0]
    3294:	bd70      	pop	{r4, r5, r6, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	20000204 	.word	0x20000204

0000329c <__udivsi3>:
    329c:	2200      	movs	r2, #0
    329e:	0843      	lsrs	r3, r0, #1
    32a0:	428b      	cmp	r3, r1
    32a2:	d374      	bcc.n	338e <__udivsi3+0xf2>
    32a4:	0903      	lsrs	r3, r0, #4
    32a6:	428b      	cmp	r3, r1
    32a8:	d35f      	bcc.n	336a <__udivsi3+0xce>
    32aa:	0a03      	lsrs	r3, r0, #8
    32ac:	428b      	cmp	r3, r1
    32ae:	d344      	bcc.n	333a <__udivsi3+0x9e>
    32b0:	0b03      	lsrs	r3, r0, #12
    32b2:	428b      	cmp	r3, r1
    32b4:	d328      	bcc.n	3308 <__udivsi3+0x6c>
    32b6:	0c03      	lsrs	r3, r0, #16
    32b8:	428b      	cmp	r3, r1
    32ba:	d30d      	bcc.n	32d8 <__udivsi3+0x3c>
    32bc:	22ff      	movs	r2, #255	; 0xff
    32be:	0209      	lsls	r1, r1, #8
    32c0:	ba12      	rev	r2, r2
    32c2:	0c03      	lsrs	r3, r0, #16
    32c4:	428b      	cmp	r3, r1
    32c6:	d302      	bcc.n	32ce <__udivsi3+0x32>
    32c8:	1212      	asrs	r2, r2, #8
    32ca:	0209      	lsls	r1, r1, #8
    32cc:	d065      	beq.n	339a <__udivsi3+0xfe>
    32ce:	0b03      	lsrs	r3, r0, #12
    32d0:	428b      	cmp	r3, r1
    32d2:	d319      	bcc.n	3308 <__udivsi3+0x6c>
    32d4:	e000      	b.n	32d8 <__udivsi3+0x3c>
    32d6:	0a09      	lsrs	r1, r1, #8
    32d8:	0bc3      	lsrs	r3, r0, #15
    32da:	428b      	cmp	r3, r1
    32dc:	d301      	bcc.n	32e2 <__udivsi3+0x46>
    32de:	03cb      	lsls	r3, r1, #15
    32e0:	1ac0      	subs	r0, r0, r3
    32e2:	4152      	adcs	r2, r2
    32e4:	0b83      	lsrs	r3, r0, #14
    32e6:	428b      	cmp	r3, r1
    32e8:	d301      	bcc.n	32ee <__udivsi3+0x52>
    32ea:	038b      	lsls	r3, r1, #14
    32ec:	1ac0      	subs	r0, r0, r3
    32ee:	4152      	adcs	r2, r2
    32f0:	0b43      	lsrs	r3, r0, #13
    32f2:	428b      	cmp	r3, r1
    32f4:	d301      	bcc.n	32fa <__udivsi3+0x5e>
    32f6:	034b      	lsls	r3, r1, #13
    32f8:	1ac0      	subs	r0, r0, r3
    32fa:	4152      	adcs	r2, r2
    32fc:	0b03      	lsrs	r3, r0, #12
    32fe:	428b      	cmp	r3, r1
    3300:	d301      	bcc.n	3306 <__udivsi3+0x6a>
    3302:	030b      	lsls	r3, r1, #12
    3304:	1ac0      	subs	r0, r0, r3
    3306:	4152      	adcs	r2, r2
    3308:	0ac3      	lsrs	r3, r0, #11
    330a:	428b      	cmp	r3, r1
    330c:	d301      	bcc.n	3312 <__udivsi3+0x76>
    330e:	02cb      	lsls	r3, r1, #11
    3310:	1ac0      	subs	r0, r0, r3
    3312:	4152      	adcs	r2, r2
    3314:	0a83      	lsrs	r3, r0, #10
    3316:	428b      	cmp	r3, r1
    3318:	d301      	bcc.n	331e <__udivsi3+0x82>
    331a:	028b      	lsls	r3, r1, #10
    331c:	1ac0      	subs	r0, r0, r3
    331e:	4152      	adcs	r2, r2
    3320:	0a43      	lsrs	r3, r0, #9
    3322:	428b      	cmp	r3, r1
    3324:	d301      	bcc.n	332a <__udivsi3+0x8e>
    3326:	024b      	lsls	r3, r1, #9
    3328:	1ac0      	subs	r0, r0, r3
    332a:	4152      	adcs	r2, r2
    332c:	0a03      	lsrs	r3, r0, #8
    332e:	428b      	cmp	r3, r1
    3330:	d301      	bcc.n	3336 <__udivsi3+0x9a>
    3332:	020b      	lsls	r3, r1, #8
    3334:	1ac0      	subs	r0, r0, r3
    3336:	4152      	adcs	r2, r2
    3338:	d2cd      	bcs.n	32d6 <__udivsi3+0x3a>
    333a:	09c3      	lsrs	r3, r0, #7
    333c:	428b      	cmp	r3, r1
    333e:	d301      	bcc.n	3344 <__udivsi3+0xa8>
    3340:	01cb      	lsls	r3, r1, #7
    3342:	1ac0      	subs	r0, r0, r3
    3344:	4152      	adcs	r2, r2
    3346:	0983      	lsrs	r3, r0, #6
    3348:	428b      	cmp	r3, r1
    334a:	d301      	bcc.n	3350 <__udivsi3+0xb4>
    334c:	018b      	lsls	r3, r1, #6
    334e:	1ac0      	subs	r0, r0, r3
    3350:	4152      	adcs	r2, r2
    3352:	0943      	lsrs	r3, r0, #5
    3354:	428b      	cmp	r3, r1
    3356:	d301      	bcc.n	335c <__udivsi3+0xc0>
    3358:	014b      	lsls	r3, r1, #5
    335a:	1ac0      	subs	r0, r0, r3
    335c:	4152      	adcs	r2, r2
    335e:	0903      	lsrs	r3, r0, #4
    3360:	428b      	cmp	r3, r1
    3362:	d301      	bcc.n	3368 <__udivsi3+0xcc>
    3364:	010b      	lsls	r3, r1, #4
    3366:	1ac0      	subs	r0, r0, r3
    3368:	4152      	adcs	r2, r2
    336a:	08c3      	lsrs	r3, r0, #3
    336c:	428b      	cmp	r3, r1
    336e:	d301      	bcc.n	3374 <__udivsi3+0xd8>
    3370:	00cb      	lsls	r3, r1, #3
    3372:	1ac0      	subs	r0, r0, r3
    3374:	4152      	adcs	r2, r2
    3376:	0883      	lsrs	r3, r0, #2
    3378:	428b      	cmp	r3, r1
    337a:	d301      	bcc.n	3380 <__udivsi3+0xe4>
    337c:	008b      	lsls	r3, r1, #2
    337e:	1ac0      	subs	r0, r0, r3
    3380:	4152      	adcs	r2, r2
    3382:	0843      	lsrs	r3, r0, #1
    3384:	428b      	cmp	r3, r1
    3386:	d301      	bcc.n	338c <__udivsi3+0xf0>
    3388:	004b      	lsls	r3, r1, #1
    338a:	1ac0      	subs	r0, r0, r3
    338c:	4152      	adcs	r2, r2
    338e:	1a41      	subs	r1, r0, r1
    3390:	d200      	bcs.n	3394 <__udivsi3+0xf8>
    3392:	4601      	mov	r1, r0
    3394:	4152      	adcs	r2, r2
    3396:	4610      	mov	r0, r2
    3398:	4770      	bx	lr
    339a:	e7ff      	b.n	339c <__udivsi3+0x100>
    339c:	b501      	push	{r0, lr}
    339e:	2000      	movs	r0, #0
    33a0:	f000 f806 	bl	33b0 <__aeabi_idiv0>
    33a4:	bd02      	pop	{r1, pc}
    33a6:	46c0      	nop			; (mov r8, r8)

000033a8 <__aeabi_uidivmod>:
    33a8:	2900      	cmp	r1, #0
    33aa:	d0f7      	beq.n	339c <__udivsi3+0x100>
    33ac:	e776      	b.n	329c <__udivsi3>
    33ae:	4770      	bx	lr

000033b0 <__aeabi_idiv0>:
    33b0:	4770      	bx	lr
    33b2:	46c0      	nop			; (mov r8, r8)

000033b4 <__aeabi_uldivmod>:
    33b4:	2b00      	cmp	r3, #0
    33b6:	d111      	bne.n	33dc <__aeabi_uldivmod+0x28>
    33b8:	2a00      	cmp	r2, #0
    33ba:	d10f      	bne.n	33dc <__aeabi_uldivmod+0x28>
    33bc:	2900      	cmp	r1, #0
    33be:	d100      	bne.n	33c2 <__aeabi_uldivmod+0xe>
    33c0:	2800      	cmp	r0, #0
    33c2:	d002      	beq.n	33ca <__aeabi_uldivmod+0x16>
    33c4:	2100      	movs	r1, #0
    33c6:	43c9      	mvns	r1, r1
    33c8:	1c08      	adds	r0, r1, #0
    33ca:	b407      	push	{r0, r1, r2}
    33cc:	4802      	ldr	r0, [pc, #8]	; (33d8 <__aeabi_uldivmod+0x24>)
    33ce:	a102      	add	r1, pc, #8	; (adr r1, 33d8 <__aeabi_uldivmod+0x24>)
    33d0:	1840      	adds	r0, r0, r1
    33d2:	9002      	str	r0, [sp, #8]
    33d4:	bd03      	pop	{r0, r1, pc}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	ffffffd9 	.word	0xffffffd9
    33dc:	b403      	push	{r0, r1}
    33de:	4668      	mov	r0, sp
    33e0:	b501      	push	{r0, lr}
    33e2:	9802      	ldr	r0, [sp, #8]
    33e4:	f000 f830 	bl	3448 <__udivmoddi4>
    33e8:	9b01      	ldr	r3, [sp, #4]
    33ea:	469e      	mov	lr, r3
    33ec:	b002      	add	sp, #8
    33ee:	bc0c      	pop	{r2, r3}
    33f0:	4770      	bx	lr
    33f2:	46c0      	nop			; (mov r8, r8)

000033f4 <__aeabi_lmul>:
    33f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33f6:	46ce      	mov	lr, r9
    33f8:	4647      	mov	r7, r8
    33fa:	0415      	lsls	r5, r2, #16
    33fc:	0c2d      	lsrs	r5, r5, #16
    33fe:	002e      	movs	r6, r5
    3400:	b580      	push	{r7, lr}
    3402:	0407      	lsls	r7, r0, #16
    3404:	0c14      	lsrs	r4, r2, #16
    3406:	0c3f      	lsrs	r7, r7, #16
    3408:	4699      	mov	r9, r3
    340a:	0c03      	lsrs	r3, r0, #16
    340c:	437e      	muls	r6, r7
    340e:	435d      	muls	r5, r3
    3410:	4367      	muls	r7, r4
    3412:	4363      	muls	r3, r4
    3414:	197f      	adds	r7, r7, r5
    3416:	0c34      	lsrs	r4, r6, #16
    3418:	19e4      	adds	r4, r4, r7
    341a:	469c      	mov	ip, r3
    341c:	42a5      	cmp	r5, r4
    341e:	d903      	bls.n	3428 <__aeabi_lmul+0x34>
    3420:	2380      	movs	r3, #128	; 0x80
    3422:	025b      	lsls	r3, r3, #9
    3424:	4698      	mov	r8, r3
    3426:	44c4      	add	ip, r8
    3428:	464b      	mov	r3, r9
    342a:	4351      	muls	r1, r2
    342c:	4343      	muls	r3, r0
    342e:	0436      	lsls	r6, r6, #16
    3430:	0c36      	lsrs	r6, r6, #16
    3432:	0c25      	lsrs	r5, r4, #16
    3434:	0424      	lsls	r4, r4, #16
    3436:	4465      	add	r5, ip
    3438:	19a4      	adds	r4, r4, r6
    343a:	1859      	adds	r1, r3, r1
    343c:	1949      	adds	r1, r1, r5
    343e:	0020      	movs	r0, r4
    3440:	bc0c      	pop	{r2, r3}
    3442:	4690      	mov	r8, r2
    3444:	4699      	mov	r9, r3
    3446:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003448 <__udivmoddi4>:
    3448:	b5f0      	push	{r4, r5, r6, r7, lr}
    344a:	4657      	mov	r7, sl
    344c:	464e      	mov	r6, r9
    344e:	4645      	mov	r5, r8
    3450:	46de      	mov	lr, fp
    3452:	b5e0      	push	{r5, r6, r7, lr}
    3454:	0004      	movs	r4, r0
    3456:	b083      	sub	sp, #12
    3458:	000d      	movs	r5, r1
    345a:	4692      	mov	sl, r2
    345c:	4699      	mov	r9, r3
    345e:	428b      	cmp	r3, r1
    3460:	d82f      	bhi.n	34c2 <__udivmoddi4+0x7a>
    3462:	d02c      	beq.n	34be <__udivmoddi4+0x76>
    3464:	4649      	mov	r1, r9
    3466:	4650      	mov	r0, sl
    3468:	f001 fe30 	bl	50cc <__clzdi2>
    346c:	0029      	movs	r1, r5
    346e:	0006      	movs	r6, r0
    3470:	0020      	movs	r0, r4
    3472:	f001 fe2b 	bl	50cc <__clzdi2>
    3476:	1a33      	subs	r3, r6, r0
    3478:	4698      	mov	r8, r3
    347a:	3b20      	subs	r3, #32
    347c:	469b      	mov	fp, r3
    347e:	d500      	bpl.n	3482 <__udivmoddi4+0x3a>
    3480:	e074      	b.n	356c <__udivmoddi4+0x124>
    3482:	4653      	mov	r3, sl
    3484:	465a      	mov	r2, fp
    3486:	4093      	lsls	r3, r2
    3488:	001f      	movs	r7, r3
    348a:	4653      	mov	r3, sl
    348c:	4642      	mov	r2, r8
    348e:	4093      	lsls	r3, r2
    3490:	001e      	movs	r6, r3
    3492:	42af      	cmp	r7, r5
    3494:	d829      	bhi.n	34ea <__udivmoddi4+0xa2>
    3496:	d026      	beq.n	34e6 <__udivmoddi4+0x9e>
    3498:	465b      	mov	r3, fp
    349a:	1ba4      	subs	r4, r4, r6
    349c:	41bd      	sbcs	r5, r7
    349e:	2b00      	cmp	r3, #0
    34a0:	da00      	bge.n	34a4 <__udivmoddi4+0x5c>
    34a2:	e079      	b.n	3598 <__udivmoddi4+0x150>
    34a4:	2200      	movs	r2, #0
    34a6:	2300      	movs	r3, #0
    34a8:	9200      	str	r2, [sp, #0]
    34aa:	9301      	str	r3, [sp, #4]
    34ac:	2301      	movs	r3, #1
    34ae:	465a      	mov	r2, fp
    34b0:	4093      	lsls	r3, r2
    34b2:	9301      	str	r3, [sp, #4]
    34b4:	2301      	movs	r3, #1
    34b6:	4642      	mov	r2, r8
    34b8:	4093      	lsls	r3, r2
    34ba:	9300      	str	r3, [sp, #0]
    34bc:	e019      	b.n	34f2 <__udivmoddi4+0xaa>
    34be:	4282      	cmp	r2, r0
    34c0:	d9d0      	bls.n	3464 <__udivmoddi4+0x1c>
    34c2:	2200      	movs	r2, #0
    34c4:	2300      	movs	r3, #0
    34c6:	9200      	str	r2, [sp, #0]
    34c8:	9301      	str	r3, [sp, #4]
    34ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    34cc:	2b00      	cmp	r3, #0
    34ce:	d001      	beq.n	34d4 <__udivmoddi4+0x8c>
    34d0:	601c      	str	r4, [r3, #0]
    34d2:	605d      	str	r5, [r3, #4]
    34d4:	9800      	ldr	r0, [sp, #0]
    34d6:	9901      	ldr	r1, [sp, #4]
    34d8:	b003      	add	sp, #12
    34da:	bc3c      	pop	{r2, r3, r4, r5}
    34dc:	4690      	mov	r8, r2
    34de:	4699      	mov	r9, r3
    34e0:	46a2      	mov	sl, r4
    34e2:	46ab      	mov	fp, r5
    34e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34e6:	42a3      	cmp	r3, r4
    34e8:	d9d6      	bls.n	3498 <__udivmoddi4+0x50>
    34ea:	2200      	movs	r2, #0
    34ec:	2300      	movs	r3, #0
    34ee:	9200      	str	r2, [sp, #0]
    34f0:	9301      	str	r3, [sp, #4]
    34f2:	4643      	mov	r3, r8
    34f4:	2b00      	cmp	r3, #0
    34f6:	d0e8      	beq.n	34ca <__udivmoddi4+0x82>
    34f8:	07fb      	lsls	r3, r7, #31
    34fa:	0872      	lsrs	r2, r6, #1
    34fc:	431a      	orrs	r2, r3
    34fe:	4646      	mov	r6, r8
    3500:	087b      	lsrs	r3, r7, #1
    3502:	e00e      	b.n	3522 <__udivmoddi4+0xda>
    3504:	42ab      	cmp	r3, r5
    3506:	d101      	bne.n	350c <__udivmoddi4+0xc4>
    3508:	42a2      	cmp	r2, r4
    350a:	d80c      	bhi.n	3526 <__udivmoddi4+0xde>
    350c:	1aa4      	subs	r4, r4, r2
    350e:	419d      	sbcs	r5, r3
    3510:	2001      	movs	r0, #1
    3512:	1924      	adds	r4, r4, r4
    3514:	416d      	adcs	r5, r5
    3516:	2100      	movs	r1, #0
    3518:	3e01      	subs	r6, #1
    351a:	1824      	adds	r4, r4, r0
    351c:	414d      	adcs	r5, r1
    351e:	2e00      	cmp	r6, #0
    3520:	d006      	beq.n	3530 <__udivmoddi4+0xe8>
    3522:	42ab      	cmp	r3, r5
    3524:	d9ee      	bls.n	3504 <__udivmoddi4+0xbc>
    3526:	3e01      	subs	r6, #1
    3528:	1924      	adds	r4, r4, r4
    352a:	416d      	adcs	r5, r5
    352c:	2e00      	cmp	r6, #0
    352e:	d1f8      	bne.n	3522 <__udivmoddi4+0xda>
    3530:	465b      	mov	r3, fp
    3532:	9800      	ldr	r0, [sp, #0]
    3534:	9901      	ldr	r1, [sp, #4]
    3536:	1900      	adds	r0, r0, r4
    3538:	4169      	adcs	r1, r5
    353a:	2b00      	cmp	r3, #0
    353c:	db22      	blt.n	3584 <__udivmoddi4+0x13c>
    353e:	002b      	movs	r3, r5
    3540:	465a      	mov	r2, fp
    3542:	40d3      	lsrs	r3, r2
    3544:	002a      	movs	r2, r5
    3546:	4644      	mov	r4, r8
    3548:	40e2      	lsrs	r2, r4
    354a:	001c      	movs	r4, r3
    354c:	465b      	mov	r3, fp
    354e:	0015      	movs	r5, r2
    3550:	2b00      	cmp	r3, #0
    3552:	db2c      	blt.n	35ae <__udivmoddi4+0x166>
    3554:	0026      	movs	r6, r4
    3556:	409e      	lsls	r6, r3
    3558:	0033      	movs	r3, r6
    355a:	0026      	movs	r6, r4
    355c:	4647      	mov	r7, r8
    355e:	40be      	lsls	r6, r7
    3560:	0032      	movs	r2, r6
    3562:	1a80      	subs	r0, r0, r2
    3564:	4199      	sbcs	r1, r3
    3566:	9000      	str	r0, [sp, #0]
    3568:	9101      	str	r1, [sp, #4]
    356a:	e7ae      	b.n	34ca <__udivmoddi4+0x82>
    356c:	4642      	mov	r2, r8
    356e:	2320      	movs	r3, #32
    3570:	1a9b      	subs	r3, r3, r2
    3572:	4652      	mov	r2, sl
    3574:	40da      	lsrs	r2, r3
    3576:	4641      	mov	r1, r8
    3578:	0013      	movs	r3, r2
    357a:	464a      	mov	r2, r9
    357c:	408a      	lsls	r2, r1
    357e:	0017      	movs	r7, r2
    3580:	431f      	orrs	r7, r3
    3582:	e782      	b.n	348a <__udivmoddi4+0x42>
    3584:	4642      	mov	r2, r8
    3586:	2320      	movs	r3, #32
    3588:	1a9b      	subs	r3, r3, r2
    358a:	002a      	movs	r2, r5
    358c:	4646      	mov	r6, r8
    358e:	409a      	lsls	r2, r3
    3590:	0023      	movs	r3, r4
    3592:	40f3      	lsrs	r3, r6
    3594:	4313      	orrs	r3, r2
    3596:	e7d5      	b.n	3544 <__udivmoddi4+0xfc>
    3598:	4642      	mov	r2, r8
    359a:	2320      	movs	r3, #32
    359c:	2100      	movs	r1, #0
    359e:	1a9b      	subs	r3, r3, r2
    35a0:	2200      	movs	r2, #0
    35a2:	9100      	str	r1, [sp, #0]
    35a4:	9201      	str	r2, [sp, #4]
    35a6:	2201      	movs	r2, #1
    35a8:	40da      	lsrs	r2, r3
    35aa:	9201      	str	r2, [sp, #4]
    35ac:	e782      	b.n	34b4 <__udivmoddi4+0x6c>
    35ae:	4642      	mov	r2, r8
    35b0:	2320      	movs	r3, #32
    35b2:	0026      	movs	r6, r4
    35b4:	1a9b      	subs	r3, r3, r2
    35b6:	40de      	lsrs	r6, r3
    35b8:	002f      	movs	r7, r5
    35ba:	46b4      	mov	ip, r6
    35bc:	4097      	lsls	r7, r2
    35be:	4666      	mov	r6, ip
    35c0:	003b      	movs	r3, r7
    35c2:	4333      	orrs	r3, r6
    35c4:	e7c9      	b.n	355a <__udivmoddi4+0x112>
    35c6:	46c0      	nop			; (mov r8, r8)

000035c8 <__aeabi_dadd>:
    35c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35ca:	4645      	mov	r5, r8
    35cc:	46de      	mov	lr, fp
    35ce:	4657      	mov	r7, sl
    35d0:	464e      	mov	r6, r9
    35d2:	030c      	lsls	r4, r1, #12
    35d4:	b5e0      	push	{r5, r6, r7, lr}
    35d6:	004e      	lsls	r6, r1, #1
    35d8:	0fc9      	lsrs	r1, r1, #31
    35da:	4688      	mov	r8, r1
    35dc:	000d      	movs	r5, r1
    35de:	0a61      	lsrs	r1, r4, #9
    35e0:	0f44      	lsrs	r4, r0, #29
    35e2:	430c      	orrs	r4, r1
    35e4:	00c7      	lsls	r7, r0, #3
    35e6:	0319      	lsls	r1, r3, #12
    35e8:	0058      	lsls	r0, r3, #1
    35ea:	0fdb      	lsrs	r3, r3, #31
    35ec:	469b      	mov	fp, r3
    35ee:	0a4b      	lsrs	r3, r1, #9
    35f0:	0f51      	lsrs	r1, r2, #29
    35f2:	430b      	orrs	r3, r1
    35f4:	0d76      	lsrs	r6, r6, #21
    35f6:	0d40      	lsrs	r0, r0, #21
    35f8:	0019      	movs	r1, r3
    35fa:	00d2      	lsls	r2, r2, #3
    35fc:	45d8      	cmp	r8, fp
    35fe:	d100      	bne.n	3602 <__aeabi_dadd+0x3a>
    3600:	e0ae      	b.n	3760 <__aeabi_dadd+0x198>
    3602:	1a35      	subs	r5, r6, r0
    3604:	2d00      	cmp	r5, #0
    3606:	dc00      	bgt.n	360a <__aeabi_dadd+0x42>
    3608:	e0f6      	b.n	37f8 <__aeabi_dadd+0x230>
    360a:	2800      	cmp	r0, #0
    360c:	d10f      	bne.n	362e <__aeabi_dadd+0x66>
    360e:	4313      	orrs	r3, r2
    3610:	d100      	bne.n	3614 <__aeabi_dadd+0x4c>
    3612:	e0db      	b.n	37cc <__aeabi_dadd+0x204>
    3614:	1e6b      	subs	r3, r5, #1
    3616:	2b00      	cmp	r3, #0
    3618:	d000      	beq.n	361c <__aeabi_dadd+0x54>
    361a:	e137      	b.n	388c <__aeabi_dadd+0x2c4>
    361c:	1aba      	subs	r2, r7, r2
    361e:	4297      	cmp	r7, r2
    3620:	41bf      	sbcs	r7, r7
    3622:	1a64      	subs	r4, r4, r1
    3624:	427f      	negs	r7, r7
    3626:	1be4      	subs	r4, r4, r7
    3628:	2601      	movs	r6, #1
    362a:	0017      	movs	r7, r2
    362c:	e024      	b.n	3678 <__aeabi_dadd+0xb0>
    362e:	4bc6      	ldr	r3, [pc, #792]	; (3948 <__aeabi_dadd+0x380>)
    3630:	429e      	cmp	r6, r3
    3632:	d04d      	beq.n	36d0 <__aeabi_dadd+0x108>
    3634:	2380      	movs	r3, #128	; 0x80
    3636:	041b      	lsls	r3, r3, #16
    3638:	4319      	orrs	r1, r3
    363a:	2d38      	cmp	r5, #56	; 0x38
    363c:	dd00      	ble.n	3640 <__aeabi_dadd+0x78>
    363e:	e107      	b.n	3850 <__aeabi_dadd+0x288>
    3640:	2d1f      	cmp	r5, #31
    3642:	dd00      	ble.n	3646 <__aeabi_dadd+0x7e>
    3644:	e138      	b.n	38b8 <__aeabi_dadd+0x2f0>
    3646:	2020      	movs	r0, #32
    3648:	1b43      	subs	r3, r0, r5
    364a:	469a      	mov	sl, r3
    364c:	000b      	movs	r3, r1
    364e:	4650      	mov	r0, sl
    3650:	4083      	lsls	r3, r0
    3652:	4699      	mov	r9, r3
    3654:	0013      	movs	r3, r2
    3656:	4648      	mov	r0, r9
    3658:	40eb      	lsrs	r3, r5
    365a:	4318      	orrs	r0, r3
    365c:	0003      	movs	r3, r0
    365e:	4650      	mov	r0, sl
    3660:	4082      	lsls	r2, r0
    3662:	1e50      	subs	r0, r2, #1
    3664:	4182      	sbcs	r2, r0
    3666:	40e9      	lsrs	r1, r5
    3668:	431a      	orrs	r2, r3
    366a:	1aba      	subs	r2, r7, r2
    366c:	1a61      	subs	r1, r4, r1
    366e:	4297      	cmp	r7, r2
    3670:	41a4      	sbcs	r4, r4
    3672:	0017      	movs	r7, r2
    3674:	4264      	negs	r4, r4
    3676:	1b0c      	subs	r4, r1, r4
    3678:	0223      	lsls	r3, r4, #8
    367a:	d562      	bpl.n	3742 <__aeabi_dadd+0x17a>
    367c:	0264      	lsls	r4, r4, #9
    367e:	0a65      	lsrs	r5, r4, #9
    3680:	2d00      	cmp	r5, #0
    3682:	d100      	bne.n	3686 <__aeabi_dadd+0xbe>
    3684:	e0df      	b.n	3846 <__aeabi_dadd+0x27e>
    3686:	0028      	movs	r0, r5
    3688:	f001 fd02 	bl	5090 <__clzsi2>
    368c:	0003      	movs	r3, r0
    368e:	3b08      	subs	r3, #8
    3690:	2b1f      	cmp	r3, #31
    3692:	dd00      	ble.n	3696 <__aeabi_dadd+0xce>
    3694:	e0d2      	b.n	383c <__aeabi_dadd+0x274>
    3696:	2220      	movs	r2, #32
    3698:	003c      	movs	r4, r7
    369a:	1ad2      	subs	r2, r2, r3
    369c:	409d      	lsls	r5, r3
    369e:	40d4      	lsrs	r4, r2
    36a0:	409f      	lsls	r7, r3
    36a2:	4325      	orrs	r5, r4
    36a4:	429e      	cmp	r6, r3
    36a6:	dd00      	ble.n	36aa <__aeabi_dadd+0xe2>
    36a8:	e0c4      	b.n	3834 <__aeabi_dadd+0x26c>
    36aa:	1b9e      	subs	r6, r3, r6
    36ac:	1c73      	adds	r3, r6, #1
    36ae:	2b1f      	cmp	r3, #31
    36b0:	dd00      	ble.n	36b4 <__aeabi_dadd+0xec>
    36b2:	e0f1      	b.n	3898 <__aeabi_dadd+0x2d0>
    36b4:	2220      	movs	r2, #32
    36b6:	0038      	movs	r0, r7
    36b8:	0029      	movs	r1, r5
    36ba:	1ad2      	subs	r2, r2, r3
    36bc:	40d8      	lsrs	r0, r3
    36be:	4091      	lsls	r1, r2
    36c0:	4097      	lsls	r7, r2
    36c2:	002c      	movs	r4, r5
    36c4:	4301      	orrs	r1, r0
    36c6:	1e78      	subs	r0, r7, #1
    36c8:	4187      	sbcs	r7, r0
    36ca:	40dc      	lsrs	r4, r3
    36cc:	2600      	movs	r6, #0
    36ce:	430f      	orrs	r7, r1
    36d0:	077b      	lsls	r3, r7, #29
    36d2:	d009      	beq.n	36e8 <__aeabi_dadd+0x120>
    36d4:	230f      	movs	r3, #15
    36d6:	403b      	ands	r3, r7
    36d8:	2b04      	cmp	r3, #4
    36da:	d005      	beq.n	36e8 <__aeabi_dadd+0x120>
    36dc:	1d3b      	adds	r3, r7, #4
    36de:	42bb      	cmp	r3, r7
    36e0:	41bf      	sbcs	r7, r7
    36e2:	427f      	negs	r7, r7
    36e4:	19e4      	adds	r4, r4, r7
    36e6:	001f      	movs	r7, r3
    36e8:	0223      	lsls	r3, r4, #8
    36ea:	d52c      	bpl.n	3746 <__aeabi_dadd+0x17e>
    36ec:	4b96      	ldr	r3, [pc, #600]	; (3948 <__aeabi_dadd+0x380>)
    36ee:	3601      	adds	r6, #1
    36f0:	429e      	cmp	r6, r3
    36f2:	d100      	bne.n	36f6 <__aeabi_dadd+0x12e>
    36f4:	e09a      	b.n	382c <__aeabi_dadd+0x264>
    36f6:	4645      	mov	r5, r8
    36f8:	4b94      	ldr	r3, [pc, #592]	; (394c <__aeabi_dadd+0x384>)
    36fa:	08ff      	lsrs	r7, r7, #3
    36fc:	401c      	ands	r4, r3
    36fe:	0760      	lsls	r0, r4, #29
    3700:	0576      	lsls	r6, r6, #21
    3702:	0264      	lsls	r4, r4, #9
    3704:	4307      	orrs	r7, r0
    3706:	0b24      	lsrs	r4, r4, #12
    3708:	0d76      	lsrs	r6, r6, #21
    370a:	2100      	movs	r1, #0
    370c:	0324      	lsls	r4, r4, #12
    370e:	0b23      	lsrs	r3, r4, #12
    3710:	0d0c      	lsrs	r4, r1, #20
    3712:	4a8f      	ldr	r2, [pc, #572]	; (3950 <__aeabi_dadd+0x388>)
    3714:	0524      	lsls	r4, r4, #20
    3716:	431c      	orrs	r4, r3
    3718:	4014      	ands	r4, r2
    371a:	0533      	lsls	r3, r6, #20
    371c:	4323      	orrs	r3, r4
    371e:	005b      	lsls	r3, r3, #1
    3720:	07ed      	lsls	r5, r5, #31
    3722:	085b      	lsrs	r3, r3, #1
    3724:	432b      	orrs	r3, r5
    3726:	0038      	movs	r0, r7
    3728:	0019      	movs	r1, r3
    372a:	bc3c      	pop	{r2, r3, r4, r5}
    372c:	4690      	mov	r8, r2
    372e:	4699      	mov	r9, r3
    3730:	46a2      	mov	sl, r4
    3732:	46ab      	mov	fp, r5
    3734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3736:	4664      	mov	r4, ip
    3738:	4304      	orrs	r4, r0
    373a:	d100      	bne.n	373e <__aeabi_dadd+0x176>
    373c:	e211      	b.n	3b62 <__aeabi_dadd+0x59a>
    373e:	0004      	movs	r4, r0
    3740:	4667      	mov	r7, ip
    3742:	077b      	lsls	r3, r7, #29
    3744:	d1c6      	bne.n	36d4 <__aeabi_dadd+0x10c>
    3746:	4645      	mov	r5, r8
    3748:	0760      	lsls	r0, r4, #29
    374a:	08ff      	lsrs	r7, r7, #3
    374c:	4307      	orrs	r7, r0
    374e:	08e4      	lsrs	r4, r4, #3
    3750:	4b7d      	ldr	r3, [pc, #500]	; (3948 <__aeabi_dadd+0x380>)
    3752:	429e      	cmp	r6, r3
    3754:	d030      	beq.n	37b8 <__aeabi_dadd+0x1f0>
    3756:	0324      	lsls	r4, r4, #12
    3758:	0576      	lsls	r6, r6, #21
    375a:	0b24      	lsrs	r4, r4, #12
    375c:	0d76      	lsrs	r6, r6, #21
    375e:	e7d4      	b.n	370a <__aeabi_dadd+0x142>
    3760:	1a33      	subs	r3, r6, r0
    3762:	469a      	mov	sl, r3
    3764:	2b00      	cmp	r3, #0
    3766:	dd78      	ble.n	385a <__aeabi_dadd+0x292>
    3768:	2800      	cmp	r0, #0
    376a:	d031      	beq.n	37d0 <__aeabi_dadd+0x208>
    376c:	4876      	ldr	r0, [pc, #472]	; (3948 <__aeabi_dadd+0x380>)
    376e:	4286      	cmp	r6, r0
    3770:	d0ae      	beq.n	36d0 <__aeabi_dadd+0x108>
    3772:	2080      	movs	r0, #128	; 0x80
    3774:	0400      	lsls	r0, r0, #16
    3776:	4301      	orrs	r1, r0
    3778:	4653      	mov	r3, sl
    377a:	2b38      	cmp	r3, #56	; 0x38
    377c:	dc00      	bgt.n	3780 <__aeabi_dadd+0x1b8>
    377e:	e0e9      	b.n	3954 <__aeabi_dadd+0x38c>
    3780:	430a      	orrs	r2, r1
    3782:	1e51      	subs	r1, r2, #1
    3784:	418a      	sbcs	r2, r1
    3786:	2100      	movs	r1, #0
    3788:	19d2      	adds	r2, r2, r7
    378a:	42ba      	cmp	r2, r7
    378c:	41bf      	sbcs	r7, r7
    378e:	1909      	adds	r1, r1, r4
    3790:	427c      	negs	r4, r7
    3792:	0017      	movs	r7, r2
    3794:	190c      	adds	r4, r1, r4
    3796:	0223      	lsls	r3, r4, #8
    3798:	d5d3      	bpl.n	3742 <__aeabi_dadd+0x17a>
    379a:	4b6b      	ldr	r3, [pc, #428]	; (3948 <__aeabi_dadd+0x380>)
    379c:	3601      	adds	r6, #1
    379e:	429e      	cmp	r6, r3
    37a0:	d100      	bne.n	37a4 <__aeabi_dadd+0x1dc>
    37a2:	e13a      	b.n	3a1a <__aeabi_dadd+0x452>
    37a4:	2001      	movs	r0, #1
    37a6:	4b69      	ldr	r3, [pc, #420]	; (394c <__aeabi_dadd+0x384>)
    37a8:	401c      	ands	r4, r3
    37aa:	087b      	lsrs	r3, r7, #1
    37ac:	4007      	ands	r7, r0
    37ae:	431f      	orrs	r7, r3
    37b0:	07e0      	lsls	r0, r4, #31
    37b2:	4307      	orrs	r7, r0
    37b4:	0864      	lsrs	r4, r4, #1
    37b6:	e78b      	b.n	36d0 <__aeabi_dadd+0x108>
    37b8:	0023      	movs	r3, r4
    37ba:	433b      	orrs	r3, r7
    37bc:	d100      	bne.n	37c0 <__aeabi_dadd+0x1f8>
    37be:	e1cb      	b.n	3b58 <__aeabi_dadd+0x590>
    37c0:	2280      	movs	r2, #128	; 0x80
    37c2:	0312      	lsls	r2, r2, #12
    37c4:	4314      	orrs	r4, r2
    37c6:	0324      	lsls	r4, r4, #12
    37c8:	0b24      	lsrs	r4, r4, #12
    37ca:	e79e      	b.n	370a <__aeabi_dadd+0x142>
    37cc:	002e      	movs	r6, r5
    37ce:	e77f      	b.n	36d0 <__aeabi_dadd+0x108>
    37d0:	0008      	movs	r0, r1
    37d2:	4310      	orrs	r0, r2
    37d4:	d100      	bne.n	37d8 <__aeabi_dadd+0x210>
    37d6:	e0b4      	b.n	3942 <__aeabi_dadd+0x37a>
    37d8:	1e58      	subs	r0, r3, #1
    37da:	2800      	cmp	r0, #0
    37dc:	d000      	beq.n	37e0 <__aeabi_dadd+0x218>
    37de:	e0de      	b.n	399e <__aeabi_dadd+0x3d6>
    37e0:	18ba      	adds	r2, r7, r2
    37e2:	42ba      	cmp	r2, r7
    37e4:	419b      	sbcs	r3, r3
    37e6:	1864      	adds	r4, r4, r1
    37e8:	425b      	negs	r3, r3
    37ea:	18e4      	adds	r4, r4, r3
    37ec:	0017      	movs	r7, r2
    37ee:	2601      	movs	r6, #1
    37f0:	0223      	lsls	r3, r4, #8
    37f2:	d5a6      	bpl.n	3742 <__aeabi_dadd+0x17a>
    37f4:	2602      	movs	r6, #2
    37f6:	e7d5      	b.n	37a4 <__aeabi_dadd+0x1dc>
    37f8:	2d00      	cmp	r5, #0
    37fa:	d16e      	bne.n	38da <__aeabi_dadd+0x312>
    37fc:	1c70      	adds	r0, r6, #1
    37fe:	0540      	lsls	r0, r0, #21
    3800:	0d40      	lsrs	r0, r0, #21
    3802:	2801      	cmp	r0, #1
    3804:	dc00      	bgt.n	3808 <__aeabi_dadd+0x240>
    3806:	e0f9      	b.n	39fc <__aeabi_dadd+0x434>
    3808:	1ab8      	subs	r0, r7, r2
    380a:	4684      	mov	ip, r0
    380c:	4287      	cmp	r7, r0
    380e:	4180      	sbcs	r0, r0
    3810:	1ae5      	subs	r5, r4, r3
    3812:	4240      	negs	r0, r0
    3814:	1a2d      	subs	r5, r5, r0
    3816:	0228      	lsls	r0, r5, #8
    3818:	d400      	bmi.n	381c <__aeabi_dadd+0x254>
    381a:	e089      	b.n	3930 <__aeabi_dadd+0x368>
    381c:	1bd7      	subs	r7, r2, r7
    381e:	42ba      	cmp	r2, r7
    3820:	4192      	sbcs	r2, r2
    3822:	1b1c      	subs	r4, r3, r4
    3824:	4252      	negs	r2, r2
    3826:	1aa5      	subs	r5, r4, r2
    3828:	46d8      	mov	r8, fp
    382a:	e729      	b.n	3680 <__aeabi_dadd+0xb8>
    382c:	4645      	mov	r5, r8
    382e:	2400      	movs	r4, #0
    3830:	2700      	movs	r7, #0
    3832:	e76a      	b.n	370a <__aeabi_dadd+0x142>
    3834:	4c45      	ldr	r4, [pc, #276]	; (394c <__aeabi_dadd+0x384>)
    3836:	1af6      	subs	r6, r6, r3
    3838:	402c      	ands	r4, r5
    383a:	e749      	b.n	36d0 <__aeabi_dadd+0x108>
    383c:	003d      	movs	r5, r7
    383e:	3828      	subs	r0, #40	; 0x28
    3840:	4085      	lsls	r5, r0
    3842:	2700      	movs	r7, #0
    3844:	e72e      	b.n	36a4 <__aeabi_dadd+0xdc>
    3846:	0038      	movs	r0, r7
    3848:	f001 fc22 	bl	5090 <__clzsi2>
    384c:	3020      	adds	r0, #32
    384e:	e71d      	b.n	368c <__aeabi_dadd+0xc4>
    3850:	430a      	orrs	r2, r1
    3852:	1e51      	subs	r1, r2, #1
    3854:	418a      	sbcs	r2, r1
    3856:	2100      	movs	r1, #0
    3858:	e707      	b.n	366a <__aeabi_dadd+0xa2>
    385a:	2b00      	cmp	r3, #0
    385c:	d000      	beq.n	3860 <__aeabi_dadd+0x298>
    385e:	e0f3      	b.n	3a48 <__aeabi_dadd+0x480>
    3860:	1c70      	adds	r0, r6, #1
    3862:	0543      	lsls	r3, r0, #21
    3864:	0d5b      	lsrs	r3, r3, #21
    3866:	2b01      	cmp	r3, #1
    3868:	dc00      	bgt.n	386c <__aeabi_dadd+0x2a4>
    386a:	e0ad      	b.n	39c8 <__aeabi_dadd+0x400>
    386c:	4b36      	ldr	r3, [pc, #216]	; (3948 <__aeabi_dadd+0x380>)
    386e:	4298      	cmp	r0, r3
    3870:	d100      	bne.n	3874 <__aeabi_dadd+0x2ac>
    3872:	e0d1      	b.n	3a18 <__aeabi_dadd+0x450>
    3874:	18ba      	adds	r2, r7, r2
    3876:	42ba      	cmp	r2, r7
    3878:	41bf      	sbcs	r7, r7
    387a:	1864      	adds	r4, r4, r1
    387c:	427f      	negs	r7, r7
    387e:	19e4      	adds	r4, r4, r7
    3880:	07e7      	lsls	r7, r4, #31
    3882:	0852      	lsrs	r2, r2, #1
    3884:	4317      	orrs	r7, r2
    3886:	0864      	lsrs	r4, r4, #1
    3888:	0006      	movs	r6, r0
    388a:	e721      	b.n	36d0 <__aeabi_dadd+0x108>
    388c:	482e      	ldr	r0, [pc, #184]	; (3948 <__aeabi_dadd+0x380>)
    388e:	4285      	cmp	r5, r0
    3890:	d100      	bne.n	3894 <__aeabi_dadd+0x2cc>
    3892:	e093      	b.n	39bc <__aeabi_dadd+0x3f4>
    3894:	001d      	movs	r5, r3
    3896:	e6d0      	b.n	363a <__aeabi_dadd+0x72>
    3898:	0029      	movs	r1, r5
    389a:	3e1f      	subs	r6, #31
    389c:	40f1      	lsrs	r1, r6
    389e:	2b20      	cmp	r3, #32
    38a0:	d100      	bne.n	38a4 <__aeabi_dadd+0x2dc>
    38a2:	e08d      	b.n	39c0 <__aeabi_dadd+0x3f8>
    38a4:	2240      	movs	r2, #64	; 0x40
    38a6:	1ad3      	subs	r3, r2, r3
    38a8:	409d      	lsls	r5, r3
    38aa:	432f      	orrs	r7, r5
    38ac:	1e7d      	subs	r5, r7, #1
    38ae:	41af      	sbcs	r7, r5
    38b0:	2400      	movs	r4, #0
    38b2:	430f      	orrs	r7, r1
    38b4:	2600      	movs	r6, #0
    38b6:	e744      	b.n	3742 <__aeabi_dadd+0x17a>
    38b8:	002b      	movs	r3, r5
    38ba:	0008      	movs	r0, r1
    38bc:	3b20      	subs	r3, #32
    38be:	40d8      	lsrs	r0, r3
    38c0:	0003      	movs	r3, r0
    38c2:	2d20      	cmp	r5, #32
    38c4:	d100      	bne.n	38c8 <__aeabi_dadd+0x300>
    38c6:	e07d      	b.n	39c4 <__aeabi_dadd+0x3fc>
    38c8:	2040      	movs	r0, #64	; 0x40
    38ca:	1b45      	subs	r5, r0, r5
    38cc:	40a9      	lsls	r1, r5
    38ce:	430a      	orrs	r2, r1
    38d0:	1e51      	subs	r1, r2, #1
    38d2:	418a      	sbcs	r2, r1
    38d4:	2100      	movs	r1, #0
    38d6:	431a      	orrs	r2, r3
    38d8:	e6c7      	b.n	366a <__aeabi_dadd+0xa2>
    38da:	2e00      	cmp	r6, #0
    38dc:	d050      	beq.n	3980 <__aeabi_dadd+0x3b8>
    38de:	4e1a      	ldr	r6, [pc, #104]	; (3948 <__aeabi_dadd+0x380>)
    38e0:	42b0      	cmp	r0, r6
    38e2:	d057      	beq.n	3994 <__aeabi_dadd+0x3cc>
    38e4:	2680      	movs	r6, #128	; 0x80
    38e6:	426b      	negs	r3, r5
    38e8:	4699      	mov	r9, r3
    38ea:	0436      	lsls	r6, r6, #16
    38ec:	4334      	orrs	r4, r6
    38ee:	464b      	mov	r3, r9
    38f0:	2b38      	cmp	r3, #56	; 0x38
    38f2:	dd00      	ble.n	38f6 <__aeabi_dadd+0x32e>
    38f4:	e0d6      	b.n	3aa4 <__aeabi_dadd+0x4dc>
    38f6:	2b1f      	cmp	r3, #31
    38f8:	dd00      	ble.n	38fc <__aeabi_dadd+0x334>
    38fa:	e135      	b.n	3b68 <__aeabi_dadd+0x5a0>
    38fc:	2620      	movs	r6, #32
    38fe:	1af5      	subs	r5, r6, r3
    3900:	0026      	movs	r6, r4
    3902:	40ae      	lsls	r6, r5
    3904:	46b2      	mov	sl, r6
    3906:	003e      	movs	r6, r7
    3908:	40de      	lsrs	r6, r3
    390a:	46ac      	mov	ip, r5
    390c:	0035      	movs	r5, r6
    390e:	4656      	mov	r6, sl
    3910:	432e      	orrs	r6, r5
    3912:	4665      	mov	r5, ip
    3914:	40af      	lsls	r7, r5
    3916:	1e7d      	subs	r5, r7, #1
    3918:	41af      	sbcs	r7, r5
    391a:	40dc      	lsrs	r4, r3
    391c:	4337      	orrs	r7, r6
    391e:	1bd7      	subs	r7, r2, r7
    3920:	42ba      	cmp	r2, r7
    3922:	4192      	sbcs	r2, r2
    3924:	1b0c      	subs	r4, r1, r4
    3926:	4252      	negs	r2, r2
    3928:	1aa4      	subs	r4, r4, r2
    392a:	0006      	movs	r6, r0
    392c:	46d8      	mov	r8, fp
    392e:	e6a3      	b.n	3678 <__aeabi_dadd+0xb0>
    3930:	4664      	mov	r4, ip
    3932:	4667      	mov	r7, ip
    3934:	432c      	orrs	r4, r5
    3936:	d000      	beq.n	393a <__aeabi_dadd+0x372>
    3938:	e6a2      	b.n	3680 <__aeabi_dadd+0xb8>
    393a:	2500      	movs	r5, #0
    393c:	2600      	movs	r6, #0
    393e:	2700      	movs	r7, #0
    3940:	e706      	b.n	3750 <__aeabi_dadd+0x188>
    3942:	001e      	movs	r6, r3
    3944:	e6c4      	b.n	36d0 <__aeabi_dadd+0x108>
    3946:	46c0      	nop			; (mov r8, r8)
    3948:	000007ff 	.word	0x000007ff
    394c:	ff7fffff 	.word	0xff7fffff
    3950:	800fffff 	.word	0x800fffff
    3954:	2b1f      	cmp	r3, #31
    3956:	dc63      	bgt.n	3a20 <__aeabi_dadd+0x458>
    3958:	2020      	movs	r0, #32
    395a:	1ac3      	subs	r3, r0, r3
    395c:	0008      	movs	r0, r1
    395e:	4098      	lsls	r0, r3
    3960:	469c      	mov	ip, r3
    3962:	4683      	mov	fp, r0
    3964:	4653      	mov	r3, sl
    3966:	0010      	movs	r0, r2
    3968:	40d8      	lsrs	r0, r3
    396a:	0003      	movs	r3, r0
    396c:	4658      	mov	r0, fp
    396e:	4318      	orrs	r0, r3
    3970:	4663      	mov	r3, ip
    3972:	409a      	lsls	r2, r3
    3974:	1e53      	subs	r3, r2, #1
    3976:	419a      	sbcs	r2, r3
    3978:	4653      	mov	r3, sl
    397a:	4302      	orrs	r2, r0
    397c:	40d9      	lsrs	r1, r3
    397e:	e703      	b.n	3788 <__aeabi_dadd+0x1c0>
    3980:	0026      	movs	r6, r4
    3982:	433e      	orrs	r6, r7
    3984:	d006      	beq.n	3994 <__aeabi_dadd+0x3cc>
    3986:	43eb      	mvns	r3, r5
    3988:	4699      	mov	r9, r3
    398a:	2b00      	cmp	r3, #0
    398c:	d0c7      	beq.n	391e <__aeabi_dadd+0x356>
    398e:	4e94      	ldr	r6, [pc, #592]	; (3be0 <__aeabi_dadd+0x618>)
    3990:	42b0      	cmp	r0, r6
    3992:	d1ac      	bne.n	38ee <__aeabi_dadd+0x326>
    3994:	000c      	movs	r4, r1
    3996:	0017      	movs	r7, r2
    3998:	0006      	movs	r6, r0
    399a:	46d8      	mov	r8, fp
    399c:	e698      	b.n	36d0 <__aeabi_dadd+0x108>
    399e:	4b90      	ldr	r3, [pc, #576]	; (3be0 <__aeabi_dadd+0x618>)
    39a0:	459a      	cmp	sl, r3
    39a2:	d00b      	beq.n	39bc <__aeabi_dadd+0x3f4>
    39a4:	4682      	mov	sl, r0
    39a6:	e6e7      	b.n	3778 <__aeabi_dadd+0x1b0>
    39a8:	2800      	cmp	r0, #0
    39aa:	d000      	beq.n	39ae <__aeabi_dadd+0x3e6>
    39ac:	e09e      	b.n	3aec <__aeabi_dadd+0x524>
    39ae:	0018      	movs	r0, r3
    39b0:	4310      	orrs	r0, r2
    39b2:	d100      	bne.n	39b6 <__aeabi_dadd+0x3ee>
    39b4:	e0e9      	b.n	3b8a <__aeabi_dadd+0x5c2>
    39b6:	001c      	movs	r4, r3
    39b8:	0017      	movs	r7, r2
    39ba:	46d8      	mov	r8, fp
    39bc:	4e88      	ldr	r6, [pc, #544]	; (3be0 <__aeabi_dadd+0x618>)
    39be:	e687      	b.n	36d0 <__aeabi_dadd+0x108>
    39c0:	2500      	movs	r5, #0
    39c2:	e772      	b.n	38aa <__aeabi_dadd+0x2e2>
    39c4:	2100      	movs	r1, #0
    39c6:	e782      	b.n	38ce <__aeabi_dadd+0x306>
    39c8:	0023      	movs	r3, r4
    39ca:	433b      	orrs	r3, r7
    39cc:	2e00      	cmp	r6, #0
    39ce:	d000      	beq.n	39d2 <__aeabi_dadd+0x40a>
    39d0:	e0ab      	b.n	3b2a <__aeabi_dadd+0x562>
    39d2:	2b00      	cmp	r3, #0
    39d4:	d100      	bne.n	39d8 <__aeabi_dadd+0x410>
    39d6:	e0e7      	b.n	3ba8 <__aeabi_dadd+0x5e0>
    39d8:	000b      	movs	r3, r1
    39da:	4313      	orrs	r3, r2
    39dc:	d100      	bne.n	39e0 <__aeabi_dadd+0x418>
    39de:	e677      	b.n	36d0 <__aeabi_dadd+0x108>
    39e0:	18ba      	adds	r2, r7, r2
    39e2:	42ba      	cmp	r2, r7
    39e4:	41bf      	sbcs	r7, r7
    39e6:	1864      	adds	r4, r4, r1
    39e8:	427f      	negs	r7, r7
    39ea:	19e4      	adds	r4, r4, r7
    39ec:	0223      	lsls	r3, r4, #8
    39ee:	d400      	bmi.n	39f2 <__aeabi_dadd+0x42a>
    39f0:	e0f2      	b.n	3bd8 <__aeabi_dadd+0x610>
    39f2:	4b7c      	ldr	r3, [pc, #496]	; (3be4 <__aeabi_dadd+0x61c>)
    39f4:	0017      	movs	r7, r2
    39f6:	401c      	ands	r4, r3
    39f8:	0006      	movs	r6, r0
    39fa:	e669      	b.n	36d0 <__aeabi_dadd+0x108>
    39fc:	0020      	movs	r0, r4
    39fe:	4338      	orrs	r0, r7
    3a00:	2e00      	cmp	r6, #0
    3a02:	d1d1      	bne.n	39a8 <__aeabi_dadd+0x3e0>
    3a04:	2800      	cmp	r0, #0
    3a06:	d15b      	bne.n	3ac0 <__aeabi_dadd+0x4f8>
    3a08:	001c      	movs	r4, r3
    3a0a:	4314      	orrs	r4, r2
    3a0c:	d100      	bne.n	3a10 <__aeabi_dadd+0x448>
    3a0e:	e0a8      	b.n	3b62 <__aeabi_dadd+0x59a>
    3a10:	001c      	movs	r4, r3
    3a12:	0017      	movs	r7, r2
    3a14:	46d8      	mov	r8, fp
    3a16:	e65b      	b.n	36d0 <__aeabi_dadd+0x108>
    3a18:	0006      	movs	r6, r0
    3a1a:	2400      	movs	r4, #0
    3a1c:	2700      	movs	r7, #0
    3a1e:	e697      	b.n	3750 <__aeabi_dadd+0x188>
    3a20:	4650      	mov	r0, sl
    3a22:	000b      	movs	r3, r1
    3a24:	3820      	subs	r0, #32
    3a26:	40c3      	lsrs	r3, r0
    3a28:	4699      	mov	r9, r3
    3a2a:	4653      	mov	r3, sl
    3a2c:	2b20      	cmp	r3, #32
    3a2e:	d100      	bne.n	3a32 <__aeabi_dadd+0x46a>
    3a30:	e095      	b.n	3b5e <__aeabi_dadd+0x596>
    3a32:	2340      	movs	r3, #64	; 0x40
    3a34:	4650      	mov	r0, sl
    3a36:	1a1b      	subs	r3, r3, r0
    3a38:	4099      	lsls	r1, r3
    3a3a:	430a      	orrs	r2, r1
    3a3c:	1e51      	subs	r1, r2, #1
    3a3e:	418a      	sbcs	r2, r1
    3a40:	464b      	mov	r3, r9
    3a42:	2100      	movs	r1, #0
    3a44:	431a      	orrs	r2, r3
    3a46:	e69f      	b.n	3788 <__aeabi_dadd+0x1c0>
    3a48:	2e00      	cmp	r6, #0
    3a4a:	d130      	bne.n	3aae <__aeabi_dadd+0x4e6>
    3a4c:	0026      	movs	r6, r4
    3a4e:	433e      	orrs	r6, r7
    3a50:	d067      	beq.n	3b22 <__aeabi_dadd+0x55a>
    3a52:	43db      	mvns	r3, r3
    3a54:	469a      	mov	sl, r3
    3a56:	2b00      	cmp	r3, #0
    3a58:	d01c      	beq.n	3a94 <__aeabi_dadd+0x4cc>
    3a5a:	4e61      	ldr	r6, [pc, #388]	; (3be0 <__aeabi_dadd+0x618>)
    3a5c:	42b0      	cmp	r0, r6
    3a5e:	d060      	beq.n	3b22 <__aeabi_dadd+0x55a>
    3a60:	4653      	mov	r3, sl
    3a62:	2b38      	cmp	r3, #56	; 0x38
    3a64:	dd00      	ble.n	3a68 <__aeabi_dadd+0x4a0>
    3a66:	e096      	b.n	3b96 <__aeabi_dadd+0x5ce>
    3a68:	2b1f      	cmp	r3, #31
    3a6a:	dd00      	ble.n	3a6e <__aeabi_dadd+0x4a6>
    3a6c:	e09f      	b.n	3bae <__aeabi_dadd+0x5e6>
    3a6e:	2620      	movs	r6, #32
    3a70:	1af3      	subs	r3, r6, r3
    3a72:	0026      	movs	r6, r4
    3a74:	409e      	lsls	r6, r3
    3a76:	469c      	mov	ip, r3
    3a78:	46b3      	mov	fp, r6
    3a7a:	4653      	mov	r3, sl
    3a7c:	003e      	movs	r6, r7
    3a7e:	40de      	lsrs	r6, r3
    3a80:	0033      	movs	r3, r6
    3a82:	465e      	mov	r6, fp
    3a84:	431e      	orrs	r6, r3
    3a86:	4663      	mov	r3, ip
    3a88:	409f      	lsls	r7, r3
    3a8a:	1e7b      	subs	r3, r7, #1
    3a8c:	419f      	sbcs	r7, r3
    3a8e:	4653      	mov	r3, sl
    3a90:	40dc      	lsrs	r4, r3
    3a92:	4337      	orrs	r7, r6
    3a94:	18bf      	adds	r7, r7, r2
    3a96:	4297      	cmp	r7, r2
    3a98:	4192      	sbcs	r2, r2
    3a9a:	1864      	adds	r4, r4, r1
    3a9c:	4252      	negs	r2, r2
    3a9e:	18a4      	adds	r4, r4, r2
    3aa0:	0006      	movs	r6, r0
    3aa2:	e678      	b.n	3796 <__aeabi_dadd+0x1ce>
    3aa4:	4327      	orrs	r7, r4
    3aa6:	1e7c      	subs	r4, r7, #1
    3aa8:	41a7      	sbcs	r7, r4
    3aaa:	2400      	movs	r4, #0
    3aac:	e737      	b.n	391e <__aeabi_dadd+0x356>
    3aae:	4e4c      	ldr	r6, [pc, #304]	; (3be0 <__aeabi_dadd+0x618>)
    3ab0:	42b0      	cmp	r0, r6
    3ab2:	d036      	beq.n	3b22 <__aeabi_dadd+0x55a>
    3ab4:	2680      	movs	r6, #128	; 0x80
    3ab6:	425b      	negs	r3, r3
    3ab8:	0436      	lsls	r6, r6, #16
    3aba:	469a      	mov	sl, r3
    3abc:	4334      	orrs	r4, r6
    3abe:	e7cf      	b.n	3a60 <__aeabi_dadd+0x498>
    3ac0:	0018      	movs	r0, r3
    3ac2:	4310      	orrs	r0, r2
    3ac4:	d100      	bne.n	3ac8 <__aeabi_dadd+0x500>
    3ac6:	e603      	b.n	36d0 <__aeabi_dadd+0x108>
    3ac8:	1ab8      	subs	r0, r7, r2
    3aca:	4684      	mov	ip, r0
    3acc:	4567      	cmp	r7, ip
    3ace:	41ad      	sbcs	r5, r5
    3ad0:	1ae0      	subs	r0, r4, r3
    3ad2:	426d      	negs	r5, r5
    3ad4:	1b40      	subs	r0, r0, r5
    3ad6:	0205      	lsls	r5, r0, #8
    3ad8:	d400      	bmi.n	3adc <__aeabi_dadd+0x514>
    3ada:	e62c      	b.n	3736 <__aeabi_dadd+0x16e>
    3adc:	1bd7      	subs	r7, r2, r7
    3ade:	42ba      	cmp	r2, r7
    3ae0:	4192      	sbcs	r2, r2
    3ae2:	1b1c      	subs	r4, r3, r4
    3ae4:	4252      	negs	r2, r2
    3ae6:	1aa4      	subs	r4, r4, r2
    3ae8:	46d8      	mov	r8, fp
    3aea:	e5f1      	b.n	36d0 <__aeabi_dadd+0x108>
    3aec:	0018      	movs	r0, r3
    3aee:	4310      	orrs	r0, r2
    3af0:	d100      	bne.n	3af4 <__aeabi_dadd+0x52c>
    3af2:	e763      	b.n	39bc <__aeabi_dadd+0x3f4>
    3af4:	08f8      	lsrs	r0, r7, #3
    3af6:	0767      	lsls	r7, r4, #29
    3af8:	4307      	orrs	r7, r0
    3afa:	2080      	movs	r0, #128	; 0x80
    3afc:	08e4      	lsrs	r4, r4, #3
    3afe:	0300      	lsls	r0, r0, #12
    3b00:	4204      	tst	r4, r0
    3b02:	d008      	beq.n	3b16 <__aeabi_dadd+0x54e>
    3b04:	08dd      	lsrs	r5, r3, #3
    3b06:	4205      	tst	r5, r0
    3b08:	d105      	bne.n	3b16 <__aeabi_dadd+0x54e>
    3b0a:	08d2      	lsrs	r2, r2, #3
    3b0c:	0759      	lsls	r1, r3, #29
    3b0e:	4311      	orrs	r1, r2
    3b10:	000f      	movs	r7, r1
    3b12:	002c      	movs	r4, r5
    3b14:	46d8      	mov	r8, fp
    3b16:	0f7b      	lsrs	r3, r7, #29
    3b18:	00e4      	lsls	r4, r4, #3
    3b1a:	431c      	orrs	r4, r3
    3b1c:	00ff      	lsls	r7, r7, #3
    3b1e:	4e30      	ldr	r6, [pc, #192]	; (3be0 <__aeabi_dadd+0x618>)
    3b20:	e5d6      	b.n	36d0 <__aeabi_dadd+0x108>
    3b22:	000c      	movs	r4, r1
    3b24:	0017      	movs	r7, r2
    3b26:	0006      	movs	r6, r0
    3b28:	e5d2      	b.n	36d0 <__aeabi_dadd+0x108>
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d038      	beq.n	3ba0 <__aeabi_dadd+0x5d8>
    3b2e:	000b      	movs	r3, r1
    3b30:	4313      	orrs	r3, r2
    3b32:	d100      	bne.n	3b36 <__aeabi_dadd+0x56e>
    3b34:	e742      	b.n	39bc <__aeabi_dadd+0x3f4>
    3b36:	08f8      	lsrs	r0, r7, #3
    3b38:	0767      	lsls	r7, r4, #29
    3b3a:	4307      	orrs	r7, r0
    3b3c:	2080      	movs	r0, #128	; 0x80
    3b3e:	08e4      	lsrs	r4, r4, #3
    3b40:	0300      	lsls	r0, r0, #12
    3b42:	4204      	tst	r4, r0
    3b44:	d0e7      	beq.n	3b16 <__aeabi_dadd+0x54e>
    3b46:	08cb      	lsrs	r3, r1, #3
    3b48:	4203      	tst	r3, r0
    3b4a:	d1e4      	bne.n	3b16 <__aeabi_dadd+0x54e>
    3b4c:	08d2      	lsrs	r2, r2, #3
    3b4e:	0749      	lsls	r1, r1, #29
    3b50:	4311      	orrs	r1, r2
    3b52:	000f      	movs	r7, r1
    3b54:	001c      	movs	r4, r3
    3b56:	e7de      	b.n	3b16 <__aeabi_dadd+0x54e>
    3b58:	2700      	movs	r7, #0
    3b5a:	2400      	movs	r4, #0
    3b5c:	e5d5      	b.n	370a <__aeabi_dadd+0x142>
    3b5e:	2100      	movs	r1, #0
    3b60:	e76b      	b.n	3a3a <__aeabi_dadd+0x472>
    3b62:	2500      	movs	r5, #0
    3b64:	2700      	movs	r7, #0
    3b66:	e5f3      	b.n	3750 <__aeabi_dadd+0x188>
    3b68:	464e      	mov	r6, r9
    3b6a:	0025      	movs	r5, r4
    3b6c:	3e20      	subs	r6, #32
    3b6e:	40f5      	lsrs	r5, r6
    3b70:	464b      	mov	r3, r9
    3b72:	002e      	movs	r6, r5
    3b74:	2b20      	cmp	r3, #32
    3b76:	d02d      	beq.n	3bd4 <__aeabi_dadd+0x60c>
    3b78:	2540      	movs	r5, #64	; 0x40
    3b7a:	1aed      	subs	r5, r5, r3
    3b7c:	40ac      	lsls	r4, r5
    3b7e:	4327      	orrs	r7, r4
    3b80:	1e7c      	subs	r4, r7, #1
    3b82:	41a7      	sbcs	r7, r4
    3b84:	2400      	movs	r4, #0
    3b86:	4337      	orrs	r7, r6
    3b88:	e6c9      	b.n	391e <__aeabi_dadd+0x356>
    3b8a:	2480      	movs	r4, #128	; 0x80
    3b8c:	2500      	movs	r5, #0
    3b8e:	0324      	lsls	r4, r4, #12
    3b90:	4e13      	ldr	r6, [pc, #76]	; (3be0 <__aeabi_dadd+0x618>)
    3b92:	2700      	movs	r7, #0
    3b94:	e5dc      	b.n	3750 <__aeabi_dadd+0x188>
    3b96:	4327      	orrs	r7, r4
    3b98:	1e7c      	subs	r4, r7, #1
    3b9a:	41a7      	sbcs	r7, r4
    3b9c:	2400      	movs	r4, #0
    3b9e:	e779      	b.n	3a94 <__aeabi_dadd+0x4cc>
    3ba0:	000c      	movs	r4, r1
    3ba2:	0017      	movs	r7, r2
    3ba4:	4e0e      	ldr	r6, [pc, #56]	; (3be0 <__aeabi_dadd+0x618>)
    3ba6:	e593      	b.n	36d0 <__aeabi_dadd+0x108>
    3ba8:	000c      	movs	r4, r1
    3baa:	0017      	movs	r7, r2
    3bac:	e590      	b.n	36d0 <__aeabi_dadd+0x108>
    3bae:	4656      	mov	r6, sl
    3bb0:	0023      	movs	r3, r4
    3bb2:	3e20      	subs	r6, #32
    3bb4:	40f3      	lsrs	r3, r6
    3bb6:	4699      	mov	r9, r3
    3bb8:	4653      	mov	r3, sl
    3bba:	2b20      	cmp	r3, #32
    3bbc:	d00e      	beq.n	3bdc <__aeabi_dadd+0x614>
    3bbe:	2340      	movs	r3, #64	; 0x40
    3bc0:	4656      	mov	r6, sl
    3bc2:	1b9b      	subs	r3, r3, r6
    3bc4:	409c      	lsls	r4, r3
    3bc6:	4327      	orrs	r7, r4
    3bc8:	1e7c      	subs	r4, r7, #1
    3bca:	41a7      	sbcs	r7, r4
    3bcc:	464b      	mov	r3, r9
    3bce:	2400      	movs	r4, #0
    3bd0:	431f      	orrs	r7, r3
    3bd2:	e75f      	b.n	3a94 <__aeabi_dadd+0x4cc>
    3bd4:	2400      	movs	r4, #0
    3bd6:	e7d2      	b.n	3b7e <__aeabi_dadd+0x5b6>
    3bd8:	0017      	movs	r7, r2
    3bda:	e5b2      	b.n	3742 <__aeabi_dadd+0x17a>
    3bdc:	2400      	movs	r4, #0
    3bde:	e7f2      	b.n	3bc6 <__aeabi_dadd+0x5fe>
    3be0:	000007ff 	.word	0x000007ff
    3be4:	ff7fffff 	.word	0xff7fffff

00003be8 <__aeabi_ddiv>:
    3be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bea:	4657      	mov	r7, sl
    3bec:	4645      	mov	r5, r8
    3bee:	46de      	mov	lr, fp
    3bf0:	464e      	mov	r6, r9
    3bf2:	b5e0      	push	{r5, r6, r7, lr}
    3bf4:	004c      	lsls	r4, r1, #1
    3bf6:	030e      	lsls	r6, r1, #12
    3bf8:	b087      	sub	sp, #28
    3bfa:	4683      	mov	fp, r0
    3bfc:	4692      	mov	sl, r2
    3bfe:	001d      	movs	r5, r3
    3c00:	4680      	mov	r8, r0
    3c02:	0b36      	lsrs	r6, r6, #12
    3c04:	0d64      	lsrs	r4, r4, #21
    3c06:	0fcf      	lsrs	r7, r1, #31
    3c08:	2c00      	cmp	r4, #0
    3c0a:	d04f      	beq.n	3cac <__aeabi_ddiv+0xc4>
    3c0c:	4b6f      	ldr	r3, [pc, #444]	; (3dcc <__aeabi_ddiv+0x1e4>)
    3c0e:	429c      	cmp	r4, r3
    3c10:	d035      	beq.n	3c7e <__aeabi_ddiv+0x96>
    3c12:	2380      	movs	r3, #128	; 0x80
    3c14:	0f42      	lsrs	r2, r0, #29
    3c16:	041b      	lsls	r3, r3, #16
    3c18:	00f6      	lsls	r6, r6, #3
    3c1a:	4313      	orrs	r3, r2
    3c1c:	4333      	orrs	r3, r6
    3c1e:	4699      	mov	r9, r3
    3c20:	00c3      	lsls	r3, r0, #3
    3c22:	4698      	mov	r8, r3
    3c24:	4b6a      	ldr	r3, [pc, #424]	; (3dd0 <__aeabi_ddiv+0x1e8>)
    3c26:	2600      	movs	r6, #0
    3c28:	469c      	mov	ip, r3
    3c2a:	2300      	movs	r3, #0
    3c2c:	4464      	add	r4, ip
    3c2e:	9303      	str	r3, [sp, #12]
    3c30:	032b      	lsls	r3, r5, #12
    3c32:	0b1b      	lsrs	r3, r3, #12
    3c34:	469b      	mov	fp, r3
    3c36:	006b      	lsls	r3, r5, #1
    3c38:	0fed      	lsrs	r5, r5, #31
    3c3a:	4650      	mov	r0, sl
    3c3c:	0d5b      	lsrs	r3, r3, #21
    3c3e:	9501      	str	r5, [sp, #4]
    3c40:	d05e      	beq.n	3d00 <__aeabi_ddiv+0x118>
    3c42:	4a62      	ldr	r2, [pc, #392]	; (3dcc <__aeabi_ddiv+0x1e4>)
    3c44:	4293      	cmp	r3, r2
    3c46:	d053      	beq.n	3cf0 <__aeabi_ddiv+0x108>
    3c48:	465a      	mov	r2, fp
    3c4a:	00d1      	lsls	r1, r2, #3
    3c4c:	2280      	movs	r2, #128	; 0x80
    3c4e:	0f40      	lsrs	r0, r0, #29
    3c50:	0412      	lsls	r2, r2, #16
    3c52:	4302      	orrs	r2, r0
    3c54:	430a      	orrs	r2, r1
    3c56:	4693      	mov	fp, r2
    3c58:	4652      	mov	r2, sl
    3c5a:	00d1      	lsls	r1, r2, #3
    3c5c:	4a5c      	ldr	r2, [pc, #368]	; (3dd0 <__aeabi_ddiv+0x1e8>)
    3c5e:	4694      	mov	ip, r2
    3c60:	2200      	movs	r2, #0
    3c62:	4463      	add	r3, ip
    3c64:	0038      	movs	r0, r7
    3c66:	4068      	eors	r0, r5
    3c68:	4684      	mov	ip, r0
    3c6a:	9002      	str	r0, [sp, #8]
    3c6c:	1ae4      	subs	r4, r4, r3
    3c6e:	4316      	orrs	r6, r2
    3c70:	2e0f      	cmp	r6, #15
    3c72:	d900      	bls.n	3c76 <__aeabi_ddiv+0x8e>
    3c74:	e0b4      	b.n	3de0 <__aeabi_ddiv+0x1f8>
    3c76:	4b57      	ldr	r3, [pc, #348]	; (3dd4 <__aeabi_ddiv+0x1ec>)
    3c78:	00b6      	lsls	r6, r6, #2
    3c7a:	599b      	ldr	r3, [r3, r6]
    3c7c:	469f      	mov	pc, r3
    3c7e:	0003      	movs	r3, r0
    3c80:	4333      	orrs	r3, r6
    3c82:	4699      	mov	r9, r3
    3c84:	d16c      	bne.n	3d60 <__aeabi_ddiv+0x178>
    3c86:	2300      	movs	r3, #0
    3c88:	4698      	mov	r8, r3
    3c8a:	3302      	adds	r3, #2
    3c8c:	2608      	movs	r6, #8
    3c8e:	9303      	str	r3, [sp, #12]
    3c90:	e7ce      	b.n	3c30 <__aeabi_ddiv+0x48>
    3c92:	46cb      	mov	fp, r9
    3c94:	4641      	mov	r1, r8
    3c96:	9a03      	ldr	r2, [sp, #12]
    3c98:	9701      	str	r7, [sp, #4]
    3c9a:	2a02      	cmp	r2, #2
    3c9c:	d165      	bne.n	3d6a <__aeabi_ddiv+0x182>
    3c9e:	9b01      	ldr	r3, [sp, #4]
    3ca0:	4c4a      	ldr	r4, [pc, #296]	; (3dcc <__aeabi_ddiv+0x1e4>)
    3ca2:	469c      	mov	ip, r3
    3ca4:	2300      	movs	r3, #0
    3ca6:	2200      	movs	r2, #0
    3ca8:	4698      	mov	r8, r3
    3caa:	e06b      	b.n	3d84 <__aeabi_ddiv+0x19c>
    3cac:	0003      	movs	r3, r0
    3cae:	4333      	orrs	r3, r6
    3cb0:	4699      	mov	r9, r3
    3cb2:	d04e      	beq.n	3d52 <__aeabi_ddiv+0x16a>
    3cb4:	2e00      	cmp	r6, #0
    3cb6:	d100      	bne.n	3cba <__aeabi_ddiv+0xd2>
    3cb8:	e1bc      	b.n	4034 <__aeabi_ddiv+0x44c>
    3cba:	0030      	movs	r0, r6
    3cbc:	f001 f9e8 	bl	5090 <__clzsi2>
    3cc0:	0003      	movs	r3, r0
    3cc2:	3b0b      	subs	r3, #11
    3cc4:	2b1c      	cmp	r3, #28
    3cc6:	dd00      	ble.n	3cca <__aeabi_ddiv+0xe2>
    3cc8:	e1ac      	b.n	4024 <__aeabi_ddiv+0x43c>
    3cca:	221d      	movs	r2, #29
    3ccc:	1ad3      	subs	r3, r2, r3
    3cce:	465a      	mov	r2, fp
    3cd0:	0001      	movs	r1, r0
    3cd2:	40da      	lsrs	r2, r3
    3cd4:	3908      	subs	r1, #8
    3cd6:	408e      	lsls	r6, r1
    3cd8:	0013      	movs	r3, r2
    3cda:	4333      	orrs	r3, r6
    3cdc:	4699      	mov	r9, r3
    3cde:	465b      	mov	r3, fp
    3ce0:	408b      	lsls	r3, r1
    3ce2:	4698      	mov	r8, r3
    3ce4:	2300      	movs	r3, #0
    3ce6:	4c3c      	ldr	r4, [pc, #240]	; (3dd8 <__aeabi_ddiv+0x1f0>)
    3ce8:	2600      	movs	r6, #0
    3cea:	1a24      	subs	r4, r4, r0
    3cec:	9303      	str	r3, [sp, #12]
    3cee:	e79f      	b.n	3c30 <__aeabi_ddiv+0x48>
    3cf0:	4651      	mov	r1, sl
    3cf2:	465a      	mov	r2, fp
    3cf4:	4311      	orrs	r1, r2
    3cf6:	d129      	bne.n	3d4c <__aeabi_ddiv+0x164>
    3cf8:	2200      	movs	r2, #0
    3cfa:	4693      	mov	fp, r2
    3cfc:	3202      	adds	r2, #2
    3cfe:	e7b1      	b.n	3c64 <__aeabi_ddiv+0x7c>
    3d00:	4659      	mov	r1, fp
    3d02:	4301      	orrs	r1, r0
    3d04:	d01e      	beq.n	3d44 <__aeabi_ddiv+0x15c>
    3d06:	465b      	mov	r3, fp
    3d08:	2b00      	cmp	r3, #0
    3d0a:	d100      	bne.n	3d0e <__aeabi_ddiv+0x126>
    3d0c:	e19e      	b.n	404c <__aeabi_ddiv+0x464>
    3d0e:	4658      	mov	r0, fp
    3d10:	f001 f9be 	bl	5090 <__clzsi2>
    3d14:	0003      	movs	r3, r0
    3d16:	3b0b      	subs	r3, #11
    3d18:	2b1c      	cmp	r3, #28
    3d1a:	dd00      	ble.n	3d1e <__aeabi_ddiv+0x136>
    3d1c:	e18f      	b.n	403e <__aeabi_ddiv+0x456>
    3d1e:	0002      	movs	r2, r0
    3d20:	4659      	mov	r1, fp
    3d22:	3a08      	subs	r2, #8
    3d24:	4091      	lsls	r1, r2
    3d26:	468b      	mov	fp, r1
    3d28:	211d      	movs	r1, #29
    3d2a:	1acb      	subs	r3, r1, r3
    3d2c:	4651      	mov	r1, sl
    3d2e:	40d9      	lsrs	r1, r3
    3d30:	000b      	movs	r3, r1
    3d32:	4659      	mov	r1, fp
    3d34:	430b      	orrs	r3, r1
    3d36:	4651      	mov	r1, sl
    3d38:	469b      	mov	fp, r3
    3d3a:	4091      	lsls	r1, r2
    3d3c:	4b26      	ldr	r3, [pc, #152]	; (3dd8 <__aeabi_ddiv+0x1f0>)
    3d3e:	2200      	movs	r2, #0
    3d40:	1a1b      	subs	r3, r3, r0
    3d42:	e78f      	b.n	3c64 <__aeabi_ddiv+0x7c>
    3d44:	2300      	movs	r3, #0
    3d46:	2201      	movs	r2, #1
    3d48:	469b      	mov	fp, r3
    3d4a:	e78b      	b.n	3c64 <__aeabi_ddiv+0x7c>
    3d4c:	4651      	mov	r1, sl
    3d4e:	2203      	movs	r2, #3
    3d50:	e788      	b.n	3c64 <__aeabi_ddiv+0x7c>
    3d52:	2300      	movs	r3, #0
    3d54:	4698      	mov	r8, r3
    3d56:	3301      	adds	r3, #1
    3d58:	2604      	movs	r6, #4
    3d5a:	2400      	movs	r4, #0
    3d5c:	9303      	str	r3, [sp, #12]
    3d5e:	e767      	b.n	3c30 <__aeabi_ddiv+0x48>
    3d60:	2303      	movs	r3, #3
    3d62:	46b1      	mov	r9, r6
    3d64:	9303      	str	r3, [sp, #12]
    3d66:	260c      	movs	r6, #12
    3d68:	e762      	b.n	3c30 <__aeabi_ddiv+0x48>
    3d6a:	2a03      	cmp	r2, #3
    3d6c:	d100      	bne.n	3d70 <__aeabi_ddiv+0x188>
    3d6e:	e25c      	b.n	422a <__aeabi_ddiv+0x642>
    3d70:	9b01      	ldr	r3, [sp, #4]
    3d72:	2a01      	cmp	r2, #1
    3d74:	d000      	beq.n	3d78 <__aeabi_ddiv+0x190>
    3d76:	e1e4      	b.n	4142 <__aeabi_ddiv+0x55a>
    3d78:	4013      	ands	r3, r2
    3d7a:	469c      	mov	ip, r3
    3d7c:	2300      	movs	r3, #0
    3d7e:	2400      	movs	r4, #0
    3d80:	2200      	movs	r2, #0
    3d82:	4698      	mov	r8, r3
    3d84:	2100      	movs	r1, #0
    3d86:	0312      	lsls	r2, r2, #12
    3d88:	0b13      	lsrs	r3, r2, #12
    3d8a:	0d0a      	lsrs	r2, r1, #20
    3d8c:	0512      	lsls	r2, r2, #20
    3d8e:	431a      	orrs	r2, r3
    3d90:	0523      	lsls	r3, r4, #20
    3d92:	4c12      	ldr	r4, [pc, #72]	; (3ddc <__aeabi_ddiv+0x1f4>)
    3d94:	4640      	mov	r0, r8
    3d96:	4022      	ands	r2, r4
    3d98:	4313      	orrs	r3, r2
    3d9a:	4662      	mov	r2, ip
    3d9c:	005b      	lsls	r3, r3, #1
    3d9e:	07d2      	lsls	r2, r2, #31
    3da0:	085b      	lsrs	r3, r3, #1
    3da2:	4313      	orrs	r3, r2
    3da4:	0019      	movs	r1, r3
    3da6:	b007      	add	sp, #28
    3da8:	bc3c      	pop	{r2, r3, r4, r5}
    3daa:	4690      	mov	r8, r2
    3dac:	4699      	mov	r9, r3
    3dae:	46a2      	mov	sl, r4
    3db0:	46ab      	mov	fp, r5
    3db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3db4:	2300      	movs	r3, #0
    3db6:	2280      	movs	r2, #128	; 0x80
    3db8:	469c      	mov	ip, r3
    3dba:	0312      	lsls	r2, r2, #12
    3dbc:	4698      	mov	r8, r3
    3dbe:	4c03      	ldr	r4, [pc, #12]	; (3dcc <__aeabi_ddiv+0x1e4>)
    3dc0:	e7e0      	b.n	3d84 <__aeabi_ddiv+0x19c>
    3dc2:	2300      	movs	r3, #0
    3dc4:	4c01      	ldr	r4, [pc, #4]	; (3dcc <__aeabi_ddiv+0x1e4>)
    3dc6:	2200      	movs	r2, #0
    3dc8:	4698      	mov	r8, r3
    3dca:	e7db      	b.n	3d84 <__aeabi_ddiv+0x19c>
    3dcc:	000007ff 	.word	0x000007ff
    3dd0:	fffffc01 	.word	0xfffffc01
    3dd4:	000052e8 	.word	0x000052e8
    3dd8:	fffffc0d 	.word	0xfffffc0d
    3ddc:	800fffff 	.word	0x800fffff
    3de0:	45d9      	cmp	r9, fp
    3de2:	d900      	bls.n	3de6 <__aeabi_ddiv+0x1fe>
    3de4:	e139      	b.n	405a <__aeabi_ddiv+0x472>
    3de6:	d100      	bne.n	3dea <__aeabi_ddiv+0x202>
    3de8:	e134      	b.n	4054 <__aeabi_ddiv+0x46c>
    3dea:	2300      	movs	r3, #0
    3dec:	4646      	mov	r6, r8
    3dee:	464d      	mov	r5, r9
    3df0:	469a      	mov	sl, r3
    3df2:	3c01      	subs	r4, #1
    3df4:	465b      	mov	r3, fp
    3df6:	0e0a      	lsrs	r2, r1, #24
    3df8:	021b      	lsls	r3, r3, #8
    3dfa:	431a      	orrs	r2, r3
    3dfc:	020b      	lsls	r3, r1, #8
    3dfe:	0c17      	lsrs	r7, r2, #16
    3e00:	9303      	str	r3, [sp, #12]
    3e02:	0413      	lsls	r3, r2, #16
    3e04:	0c1b      	lsrs	r3, r3, #16
    3e06:	0039      	movs	r1, r7
    3e08:	0028      	movs	r0, r5
    3e0a:	4690      	mov	r8, r2
    3e0c:	9301      	str	r3, [sp, #4]
    3e0e:	f7ff fa45 	bl	329c <__udivsi3>
    3e12:	0002      	movs	r2, r0
    3e14:	9b01      	ldr	r3, [sp, #4]
    3e16:	4683      	mov	fp, r0
    3e18:	435a      	muls	r2, r3
    3e1a:	0028      	movs	r0, r5
    3e1c:	0039      	movs	r1, r7
    3e1e:	4691      	mov	r9, r2
    3e20:	f7ff fac2 	bl	33a8 <__aeabi_uidivmod>
    3e24:	0c35      	lsrs	r5, r6, #16
    3e26:	0409      	lsls	r1, r1, #16
    3e28:	430d      	orrs	r5, r1
    3e2a:	45a9      	cmp	r9, r5
    3e2c:	d90d      	bls.n	3e4a <__aeabi_ddiv+0x262>
    3e2e:	465b      	mov	r3, fp
    3e30:	4445      	add	r5, r8
    3e32:	3b01      	subs	r3, #1
    3e34:	45a8      	cmp	r8, r5
    3e36:	d900      	bls.n	3e3a <__aeabi_ddiv+0x252>
    3e38:	e13a      	b.n	40b0 <__aeabi_ddiv+0x4c8>
    3e3a:	45a9      	cmp	r9, r5
    3e3c:	d800      	bhi.n	3e40 <__aeabi_ddiv+0x258>
    3e3e:	e137      	b.n	40b0 <__aeabi_ddiv+0x4c8>
    3e40:	2302      	movs	r3, #2
    3e42:	425b      	negs	r3, r3
    3e44:	469c      	mov	ip, r3
    3e46:	4445      	add	r5, r8
    3e48:	44e3      	add	fp, ip
    3e4a:	464b      	mov	r3, r9
    3e4c:	1aeb      	subs	r3, r5, r3
    3e4e:	0039      	movs	r1, r7
    3e50:	0018      	movs	r0, r3
    3e52:	9304      	str	r3, [sp, #16]
    3e54:	f7ff fa22 	bl	329c <__udivsi3>
    3e58:	9b01      	ldr	r3, [sp, #4]
    3e5a:	0005      	movs	r5, r0
    3e5c:	4343      	muls	r3, r0
    3e5e:	0039      	movs	r1, r7
    3e60:	9804      	ldr	r0, [sp, #16]
    3e62:	4699      	mov	r9, r3
    3e64:	f7ff faa0 	bl	33a8 <__aeabi_uidivmod>
    3e68:	0433      	lsls	r3, r6, #16
    3e6a:	0409      	lsls	r1, r1, #16
    3e6c:	0c1b      	lsrs	r3, r3, #16
    3e6e:	430b      	orrs	r3, r1
    3e70:	4599      	cmp	r9, r3
    3e72:	d909      	bls.n	3e88 <__aeabi_ddiv+0x2a0>
    3e74:	4443      	add	r3, r8
    3e76:	1e6a      	subs	r2, r5, #1
    3e78:	4598      	cmp	r8, r3
    3e7a:	d900      	bls.n	3e7e <__aeabi_ddiv+0x296>
    3e7c:	e11a      	b.n	40b4 <__aeabi_ddiv+0x4cc>
    3e7e:	4599      	cmp	r9, r3
    3e80:	d800      	bhi.n	3e84 <__aeabi_ddiv+0x29c>
    3e82:	e117      	b.n	40b4 <__aeabi_ddiv+0x4cc>
    3e84:	3d02      	subs	r5, #2
    3e86:	4443      	add	r3, r8
    3e88:	464a      	mov	r2, r9
    3e8a:	1a9b      	subs	r3, r3, r2
    3e8c:	465a      	mov	r2, fp
    3e8e:	0412      	lsls	r2, r2, #16
    3e90:	432a      	orrs	r2, r5
    3e92:	9903      	ldr	r1, [sp, #12]
    3e94:	4693      	mov	fp, r2
    3e96:	0c10      	lsrs	r0, r2, #16
    3e98:	0c0a      	lsrs	r2, r1, #16
    3e9a:	4691      	mov	r9, r2
    3e9c:	0409      	lsls	r1, r1, #16
    3e9e:	465a      	mov	r2, fp
    3ea0:	0c09      	lsrs	r1, r1, #16
    3ea2:	464e      	mov	r6, r9
    3ea4:	000d      	movs	r5, r1
    3ea6:	0412      	lsls	r2, r2, #16
    3ea8:	0c12      	lsrs	r2, r2, #16
    3eaa:	4345      	muls	r5, r0
    3eac:	9105      	str	r1, [sp, #20]
    3eae:	4351      	muls	r1, r2
    3eb0:	4372      	muls	r2, r6
    3eb2:	4370      	muls	r0, r6
    3eb4:	1952      	adds	r2, r2, r5
    3eb6:	0c0e      	lsrs	r6, r1, #16
    3eb8:	18b2      	adds	r2, r6, r2
    3eba:	4295      	cmp	r5, r2
    3ebc:	d903      	bls.n	3ec6 <__aeabi_ddiv+0x2de>
    3ebe:	2580      	movs	r5, #128	; 0x80
    3ec0:	026d      	lsls	r5, r5, #9
    3ec2:	46ac      	mov	ip, r5
    3ec4:	4460      	add	r0, ip
    3ec6:	0c15      	lsrs	r5, r2, #16
    3ec8:	0409      	lsls	r1, r1, #16
    3eca:	0412      	lsls	r2, r2, #16
    3ecc:	0c09      	lsrs	r1, r1, #16
    3ece:	1828      	adds	r0, r5, r0
    3ed0:	1852      	adds	r2, r2, r1
    3ed2:	4283      	cmp	r3, r0
    3ed4:	d200      	bcs.n	3ed8 <__aeabi_ddiv+0x2f0>
    3ed6:	e0ce      	b.n	4076 <__aeabi_ddiv+0x48e>
    3ed8:	d100      	bne.n	3edc <__aeabi_ddiv+0x2f4>
    3eda:	e0c8      	b.n	406e <__aeabi_ddiv+0x486>
    3edc:	1a1d      	subs	r5, r3, r0
    3ede:	4653      	mov	r3, sl
    3ee0:	1a9e      	subs	r6, r3, r2
    3ee2:	45b2      	cmp	sl, r6
    3ee4:	4192      	sbcs	r2, r2
    3ee6:	4252      	negs	r2, r2
    3ee8:	1aab      	subs	r3, r5, r2
    3eea:	469a      	mov	sl, r3
    3eec:	4598      	cmp	r8, r3
    3eee:	d100      	bne.n	3ef2 <__aeabi_ddiv+0x30a>
    3ef0:	e117      	b.n	4122 <__aeabi_ddiv+0x53a>
    3ef2:	0039      	movs	r1, r7
    3ef4:	0018      	movs	r0, r3
    3ef6:	f7ff f9d1 	bl	329c <__udivsi3>
    3efa:	9b01      	ldr	r3, [sp, #4]
    3efc:	0005      	movs	r5, r0
    3efe:	4343      	muls	r3, r0
    3f00:	0039      	movs	r1, r7
    3f02:	4650      	mov	r0, sl
    3f04:	9304      	str	r3, [sp, #16]
    3f06:	f7ff fa4f 	bl	33a8 <__aeabi_uidivmod>
    3f0a:	9804      	ldr	r0, [sp, #16]
    3f0c:	040b      	lsls	r3, r1, #16
    3f0e:	0c31      	lsrs	r1, r6, #16
    3f10:	4319      	orrs	r1, r3
    3f12:	4288      	cmp	r0, r1
    3f14:	d909      	bls.n	3f2a <__aeabi_ddiv+0x342>
    3f16:	4441      	add	r1, r8
    3f18:	1e6b      	subs	r3, r5, #1
    3f1a:	4588      	cmp	r8, r1
    3f1c:	d900      	bls.n	3f20 <__aeabi_ddiv+0x338>
    3f1e:	e107      	b.n	4130 <__aeabi_ddiv+0x548>
    3f20:	4288      	cmp	r0, r1
    3f22:	d800      	bhi.n	3f26 <__aeabi_ddiv+0x33e>
    3f24:	e104      	b.n	4130 <__aeabi_ddiv+0x548>
    3f26:	3d02      	subs	r5, #2
    3f28:	4441      	add	r1, r8
    3f2a:	9b04      	ldr	r3, [sp, #16]
    3f2c:	1acb      	subs	r3, r1, r3
    3f2e:	0018      	movs	r0, r3
    3f30:	0039      	movs	r1, r7
    3f32:	9304      	str	r3, [sp, #16]
    3f34:	f7ff f9b2 	bl	329c <__udivsi3>
    3f38:	9b01      	ldr	r3, [sp, #4]
    3f3a:	4682      	mov	sl, r0
    3f3c:	4343      	muls	r3, r0
    3f3e:	0039      	movs	r1, r7
    3f40:	9804      	ldr	r0, [sp, #16]
    3f42:	9301      	str	r3, [sp, #4]
    3f44:	f7ff fa30 	bl	33a8 <__aeabi_uidivmod>
    3f48:	9801      	ldr	r0, [sp, #4]
    3f4a:	040b      	lsls	r3, r1, #16
    3f4c:	0431      	lsls	r1, r6, #16
    3f4e:	0c09      	lsrs	r1, r1, #16
    3f50:	4319      	orrs	r1, r3
    3f52:	4288      	cmp	r0, r1
    3f54:	d90d      	bls.n	3f72 <__aeabi_ddiv+0x38a>
    3f56:	4653      	mov	r3, sl
    3f58:	4441      	add	r1, r8
    3f5a:	3b01      	subs	r3, #1
    3f5c:	4588      	cmp	r8, r1
    3f5e:	d900      	bls.n	3f62 <__aeabi_ddiv+0x37a>
    3f60:	e0e8      	b.n	4134 <__aeabi_ddiv+0x54c>
    3f62:	4288      	cmp	r0, r1
    3f64:	d800      	bhi.n	3f68 <__aeabi_ddiv+0x380>
    3f66:	e0e5      	b.n	4134 <__aeabi_ddiv+0x54c>
    3f68:	2302      	movs	r3, #2
    3f6a:	425b      	negs	r3, r3
    3f6c:	469c      	mov	ip, r3
    3f6e:	4441      	add	r1, r8
    3f70:	44e2      	add	sl, ip
    3f72:	9b01      	ldr	r3, [sp, #4]
    3f74:	042d      	lsls	r5, r5, #16
    3f76:	1ace      	subs	r6, r1, r3
    3f78:	4651      	mov	r1, sl
    3f7a:	4329      	orrs	r1, r5
    3f7c:	9d05      	ldr	r5, [sp, #20]
    3f7e:	464f      	mov	r7, r9
    3f80:	002a      	movs	r2, r5
    3f82:	040b      	lsls	r3, r1, #16
    3f84:	0c08      	lsrs	r0, r1, #16
    3f86:	0c1b      	lsrs	r3, r3, #16
    3f88:	435a      	muls	r2, r3
    3f8a:	4345      	muls	r5, r0
    3f8c:	437b      	muls	r3, r7
    3f8e:	4378      	muls	r0, r7
    3f90:	195b      	adds	r3, r3, r5
    3f92:	0c17      	lsrs	r7, r2, #16
    3f94:	18fb      	adds	r3, r7, r3
    3f96:	429d      	cmp	r5, r3
    3f98:	d903      	bls.n	3fa2 <__aeabi_ddiv+0x3ba>
    3f9a:	2580      	movs	r5, #128	; 0x80
    3f9c:	026d      	lsls	r5, r5, #9
    3f9e:	46ac      	mov	ip, r5
    3fa0:	4460      	add	r0, ip
    3fa2:	0c1d      	lsrs	r5, r3, #16
    3fa4:	0412      	lsls	r2, r2, #16
    3fa6:	041b      	lsls	r3, r3, #16
    3fa8:	0c12      	lsrs	r2, r2, #16
    3faa:	1828      	adds	r0, r5, r0
    3fac:	189b      	adds	r3, r3, r2
    3fae:	4286      	cmp	r6, r0
    3fb0:	d200      	bcs.n	3fb4 <__aeabi_ddiv+0x3cc>
    3fb2:	e093      	b.n	40dc <__aeabi_ddiv+0x4f4>
    3fb4:	d100      	bne.n	3fb8 <__aeabi_ddiv+0x3d0>
    3fb6:	e08e      	b.n	40d6 <__aeabi_ddiv+0x4ee>
    3fb8:	2301      	movs	r3, #1
    3fba:	4319      	orrs	r1, r3
    3fbc:	4ba0      	ldr	r3, [pc, #640]	; (4240 <__aeabi_ddiv+0x658>)
    3fbe:	18e3      	adds	r3, r4, r3
    3fc0:	2b00      	cmp	r3, #0
    3fc2:	dc00      	bgt.n	3fc6 <__aeabi_ddiv+0x3de>
    3fc4:	e099      	b.n	40fa <__aeabi_ddiv+0x512>
    3fc6:	074a      	lsls	r2, r1, #29
    3fc8:	d000      	beq.n	3fcc <__aeabi_ddiv+0x3e4>
    3fca:	e09e      	b.n	410a <__aeabi_ddiv+0x522>
    3fcc:	465a      	mov	r2, fp
    3fce:	01d2      	lsls	r2, r2, #7
    3fd0:	d506      	bpl.n	3fe0 <__aeabi_ddiv+0x3f8>
    3fd2:	465a      	mov	r2, fp
    3fd4:	4b9b      	ldr	r3, [pc, #620]	; (4244 <__aeabi_ddiv+0x65c>)
    3fd6:	401a      	ands	r2, r3
    3fd8:	2380      	movs	r3, #128	; 0x80
    3fda:	4693      	mov	fp, r2
    3fdc:	00db      	lsls	r3, r3, #3
    3fde:	18e3      	adds	r3, r4, r3
    3fe0:	4a99      	ldr	r2, [pc, #612]	; (4248 <__aeabi_ddiv+0x660>)
    3fe2:	4293      	cmp	r3, r2
    3fe4:	dd68      	ble.n	40b8 <__aeabi_ddiv+0x4d0>
    3fe6:	2301      	movs	r3, #1
    3fe8:	9a02      	ldr	r2, [sp, #8]
    3fea:	4c98      	ldr	r4, [pc, #608]	; (424c <__aeabi_ddiv+0x664>)
    3fec:	401a      	ands	r2, r3
    3fee:	2300      	movs	r3, #0
    3ff0:	4694      	mov	ip, r2
    3ff2:	4698      	mov	r8, r3
    3ff4:	2200      	movs	r2, #0
    3ff6:	e6c5      	b.n	3d84 <__aeabi_ddiv+0x19c>
    3ff8:	2280      	movs	r2, #128	; 0x80
    3ffa:	464b      	mov	r3, r9
    3ffc:	0312      	lsls	r2, r2, #12
    3ffe:	4213      	tst	r3, r2
    4000:	d00a      	beq.n	4018 <__aeabi_ddiv+0x430>
    4002:	465b      	mov	r3, fp
    4004:	4213      	tst	r3, r2
    4006:	d106      	bne.n	4016 <__aeabi_ddiv+0x42e>
    4008:	431a      	orrs	r2, r3
    400a:	0312      	lsls	r2, r2, #12
    400c:	0b12      	lsrs	r2, r2, #12
    400e:	46ac      	mov	ip, r5
    4010:	4688      	mov	r8, r1
    4012:	4c8e      	ldr	r4, [pc, #568]	; (424c <__aeabi_ddiv+0x664>)
    4014:	e6b6      	b.n	3d84 <__aeabi_ddiv+0x19c>
    4016:	464b      	mov	r3, r9
    4018:	431a      	orrs	r2, r3
    401a:	0312      	lsls	r2, r2, #12
    401c:	0b12      	lsrs	r2, r2, #12
    401e:	46bc      	mov	ip, r7
    4020:	4c8a      	ldr	r4, [pc, #552]	; (424c <__aeabi_ddiv+0x664>)
    4022:	e6af      	b.n	3d84 <__aeabi_ddiv+0x19c>
    4024:	0003      	movs	r3, r0
    4026:	465a      	mov	r2, fp
    4028:	3b28      	subs	r3, #40	; 0x28
    402a:	409a      	lsls	r2, r3
    402c:	2300      	movs	r3, #0
    402e:	4691      	mov	r9, r2
    4030:	4698      	mov	r8, r3
    4032:	e657      	b.n	3ce4 <__aeabi_ddiv+0xfc>
    4034:	4658      	mov	r0, fp
    4036:	f001 f82b 	bl	5090 <__clzsi2>
    403a:	3020      	adds	r0, #32
    403c:	e640      	b.n	3cc0 <__aeabi_ddiv+0xd8>
    403e:	0003      	movs	r3, r0
    4040:	4652      	mov	r2, sl
    4042:	3b28      	subs	r3, #40	; 0x28
    4044:	409a      	lsls	r2, r3
    4046:	2100      	movs	r1, #0
    4048:	4693      	mov	fp, r2
    404a:	e677      	b.n	3d3c <__aeabi_ddiv+0x154>
    404c:	f001 f820 	bl	5090 <__clzsi2>
    4050:	3020      	adds	r0, #32
    4052:	e65f      	b.n	3d14 <__aeabi_ddiv+0x12c>
    4054:	4588      	cmp	r8, r1
    4056:	d200      	bcs.n	405a <__aeabi_ddiv+0x472>
    4058:	e6c7      	b.n	3dea <__aeabi_ddiv+0x202>
    405a:	464b      	mov	r3, r9
    405c:	07de      	lsls	r6, r3, #31
    405e:	085d      	lsrs	r5, r3, #1
    4060:	4643      	mov	r3, r8
    4062:	085b      	lsrs	r3, r3, #1
    4064:	431e      	orrs	r6, r3
    4066:	4643      	mov	r3, r8
    4068:	07db      	lsls	r3, r3, #31
    406a:	469a      	mov	sl, r3
    406c:	e6c2      	b.n	3df4 <__aeabi_ddiv+0x20c>
    406e:	2500      	movs	r5, #0
    4070:	4592      	cmp	sl, r2
    4072:	d300      	bcc.n	4076 <__aeabi_ddiv+0x48e>
    4074:	e733      	b.n	3ede <__aeabi_ddiv+0x2f6>
    4076:	9e03      	ldr	r6, [sp, #12]
    4078:	4659      	mov	r1, fp
    407a:	46b4      	mov	ip, r6
    407c:	44e2      	add	sl, ip
    407e:	45b2      	cmp	sl, r6
    4080:	41ad      	sbcs	r5, r5
    4082:	426d      	negs	r5, r5
    4084:	4445      	add	r5, r8
    4086:	18eb      	adds	r3, r5, r3
    4088:	3901      	subs	r1, #1
    408a:	4598      	cmp	r8, r3
    408c:	d207      	bcs.n	409e <__aeabi_ddiv+0x4b6>
    408e:	4298      	cmp	r0, r3
    4090:	d900      	bls.n	4094 <__aeabi_ddiv+0x4ac>
    4092:	e07f      	b.n	4194 <__aeabi_ddiv+0x5ac>
    4094:	d100      	bne.n	4098 <__aeabi_ddiv+0x4b0>
    4096:	e0bc      	b.n	4212 <__aeabi_ddiv+0x62a>
    4098:	1a1d      	subs	r5, r3, r0
    409a:	468b      	mov	fp, r1
    409c:	e71f      	b.n	3ede <__aeabi_ddiv+0x2f6>
    409e:	4598      	cmp	r8, r3
    40a0:	d1fa      	bne.n	4098 <__aeabi_ddiv+0x4b0>
    40a2:	9d03      	ldr	r5, [sp, #12]
    40a4:	4555      	cmp	r5, sl
    40a6:	d9f2      	bls.n	408e <__aeabi_ddiv+0x4a6>
    40a8:	4643      	mov	r3, r8
    40aa:	468b      	mov	fp, r1
    40ac:	1a1d      	subs	r5, r3, r0
    40ae:	e716      	b.n	3ede <__aeabi_ddiv+0x2f6>
    40b0:	469b      	mov	fp, r3
    40b2:	e6ca      	b.n	3e4a <__aeabi_ddiv+0x262>
    40b4:	0015      	movs	r5, r2
    40b6:	e6e7      	b.n	3e88 <__aeabi_ddiv+0x2a0>
    40b8:	465a      	mov	r2, fp
    40ba:	08c9      	lsrs	r1, r1, #3
    40bc:	0752      	lsls	r2, r2, #29
    40be:	430a      	orrs	r2, r1
    40c0:	055b      	lsls	r3, r3, #21
    40c2:	4690      	mov	r8, r2
    40c4:	0d5c      	lsrs	r4, r3, #21
    40c6:	465a      	mov	r2, fp
    40c8:	2301      	movs	r3, #1
    40ca:	9902      	ldr	r1, [sp, #8]
    40cc:	0252      	lsls	r2, r2, #9
    40ce:	4019      	ands	r1, r3
    40d0:	0b12      	lsrs	r2, r2, #12
    40d2:	468c      	mov	ip, r1
    40d4:	e656      	b.n	3d84 <__aeabi_ddiv+0x19c>
    40d6:	2b00      	cmp	r3, #0
    40d8:	d100      	bne.n	40dc <__aeabi_ddiv+0x4f4>
    40da:	e76f      	b.n	3fbc <__aeabi_ddiv+0x3d4>
    40dc:	4446      	add	r6, r8
    40de:	1e4a      	subs	r2, r1, #1
    40e0:	45b0      	cmp	r8, r6
    40e2:	d929      	bls.n	4138 <__aeabi_ddiv+0x550>
    40e4:	0011      	movs	r1, r2
    40e6:	4286      	cmp	r6, r0
    40e8:	d000      	beq.n	40ec <__aeabi_ddiv+0x504>
    40ea:	e765      	b.n	3fb8 <__aeabi_ddiv+0x3d0>
    40ec:	9a03      	ldr	r2, [sp, #12]
    40ee:	4293      	cmp	r3, r2
    40f0:	d000      	beq.n	40f4 <__aeabi_ddiv+0x50c>
    40f2:	e761      	b.n	3fb8 <__aeabi_ddiv+0x3d0>
    40f4:	e762      	b.n	3fbc <__aeabi_ddiv+0x3d4>
    40f6:	2101      	movs	r1, #1
    40f8:	4249      	negs	r1, r1
    40fa:	2001      	movs	r0, #1
    40fc:	1ac2      	subs	r2, r0, r3
    40fe:	2a38      	cmp	r2, #56	; 0x38
    4100:	dd21      	ble.n	4146 <__aeabi_ddiv+0x55e>
    4102:	9b02      	ldr	r3, [sp, #8]
    4104:	4003      	ands	r3, r0
    4106:	469c      	mov	ip, r3
    4108:	e638      	b.n	3d7c <__aeabi_ddiv+0x194>
    410a:	220f      	movs	r2, #15
    410c:	400a      	ands	r2, r1
    410e:	2a04      	cmp	r2, #4
    4110:	d100      	bne.n	4114 <__aeabi_ddiv+0x52c>
    4112:	e75b      	b.n	3fcc <__aeabi_ddiv+0x3e4>
    4114:	000a      	movs	r2, r1
    4116:	1d11      	adds	r1, r2, #4
    4118:	4291      	cmp	r1, r2
    411a:	4192      	sbcs	r2, r2
    411c:	4252      	negs	r2, r2
    411e:	4493      	add	fp, r2
    4120:	e754      	b.n	3fcc <__aeabi_ddiv+0x3e4>
    4122:	4b47      	ldr	r3, [pc, #284]	; (4240 <__aeabi_ddiv+0x658>)
    4124:	18e3      	adds	r3, r4, r3
    4126:	2b00      	cmp	r3, #0
    4128:	dde5      	ble.n	40f6 <__aeabi_ddiv+0x50e>
    412a:	2201      	movs	r2, #1
    412c:	4252      	negs	r2, r2
    412e:	e7f2      	b.n	4116 <__aeabi_ddiv+0x52e>
    4130:	001d      	movs	r5, r3
    4132:	e6fa      	b.n	3f2a <__aeabi_ddiv+0x342>
    4134:	469a      	mov	sl, r3
    4136:	e71c      	b.n	3f72 <__aeabi_ddiv+0x38a>
    4138:	42b0      	cmp	r0, r6
    413a:	d839      	bhi.n	41b0 <__aeabi_ddiv+0x5c8>
    413c:	d06e      	beq.n	421c <__aeabi_ddiv+0x634>
    413e:	0011      	movs	r1, r2
    4140:	e73a      	b.n	3fb8 <__aeabi_ddiv+0x3d0>
    4142:	9302      	str	r3, [sp, #8]
    4144:	e73a      	b.n	3fbc <__aeabi_ddiv+0x3d4>
    4146:	2a1f      	cmp	r2, #31
    4148:	dc3c      	bgt.n	41c4 <__aeabi_ddiv+0x5dc>
    414a:	2320      	movs	r3, #32
    414c:	1a9b      	subs	r3, r3, r2
    414e:	000c      	movs	r4, r1
    4150:	4658      	mov	r0, fp
    4152:	4099      	lsls	r1, r3
    4154:	4098      	lsls	r0, r3
    4156:	1e4b      	subs	r3, r1, #1
    4158:	4199      	sbcs	r1, r3
    415a:	465b      	mov	r3, fp
    415c:	40d4      	lsrs	r4, r2
    415e:	40d3      	lsrs	r3, r2
    4160:	4320      	orrs	r0, r4
    4162:	4308      	orrs	r0, r1
    4164:	001a      	movs	r2, r3
    4166:	0743      	lsls	r3, r0, #29
    4168:	d009      	beq.n	417e <__aeabi_ddiv+0x596>
    416a:	230f      	movs	r3, #15
    416c:	4003      	ands	r3, r0
    416e:	2b04      	cmp	r3, #4
    4170:	d005      	beq.n	417e <__aeabi_ddiv+0x596>
    4172:	0001      	movs	r1, r0
    4174:	1d08      	adds	r0, r1, #4
    4176:	4288      	cmp	r0, r1
    4178:	419b      	sbcs	r3, r3
    417a:	425b      	negs	r3, r3
    417c:	18d2      	adds	r2, r2, r3
    417e:	0213      	lsls	r3, r2, #8
    4180:	d53a      	bpl.n	41f8 <__aeabi_ddiv+0x610>
    4182:	2301      	movs	r3, #1
    4184:	9a02      	ldr	r2, [sp, #8]
    4186:	2401      	movs	r4, #1
    4188:	401a      	ands	r2, r3
    418a:	2300      	movs	r3, #0
    418c:	4694      	mov	ip, r2
    418e:	4698      	mov	r8, r3
    4190:	2200      	movs	r2, #0
    4192:	e5f7      	b.n	3d84 <__aeabi_ddiv+0x19c>
    4194:	2102      	movs	r1, #2
    4196:	4249      	negs	r1, r1
    4198:	468c      	mov	ip, r1
    419a:	9d03      	ldr	r5, [sp, #12]
    419c:	44e3      	add	fp, ip
    419e:	46ac      	mov	ip, r5
    41a0:	44e2      	add	sl, ip
    41a2:	45aa      	cmp	sl, r5
    41a4:	41ad      	sbcs	r5, r5
    41a6:	426d      	negs	r5, r5
    41a8:	4445      	add	r5, r8
    41aa:	18ed      	adds	r5, r5, r3
    41ac:	1a2d      	subs	r5, r5, r0
    41ae:	e696      	b.n	3ede <__aeabi_ddiv+0x2f6>
    41b0:	1e8a      	subs	r2, r1, #2
    41b2:	9903      	ldr	r1, [sp, #12]
    41b4:	004d      	lsls	r5, r1, #1
    41b6:	428d      	cmp	r5, r1
    41b8:	4189      	sbcs	r1, r1
    41ba:	4249      	negs	r1, r1
    41bc:	4441      	add	r1, r8
    41be:	1876      	adds	r6, r6, r1
    41c0:	9503      	str	r5, [sp, #12]
    41c2:	e78f      	b.n	40e4 <__aeabi_ddiv+0x4fc>
    41c4:	201f      	movs	r0, #31
    41c6:	4240      	negs	r0, r0
    41c8:	1ac3      	subs	r3, r0, r3
    41ca:	4658      	mov	r0, fp
    41cc:	40d8      	lsrs	r0, r3
    41ce:	0003      	movs	r3, r0
    41d0:	2a20      	cmp	r2, #32
    41d2:	d028      	beq.n	4226 <__aeabi_ddiv+0x63e>
    41d4:	2040      	movs	r0, #64	; 0x40
    41d6:	465d      	mov	r5, fp
    41d8:	1a82      	subs	r2, r0, r2
    41da:	4095      	lsls	r5, r2
    41dc:	4329      	orrs	r1, r5
    41de:	1e4a      	subs	r2, r1, #1
    41e0:	4191      	sbcs	r1, r2
    41e2:	4319      	orrs	r1, r3
    41e4:	2307      	movs	r3, #7
    41e6:	2200      	movs	r2, #0
    41e8:	400b      	ands	r3, r1
    41ea:	d009      	beq.n	4200 <__aeabi_ddiv+0x618>
    41ec:	230f      	movs	r3, #15
    41ee:	2200      	movs	r2, #0
    41f0:	400b      	ands	r3, r1
    41f2:	0008      	movs	r0, r1
    41f4:	2b04      	cmp	r3, #4
    41f6:	d1bd      	bne.n	4174 <__aeabi_ddiv+0x58c>
    41f8:	0001      	movs	r1, r0
    41fa:	0753      	lsls	r3, r2, #29
    41fc:	0252      	lsls	r2, r2, #9
    41fe:	0b12      	lsrs	r2, r2, #12
    4200:	08c9      	lsrs	r1, r1, #3
    4202:	4319      	orrs	r1, r3
    4204:	2301      	movs	r3, #1
    4206:	4688      	mov	r8, r1
    4208:	9902      	ldr	r1, [sp, #8]
    420a:	2400      	movs	r4, #0
    420c:	4019      	ands	r1, r3
    420e:	468c      	mov	ip, r1
    4210:	e5b8      	b.n	3d84 <__aeabi_ddiv+0x19c>
    4212:	4552      	cmp	r2, sl
    4214:	d8be      	bhi.n	4194 <__aeabi_ddiv+0x5ac>
    4216:	468b      	mov	fp, r1
    4218:	2500      	movs	r5, #0
    421a:	e660      	b.n	3ede <__aeabi_ddiv+0x2f6>
    421c:	9d03      	ldr	r5, [sp, #12]
    421e:	429d      	cmp	r5, r3
    4220:	d3c6      	bcc.n	41b0 <__aeabi_ddiv+0x5c8>
    4222:	0011      	movs	r1, r2
    4224:	e762      	b.n	40ec <__aeabi_ddiv+0x504>
    4226:	2500      	movs	r5, #0
    4228:	e7d8      	b.n	41dc <__aeabi_ddiv+0x5f4>
    422a:	2280      	movs	r2, #128	; 0x80
    422c:	465b      	mov	r3, fp
    422e:	0312      	lsls	r2, r2, #12
    4230:	431a      	orrs	r2, r3
    4232:	9b01      	ldr	r3, [sp, #4]
    4234:	0312      	lsls	r2, r2, #12
    4236:	0b12      	lsrs	r2, r2, #12
    4238:	469c      	mov	ip, r3
    423a:	4688      	mov	r8, r1
    423c:	4c03      	ldr	r4, [pc, #12]	; (424c <__aeabi_ddiv+0x664>)
    423e:	e5a1      	b.n	3d84 <__aeabi_ddiv+0x19c>
    4240:	000003ff 	.word	0x000003ff
    4244:	feffffff 	.word	0xfeffffff
    4248:	000007fe 	.word	0x000007fe
    424c:	000007ff 	.word	0x000007ff

00004250 <__aeabi_dmul>:
    4250:	b5f0      	push	{r4, r5, r6, r7, lr}
    4252:	4657      	mov	r7, sl
    4254:	4645      	mov	r5, r8
    4256:	46de      	mov	lr, fp
    4258:	464e      	mov	r6, r9
    425a:	b5e0      	push	{r5, r6, r7, lr}
    425c:	030c      	lsls	r4, r1, #12
    425e:	4698      	mov	r8, r3
    4260:	004e      	lsls	r6, r1, #1
    4262:	0b23      	lsrs	r3, r4, #12
    4264:	b087      	sub	sp, #28
    4266:	0007      	movs	r7, r0
    4268:	4692      	mov	sl, r2
    426a:	469b      	mov	fp, r3
    426c:	0d76      	lsrs	r6, r6, #21
    426e:	0fcd      	lsrs	r5, r1, #31
    4270:	2e00      	cmp	r6, #0
    4272:	d06b      	beq.n	434c <__aeabi_dmul+0xfc>
    4274:	4b6d      	ldr	r3, [pc, #436]	; (442c <__aeabi_dmul+0x1dc>)
    4276:	429e      	cmp	r6, r3
    4278:	d035      	beq.n	42e6 <__aeabi_dmul+0x96>
    427a:	2480      	movs	r4, #128	; 0x80
    427c:	465b      	mov	r3, fp
    427e:	0f42      	lsrs	r2, r0, #29
    4280:	0424      	lsls	r4, r4, #16
    4282:	00db      	lsls	r3, r3, #3
    4284:	4314      	orrs	r4, r2
    4286:	431c      	orrs	r4, r3
    4288:	00c3      	lsls	r3, r0, #3
    428a:	4699      	mov	r9, r3
    428c:	4b68      	ldr	r3, [pc, #416]	; (4430 <__aeabi_dmul+0x1e0>)
    428e:	46a3      	mov	fp, r4
    4290:	469c      	mov	ip, r3
    4292:	2300      	movs	r3, #0
    4294:	2700      	movs	r7, #0
    4296:	4466      	add	r6, ip
    4298:	9302      	str	r3, [sp, #8]
    429a:	4643      	mov	r3, r8
    429c:	031c      	lsls	r4, r3, #12
    429e:	005a      	lsls	r2, r3, #1
    42a0:	0fdb      	lsrs	r3, r3, #31
    42a2:	4650      	mov	r0, sl
    42a4:	0b24      	lsrs	r4, r4, #12
    42a6:	0d52      	lsrs	r2, r2, #21
    42a8:	4698      	mov	r8, r3
    42aa:	d100      	bne.n	42ae <__aeabi_dmul+0x5e>
    42ac:	e076      	b.n	439c <__aeabi_dmul+0x14c>
    42ae:	4b5f      	ldr	r3, [pc, #380]	; (442c <__aeabi_dmul+0x1dc>)
    42b0:	429a      	cmp	r2, r3
    42b2:	d06d      	beq.n	4390 <__aeabi_dmul+0x140>
    42b4:	2380      	movs	r3, #128	; 0x80
    42b6:	0f41      	lsrs	r1, r0, #29
    42b8:	041b      	lsls	r3, r3, #16
    42ba:	430b      	orrs	r3, r1
    42bc:	495c      	ldr	r1, [pc, #368]	; (4430 <__aeabi_dmul+0x1e0>)
    42be:	00e4      	lsls	r4, r4, #3
    42c0:	468c      	mov	ip, r1
    42c2:	431c      	orrs	r4, r3
    42c4:	00c3      	lsls	r3, r0, #3
    42c6:	2000      	movs	r0, #0
    42c8:	4462      	add	r2, ip
    42ca:	4641      	mov	r1, r8
    42cc:	18b6      	adds	r6, r6, r2
    42ce:	4069      	eors	r1, r5
    42d0:	1c72      	adds	r2, r6, #1
    42d2:	9101      	str	r1, [sp, #4]
    42d4:	4694      	mov	ip, r2
    42d6:	4307      	orrs	r7, r0
    42d8:	2f0f      	cmp	r7, #15
    42da:	d900      	bls.n	42de <__aeabi_dmul+0x8e>
    42dc:	e0b0      	b.n	4440 <__aeabi_dmul+0x1f0>
    42de:	4a55      	ldr	r2, [pc, #340]	; (4434 <__aeabi_dmul+0x1e4>)
    42e0:	00bf      	lsls	r7, r7, #2
    42e2:	59d2      	ldr	r2, [r2, r7]
    42e4:	4697      	mov	pc, r2
    42e6:	465b      	mov	r3, fp
    42e8:	4303      	orrs	r3, r0
    42ea:	4699      	mov	r9, r3
    42ec:	d000      	beq.n	42f0 <__aeabi_dmul+0xa0>
    42ee:	e087      	b.n	4400 <__aeabi_dmul+0x1b0>
    42f0:	2300      	movs	r3, #0
    42f2:	469b      	mov	fp, r3
    42f4:	3302      	adds	r3, #2
    42f6:	2708      	movs	r7, #8
    42f8:	9302      	str	r3, [sp, #8]
    42fa:	e7ce      	b.n	429a <__aeabi_dmul+0x4a>
    42fc:	4642      	mov	r2, r8
    42fe:	9201      	str	r2, [sp, #4]
    4300:	2802      	cmp	r0, #2
    4302:	d067      	beq.n	43d4 <__aeabi_dmul+0x184>
    4304:	2803      	cmp	r0, #3
    4306:	d100      	bne.n	430a <__aeabi_dmul+0xba>
    4308:	e20e      	b.n	4728 <__aeabi_dmul+0x4d8>
    430a:	2801      	cmp	r0, #1
    430c:	d000      	beq.n	4310 <__aeabi_dmul+0xc0>
    430e:	e162      	b.n	45d6 <__aeabi_dmul+0x386>
    4310:	2300      	movs	r3, #0
    4312:	2400      	movs	r4, #0
    4314:	2200      	movs	r2, #0
    4316:	4699      	mov	r9, r3
    4318:	9901      	ldr	r1, [sp, #4]
    431a:	4001      	ands	r1, r0
    431c:	b2cd      	uxtb	r5, r1
    431e:	2100      	movs	r1, #0
    4320:	0312      	lsls	r2, r2, #12
    4322:	0d0b      	lsrs	r3, r1, #20
    4324:	0b12      	lsrs	r2, r2, #12
    4326:	051b      	lsls	r3, r3, #20
    4328:	4313      	orrs	r3, r2
    432a:	4a43      	ldr	r2, [pc, #268]	; (4438 <__aeabi_dmul+0x1e8>)
    432c:	0524      	lsls	r4, r4, #20
    432e:	4013      	ands	r3, r2
    4330:	431c      	orrs	r4, r3
    4332:	0064      	lsls	r4, r4, #1
    4334:	07ed      	lsls	r5, r5, #31
    4336:	0864      	lsrs	r4, r4, #1
    4338:	432c      	orrs	r4, r5
    433a:	4648      	mov	r0, r9
    433c:	0021      	movs	r1, r4
    433e:	b007      	add	sp, #28
    4340:	bc3c      	pop	{r2, r3, r4, r5}
    4342:	4690      	mov	r8, r2
    4344:	4699      	mov	r9, r3
    4346:	46a2      	mov	sl, r4
    4348:	46ab      	mov	fp, r5
    434a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    434c:	4303      	orrs	r3, r0
    434e:	4699      	mov	r9, r3
    4350:	d04f      	beq.n	43f2 <__aeabi_dmul+0x1a2>
    4352:	465b      	mov	r3, fp
    4354:	2b00      	cmp	r3, #0
    4356:	d100      	bne.n	435a <__aeabi_dmul+0x10a>
    4358:	e189      	b.n	466e <__aeabi_dmul+0x41e>
    435a:	4658      	mov	r0, fp
    435c:	f000 fe98 	bl	5090 <__clzsi2>
    4360:	0003      	movs	r3, r0
    4362:	3b0b      	subs	r3, #11
    4364:	2b1c      	cmp	r3, #28
    4366:	dd00      	ble.n	436a <__aeabi_dmul+0x11a>
    4368:	e17a      	b.n	4660 <__aeabi_dmul+0x410>
    436a:	221d      	movs	r2, #29
    436c:	1ad3      	subs	r3, r2, r3
    436e:	003a      	movs	r2, r7
    4370:	0001      	movs	r1, r0
    4372:	465c      	mov	r4, fp
    4374:	40da      	lsrs	r2, r3
    4376:	3908      	subs	r1, #8
    4378:	408c      	lsls	r4, r1
    437a:	0013      	movs	r3, r2
    437c:	408f      	lsls	r7, r1
    437e:	4323      	orrs	r3, r4
    4380:	469b      	mov	fp, r3
    4382:	46b9      	mov	r9, r7
    4384:	2300      	movs	r3, #0
    4386:	4e2d      	ldr	r6, [pc, #180]	; (443c <__aeabi_dmul+0x1ec>)
    4388:	2700      	movs	r7, #0
    438a:	1a36      	subs	r6, r6, r0
    438c:	9302      	str	r3, [sp, #8]
    438e:	e784      	b.n	429a <__aeabi_dmul+0x4a>
    4390:	4653      	mov	r3, sl
    4392:	4323      	orrs	r3, r4
    4394:	d12a      	bne.n	43ec <__aeabi_dmul+0x19c>
    4396:	2400      	movs	r4, #0
    4398:	2002      	movs	r0, #2
    439a:	e796      	b.n	42ca <__aeabi_dmul+0x7a>
    439c:	4653      	mov	r3, sl
    439e:	4323      	orrs	r3, r4
    43a0:	d020      	beq.n	43e4 <__aeabi_dmul+0x194>
    43a2:	2c00      	cmp	r4, #0
    43a4:	d100      	bne.n	43a8 <__aeabi_dmul+0x158>
    43a6:	e157      	b.n	4658 <__aeabi_dmul+0x408>
    43a8:	0020      	movs	r0, r4
    43aa:	f000 fe71 	bl	5090 <__clzsi2>
    43ae:	0003      	movs	r3, r0
    43b0:	3b0b      	subs	r3, #11
    43b2:	2b1c      	cmp	r3, #28
    43b4:	dd00      	ble.n	43b8 <__aeabi_dmul+0x168>
    43b6:	e149      	b.n	464c <__aeabi_dmul+0x3fc>
    43b8:	211d      	movs	r1, #29
    43ba:	1acb      	subs	r3, r1, r3
    43bc:	4651      	mov	r1, sl
    43be:	0002      	movs	r2, r0
    43c0:	40d9      	lsrs	r1, r3
    43c2:	4653      	mov	r3, sl
    43c4:	3a08      	subs	r2, #8
    43c6:	4094      	lsls	r4, r2
    43c8:	4093      	lsls	r3, r2
    43ca:	430c      	orrs	r4, r1
    43cc:	4a1b      	ldr	r2, [pc, #108]	; (443c <__aeabi_dmul+0x1ec>)
    43ce:	1a12      	subs	r2, r2, r0
    43d0:	2000      	movs	r0, #0
    43d2:	e77a      	b.n	42ca <__aeabi_dmul+0x7a>
    43d4:	2501      	movs	r5, #1
    43d6:	9b01      	ldr	r3, [sp, #4]
    43d8:	4c14      	ldr	r4, [pc, #80]	; (442c <__aeabi_dmul+0x1dc>)
    43da:	401d      	ands	r5, r3
    43dc:	2300      	movs	r3, #0
    43de:	2200      	movs	r2, #0
    43e0:	4699      	mov	r9, r3
    43e2:	e79c      	b.n	431e <__aeabi_dmul+0xce>
    43e4:	2400      	movs	r4, #0
    43e6:	2200      	movs	r2, #0
    43e8:	2001      	movs	r0, #1
    43ea:	e76e      	b.n	42ca <__aeabi_dmul+0x7a>
    43ec:	4653      	mov	r3, sl
    43ee:	2003      	movs	r0, #3
    43f0:	e76b      	b.n	42ca <__aeabi_dmul+0x7a>
    43f2:	2300      	movs	r3, #0
    43f4:	469b      	mov	fp, r3
    43f6:	3301      	adds	r3, #1
    43f8:	2704      	movs	r7, #4
    43fa:	2600      	movs	r6, #0
    43fc:	9302      	str	r3, [sp, #8]
    43fe:	e74c      	b.n	429a <__aeabi_dmul+0x4a>
    4400:	2303      	movs	r3, #3
    4402:	4681      	mov	r9, r0
    4404:	270c      	movs	r7, #12
    4406:	9302      	str	r3, [sp, #8]
    4408:	e747      	b.n	429a <__aeabi_dmul+0x4a>
    440a:	2280      	movs	r2, #128	; 0x80
    440c:	2300      	movs	r3, #0
    440e:	2500      	movs	r5, #0
    4410:	0312      	lsls	r2, r2, #12
    4412:	4699      	mov	r9, r3
    4414:	4c05      	ldr	r4, [pc, #20]	; (442c <__aeabi_dmul+0x1dc>)
    4416:	e782      	b.n	431e <__aeabi_dmul+0xce>
    4418:	465c      	mov	r4, fp
    441a:	464b      	mov	r3, r9
    441c:	9802      	ldr	r0, [sp, #8]
    441e:	e76f      	b.n	4300 <__aeabi_dmul+0xb0>
    4420:	465c      	mov	r4, fp
    4422:	464b      	mov	r3, r9
    4424:	9501      	str	r5, [sp, #4]
    4426:	9802      	ldr	r0, [sp, #8]
    4428:	e76a      	b.n	4300 <__aeabi_dmul+0xb0>
    442a:	46c0      	nop			; (mov r8, r8)
    442c:	000007ff 	.word	0x000007ff
    4430:	fffffc01 	.word	0xfffffc01
    4434:	00005328 	.word	0x00005328
    4438:	800fffff 	.word	0x800fffff
    443c:	fffffc0d 	.word	0xfffffc0d
    4440:	464a      	mov	r2, r9
    4442:	4649      	mov	r1, r9
    4444:	0c17      	lsrs	r7, r2, #16
    4446:	0c1a      	lsrs	r2, r3, #16
    4448:	041b      	lsls	r3, r3, #16
    444a:	0c1b      	lsrs	r3, r3, #16
    444c:	0408      	lsls	r0, r1, #16
    444e:	0019      	movs	r1, r3
    4450:	0c00      	lsrs	r0, r0, #16
    4452:	4341      	muls	r1, r0
    4454:	0015      	movs	r5, r2
    4456:	4688      	mov	r8, r1
    4458:	0019      	movs	r1, r3
    445a:	437d      	muls	r5, r7
    445c:	4379      	muls	r1, r7
    445e:	9503      	str	r5, [sp, #12]
    4460:	4689      	mov	r9, r1
    4462:	0029      	movs	r1, r5
    4464:	0015      	movs	r5, r2
    4466:	4345      	muls	r5, r0
    4468:	444d      	add	r5, r9
    446a:	9502      	str	r5, [sp, #8]
    446c:	4645      	mov	r5, r8
    446e:	0c2d      	lsrs	r5, r5, #16
    4470:	46aa      	mov	sl, r5
    4472:	9d02      	ldr	r5, [sp, #8]
    4474:	4455      	add	r5, sl
    4476:	45a9      	cmp	r9, r5
    4478:	d906      	bls.n	4488 <__aeabi_dmul+0x238>
    447a:	468a      	mov	sl, r1
    447c:	2180      	movs	r1, #128	; 0x80
    447e:	0249      	lsls	r1, r1, #9
    4480:	4689      	mov	r9, r1
    4482:	44ca      	add	sl, r9
    4484:	4651      	mov	r1, sl
    4486:	9103      	str	r1, [sp, #12]
    4488:	0c29      	lsrs	r1, r5, #16
    448a:	9104      	str	r1, [sp, #16]
    448c:	4641      	mov	r1, r8
    448e:	0409      	lsls	r1, r1, #16
    4490:	042d      	lsls	r5, r5, #16
    4492:	0c09      	lsrs	r1, r1, #16
    4494:	4688      	mov	r8, r1
    4496:	0029      	movs	r1, r5
    4498:	0c25      	lsrs	r5, r4, #16
    449a:	0424      	lsls	r4, r4, #16
    449c:	4441      	add	r1, r8
    449e:	0c24      	lsrs	r4, r4, #16
    44a0:	9105      	str	r1, [sp, #20]
    44a2:	0021      	movs	r1, r4
    44a4:	4341      	muls	r1, r0
    44a6:	4688      	mov	r8, r1
    44a8:	0021      	movs	r1, r4
    44aa:	4379      	muls	r1, r7
    44ac:	468a      	mov	sl, r1
    44ae:	4368      	muls	r0, r5
    44b0:	4641      	mov	r1, r8
    44b2:	4450      	add	r0, sl
    44b4:	4681      	mov	r9, r0
    44b6:	0c08      	lsrs	r0, r1, #16
    44b8:	4448      	add	r0, r9
    44ba:	436f      	muls	r7, r5
    44bc:	4582      	cmp	sl, r0
    44be:	d903      	bls.n	44c8 <__aeabi_dmul+0x278>
    44c0:	2180      	movs	r1, #128	; 0x80
    44c2:	0249      	lsls	r1, r1, #9
    44c4:	4689      	mov	r9, r1
    44c6:	444f      	add	r7, r9
    44c8:	0c01      	lsrs	r1, r0, #16
    44ca:	4689      	mov	r9, r1
    44cc:	0039      	movs	r1, r7
    44ce:	4449      	add	r1, r9
    44d0:	9102      	str	r1, [sp, #8]
    44d2:	4641      	mov	r1, r8
    44d4:	040f      	lsls	r7, r1, #16
    44d6:	9904      	ldr	r1, [sp, #16]
    44d8:	0c3f      	lsrs	r7, r7, #16
    44da:	4688      	mov	r8, r1
    44dc:	0400      	lsls	r0, r0, #16
    44de:	19c0      	adds	r0, r0, r7
    44e0:	4480      	add	r8, r0
    44e2:	4641      	mov	r1, r8
    44e4:	9104      	str	r1, [sp, #16]
    44e6:	4659      	mov	r1, fp
    44e8:	0c0f      	lsrs	r7, r1, #16
    44ea:	0409      	lsls	r1, r1, #16
    44ec:	0c09      	lsrs	r1, r1, #16
    44ee:	4688      	mov	r8, r1
    44f0:	4359      	muls	r1, r3
    44f2:	468a      	mov	sl, r1
    44f4:	0039      	movs	r1, r7
    44f6:	4351      	muls	r1, r2
    44f8:	4689      	mov	r9, r1
    44fa:	4641      	mov	r1, r8
    44fc:	434a      	muls	r2, r1
    44fe:	4651      	mov	r1, sl
    4500:	0c09      	lsrs	r1, r1, #16
    4502:	468b      	mov	fp, r1
    4504:	437b      	muls	r3, r7
    4506:	18d2      	adds	r2, r2, r3
    4508:	445a      	add	r2, fp
    450a:	4293      	cmp	r3, r2
    450c:	d903      	bls.n	4516 <__aeabi_dmul+0x2c6>
    450e:	2380      	movs	r3, #128	; 0x80
    4510:	025b      	lsls	r3, r3, #9
    4512:	469b      	mov	fp, r3
    4514:	44d9      	add	r9, fp
    4516:	4651      	mov	r1, sl
    4518:	0409      	lsls	r1, r1, #16
    451a:	0c09      	lsrs	r1, r1, #16
    451c:	468a      	mov	sl, r1
    451e:	4641      	mov	r1, r8
    4520:	4361      	muls	r1, r4
    4522:	437c      	muls	r4, r7
    4524:	0c13      	lsrs	r3, r2, #16
    4526:	0412      	lsls	r2, r2, #16
    4528:	444b      	add	r3, r9
    452a:	4452      	add	r2, sl
    452c:	46a1      	mov	r9, r4
    452e:	468a      	mov	sl, r1
    4530:	003c      	movs	r4, r7
    4532:	4641      	mov	r1, r8
    4534:	436c      	muls	r4, r5
    4536:	434d      	muls	r5, r1
    4538:	4651      	mov	r1, sl
    453a:	444d      	add	r5, r9
    453c:	0c0f      	lsrs	r7, r1, #16
    453e:	197d      	adds	r5, r7, r5
    4540:	45a9      	cmp	r9, r5
    4542:	d903      	bls.n	454c <__aeabi_dmul+0x2fc>
    4544:	2180      	movs	r1, #128	; 0x80
    4546:	0249      	lsls	r1, r1, #9
    4548:	4688      	mov	r8, r1
    454a:	4444      	add	r4, r8
    454c:	9f04      	ldr	r7, [sp, #16]
    454e:	9903      	ldr	r1, [sp, #12]
    4550:	46b8      	mov	r8, r7
    4552:	4441      	add	r1, r8
    4554:	468b      	mov	fp, r1
    4556:	4583      	cmp	fp, r0
    4558:	4180      	sbcs	r0, r0
    455a:	4241      	negs	r1, r0
    455c:	4688      	mov	r8, r1
    455e:	4651      	mov	r1, sl
    4560:	0408      	lsls	r0, r1, #16
    4562:	042f      	lsls	r7, r5, #16
    4564:	0c00      	lsrs	r0, r0, #16
    4566:	183f      	adds	r7, r7, r0
    4568:	4658      	mov	r0, fp
    456a:	9902      	ldr	r1, [sp, #8]
    456c:	1810      	adds	r0, r2, r0
    456e:	4689      	mov	r9, r1
    4570:	4290      	cmp	r0, r2
    4572:	4192      	sbcs	r2, r2
    4574:	444f      	add	r7, r9
    4576:	46ba      	mov	sl, r7
    4578:	4252      	negs	r2, r2
    457a:	4699      	mov	r9, r3
    457c:	4693      	mov	fp, r2
    457e:	44c2      	add	sl, r8
    4580:	44d1      	add	r9, sl
    4582:	44cb      	add	fp, r9
    4584:	428f      	cmp	r7, r1
    4586:	41bf      	sbcs	r7, r7
    4588:	45c2      	cmp	sl, r8
    458a:	4189      	sbcs	r1, r1
    458c:	4599      	cmp	r9, r3
    458e:	419b      	sbcs	r3, r3
    4590:	4593      	cmp	fp, r2
    4592:	4192      	sbcs	r2, r2
    4594:	427f      	negs	r7, r7
    4596:	4249      	negs	r1, r1
    4598:	0c2d      	lsrs	r5, r5, #16
    459a:	4252      	negs	r2, r2
    459c:	430f      	orrs	r7, r1
    459e:	425b      	negs	r3, r3
    45a0:	4313      	orrs	r3, r2
    45a2:	197f      	adds	r7, r7, r5
    45a4:	18ff      	adds	r7, r7, r3
    45a6:	465b      	mov	r3, fp
    45a8:	193c      	adds	r4, r7, r4
    45aa:	0ddb      	lsrs	r3, r3, #23
    45ac:	9a05      	ldr	r2, [sp, #20]
    45ae:	0264      	lsls	r4, r4, #9
    45b0:	431c      	orrs	r4, r3
    45b2:	0243      	lsls	r3, r0, #9
    45b4:	4313      	orrs	r3, r2
    45b6:	1e5d      	subs	r5, r3, #1
    45b8:	41ab      	sbcs	r3, r5
    45ba:	465a      	mov	r2, fp
    45bc:	0dc0      	lsrs	r0, r0, #23
    45be:	4303      	orrs	r3, r0
    45c0:	0252      	lsls	r2, r2, #9
    45c2:	4313      	orrs	r3, r2
    45c4:	01e2      	lsls	r2, r4, #7
    45c6:	d556      	bpl.n	4676 <__aeabi_dmul+0x426>
    45c8:	2001      	movs	r0, #1
    45ca:	085a      	lsrs	r2, r3, #1
    45cc:	4003      	ands	r3, r0
    45ce:	4313      	orrs	r3, r2
    45d0:	07e2      	lsls	r2, r4, #31
    45d2:	4313      	orrs	r3, r2
    45d4:	0864      	lsrs	r4, r4, #1
    45d6:	485a      	ldr	r0, [pc, #360]	; (4740 <__aeabi_dmul+0x4f0>)
    45d8:	4460      	add	r0, ip
    45da:	2800      	cmp	r0, #0
    45dc:	dd4d      	ble.n	467a <__aeabi_dmul+0x42a>
    45de:	075a      	lsls	r2, r3, #29
    45e0:	d009      	beq.n	45f6 <__aeabi_dmul+0x3a6>
    45e2:	220f      	movs	r2, #15
    45e4:	401a      	ands	r2, r3
    45e6:	2a04      	cmp	r2, #4
    45e8:	d005      	beq.n	45f6 <__aeabi_dmul+0x3a6>
    45ea:	1d1a      	adds	r2, r3, #4
    45ec:	429a      	cmp	r2, r3
    45ee:	419b      	sbcs	r3, r3
    45f0:	425b      	negs	r3, r3
    45f2:	18e4      	adds	r4, r4, r3
    45f4:	0013      	movs	r3, r2
    45f6:	01e2      	lsls	r2, r4, #7
    45f8:	d504      	bpl.n	4604 <__aeabi_dmul+0x3b4>
    45fa:	2080      	movs	r0, #128	; 0x80
    45fc:	4a51      	ldr	r2, [pc, #324]	; (4744 <__aeabi_dmul+0x4f4>)
    45fe:	00c0      	lsls	r0, r0, #3
    4600:	4014      	ands	r4, r2
    4602:	4460      	add	r0, ip
    4604:	4a50      	ldr	r2, [pc, #320]	; (4748 <__aeabi_dmul+0x4f8>)
    4606:	4290      	cmp	r0, r2
    4608:	dd00      	ble.n	460c <__aeabi_dmul+0x3bc>
    460a:	e6e3      	b.n	43d4 <__aeabi_dmul+0x184>
    460c:	2501      	movs	r5, #1
    460e:	08db      	lsrs	r3, r3, #3
    4610:	0762      	lsls	r2, r4, #29
    4612:	431a      	orrs	r2, r3
    4614:	0264      	lsls	r4, r4, #9
    4616:	9b01      	ldr	r3, [sp, #4]
    4618:	4691      	mov	r9, r2
    461a:	0b22      	lsrs	r2, r4, #12
    461c:	0544      	lsls	r4, r0, #21
    461e:	0d64      	lsrs	r4, r4, #21
    4620:	401d      	ands	r5, r3
    4622:	e67c      	b.n	431e <__aeabi_dmul+0xce>
    4624:	2280      	movs	r2, #128	; 0x80
    4626:	4659      	mov	r1, fp
    4628:	0312      	lsls	r2, r2, #12
    462a:	4211      	tst	r1, r2
    462c:	d008      	beq.n	4640 <__aeabi_dmul+0x3f0>
    462e:	4214      	tst	r4, r2
    4630:	d106      	bne.n	4640 <__aeabi_dmul+0x3f0>
    4632:	4322      	orrs	r2, r4
    4634:	0312      	lsls	r2, r2, #12
    4636:	0b12      	lsrs	r2, r2, #12
    4638:	4645      	mov	r5, r8
    463a:	4699      	mov	r9, r3
    463c:	4c43      	ldr	r4, [pc, #268]	; (474c <__aeabi_dmul+0x4fc>)
    463e:	e66e      	b.n	431e <__aeabi_dmul+0xce>
    4640:	465b      	mov	r3, fp
    4642:	431a      	orrs	r2, r3
    4644:	0312      	lsls	r2, r2, #12
    4646:	0b12      	lsrs	r2, r2, #12
    4648:	4c40      	ldr	r4, [pc, #256]	; (474c <__aeabi_dmul+0x4fc>)
    464a:	e668      	b.n	431e <__aeabi_dmul+0xce>
    464c:	0003      	movs	r3, r0
    464e:	4654      	mov	r4, sl
    4650:	3b28      	subs	r3, #40	; 0x28
    4652:	409c      	lsls	r4, r3
    4654:	2300      	movs	r3, #0
    4656:	e6b9      	b.n	43cc <__aeabi_dmul+0x17c>
    4658:	f000 fd1a 	bl	5090 <__clzsi2>
    465c:	3020      	adds	r0, #32
    465e:	e6a6      	b.n	43ae <__aeabi_dmul+0x15e>
    4660:	0003      	movs	r3, r0
    4662:	3b28      	subs	r3, #40	; 0x28
    4664:	409f      	lsls	r7, r3
    4666:	2300      	movs	r3, #0
    4668:	46bb      	mov	fp, r7
    466a:	4699      	mov	r9, r3
    466c:	e68a      	b.n	4384 <__aeabi_dmul+0x134>
    466e:	f000 fd0f 	bl	5090 <__clzsi2>
    4672:	3020      	adds	r0, #32
    4674:	e674      	b.n	4360 <__aeabi_dmul+0x110>
    4676:	46b4      	mov	ip, r6
    4678:	e7ad      	b.n	45d6 <__aeabi_dmul+0x386>
    467a:	2501      	movs	r5, #1
    467c:	1a2a      	subs	r2, r5, r0
    467e:	2a38      	cmp	r2, #56	; 0x38
    4680:	dd06      	ble.n	4690 <__aeabi_dmul+0x440>
    4682:	9b01      	ldr	r3, [sp, #4]
    4684:	2400      	movs	r4, #0
    4686:	401d      	ands	r5, r3
    4688:	2300      	movs	r3, #0
    468a:	2200      	movs	r2, #0
    468c:	4699      	mov	r9, r3
    468e:	e646      	b.n	431e <__aeabi_dmul+0xce>
    4690:	2a1f      	cmp	r2, #31
    4692:	dc21      	bgt.n	46d8 <__aeabi_dmul+0x488>
    4694:	2520      	movs	r5, #32
    4696:	0020      	movs	r0, r4
    4698:	1aad      	subs	r5, r5, r2
    469a:	001e      	movs	r6, r3
    469c:	40ab      	lsls	r3, r5
    469e:	40a8      	lsls	r0, r5
    46a0:	40d6      	lsrs	r6, r2
    46a2:	1e5d      	subs	r5, r3, #1
    46a4:	41ab      	sbcs	r3, r5
    46a6:	4330      	orrs	r0, r6
    46a8:	4318      	orrs	r0, r3
    46aa:	40d4      	lsrs	r4, r2
    46ac:	0743      	lsls	r3, r0, #29
    46ae:	d009      	beq.n	46c4 <__aeabi_dmul+0x474>
    46b0:	230f      	movs	r3, #15
    46b2:	4003      	ands	r3, r0
    46b4:	2b04      	cmp	r3, #4
    46b6:	d005      	beq.n	46c4 <__aeabi_dmul+0x474>
    46b8:	0003      	movs	r3, r0
    46ba:	1d18      	adds	r0, r3, #4
    46bc:	4298      	cmp	r0, r3
    46be:	419b      	sbcs	r3, r3
    46c0:	425b      	negs	r3, r3
    46c2:	18e4      	adds	r4, r4, r3
    46c4:	0223      	lsls	r3, r4, #8
    46c6:	d521      	bpl.n	470c <__aeabi_dmul+0x4bc>
    46c8:	2501      	movs	r5, #1
    46ca:	9b01      	ldr	r3, [sp, #4]
    46cc:	2401      	movs	r4, #1
    46ce:	401d      	ands	r5, r3
    46d0:	2300      	movs	r3, #0
    46d2:	2200      	movs	r2, #0
    46d4:	4699      	mov	r9, r3
    46d6:	e622      	b.n	431e <__aeabi_dmul+0xce>
    46d8:	251f      	movs	r5, #31
    46da:	0021      	movs	r1, r4
    46dc:	426d      	negs	r5, r5
    46de:	1a28      	subs	r0, r5, r0
    46e0:	40c1      	lsrs	r1, r0
    46e2:	0008      	movs	r0, r1
    46e4:	2a20      	cmp	r2, #32
    46e6:	d01d      	beq.n	4724 <__aeabi_dmul+0x4d4>
    46e8:	355f      	adds	r5, #95	; 0x5f
    46ea:	1aaa      	subs	r2, r5, r2
    46ec:	4094      	lsls	r4, r2
    46ee:	4323      	orrs	r3, r4
    46f0:	1e5c      	subs	r4, r3, #1
    46f2:	41a3      	sbcs	r3, r4
    46f4:	2507      	movs	r5, #7
    46f6:	4303      	orrs	r3, r0
    46f8:	401d      	ands	r5, r3
    46fa:	2200      	movs	r2, #0
    46fc:	2d00      	cmp	r5, #0
    46fe:	d009      	beq.n	4714 <__aeabi_dmul+0x4c4>
    4700:	220f      	movs	r2, #15
    4702:	2400      	movs	r4, #0
    4704:	401a      	ands	r2, r3
    4706:	0018      	movs	r0, r3
    4708:	2a04      	cmp	r2, #4
    470a:	d1d6      	bne.n	46ba <__aeabi_dmul+0x46a>
    470c:	0003      	movs	r3, r0
    470e:	0765      	lsls	r5, r4, #29
    4710:	0264      	lsls	r4, r4, #9
    4712:	0b22      	lsrs	r2, r4, #12
    4714:	08db      	lsrs	r3, r3, #3
    4716:	432b      	orrs	r3, r5
    4718:	2501      	movs	r5, #1
    471a:	4699      	mov	r9, r3
    471c:	9b01      	ldr	r3, [sp, #4]
    471e:	2400      	movs	r4, #0
    4720:	401d      	ands	r5, r3
    4722:	e5fc      	b.n	431e <__aeabi_dmul+0xce>
    4724:	2400      	movs	r4, #0
    4726:	e7e2      	b.n	46ee <__aeabi_dmul+0x49e>
    4728:	2280      	movs	r2, #128	; 0x80
    472a:	2501      	movs	r5, #1
    472c:	0312      	lsls	r2, r2, #12
    472e:	4322      	orrs	r2, r4
    4730:	9901      	ldr	r1, [sp, #4]
    4732:	0312      	lsls	r2, r2, #12
    4734:	0b12      	lsrs	r2, r2, #12
    4736:	400d      	ands	r5, r1
    4738:	4699      	mov	r9, r3
    473a:	4c04      	ldr	r4, [pc, #16]	; (474c <__aeabi_dmul+0x4fc>)
    473c:	e5ef      	b.n	431e <__aeabi_dmul+0xce>
    473e:	46c0      	nop			; (mov r8, r8)
    4740:	000003ff 	.word	0x000003ff
    4744:	feffffff 	.word	0xfeffffff
    4748:	000007fe 	.word	0x000007fe
    474c:	000007ff 	.word	0x000007ff

00004750 <__aeabi_dsub>:
    4750:	b5f0      	push	{r4, r5, r6, r7, lr}
    4752:	4646      	mov	r6, r8
    4754:	46d6      	mov	lr, sl
    4756:	464f      	mov	r7, r9
    4758:	030c      	lsls	r4, r1, #12
    475a:	b5c0      	push	{r6, r7, lr}
    475c:	0fcd      	lsrs	r5, r1, #31
    475e:	004e      	lsls	r6, r1, #1
    4760:	0a61      	lsrs	r1, r4, #9
    4762:	0f44      	lsrs	r4, r0, #29
    4764:	430c      	orrs	r4, r1
    4766:	00c1      	lsls	r1, r0, #3
    4768:	0058      	lsls	r0, r3, #1
    476a:	0d40      	lsrs	r0, r0, #21
    476c:	4684      	mov	ip, r0
    476e:	468a      	mov	sl, r1
    4770:	000f      	movs	r7, r1
    4772:	0319      	lsls	r1, r3, #12
    4774:	0f50      	lsrs	r0, r2, #29
    4776:	0a49      	lsrs	r1, r1, #9
    4778:	4301      	orrs	r1, r0
    477a:	48c6      	ldr	r0, [pc, #792]	; (4a94 <__aeabi_dsub+0x344>)
    477c:	0d76      	lsrs	r6, r6, #21
    477e:	46a8      	mov	r8, r5
    4780:	0fdb      	lsrs	r3, r3, #31
    4782:	00d2      	lsls	r2, r2, #3
    4784:	4584      	cmp	ip, r0
    4786:	d100      	bne.n	478a <__aeabi_dsub+0x3a>
    4788:	e0d8      	b.n	493c <__aeabi_dsub+0x1ec>
    478a:	2001      	movs	r0, #1
    478c:	4043      	eors	r3, r0
    478e:	42ab      	cmp	r3, r5
    4790:	d100      	bne.n	4794 <__aeabi_dsub+0x44>
    4792:	e0a6      	b.n	48e2 <__aeabi_dsub+0x192>
    4794:	4660      	mov	r0, ip
    4796:	1a35      	subs	r5, r6, r0
    4798:	2d00      	cmp	r5, #0
    479a:	dc00      	bgt.n	479e <__aeabi_dsub+0x4e>
    479c:	e105      	b.n	49aa <__aeabi_dsub+0x25a>
    479e:	2800      	cmp	r0, #0
    47a0:	d110      	bne.n	47c4 <__aeabi_dsub+0x74>
    47a2:	000b      	movs	r3, r1
    47a4:	4313      	orrs	r3, r2
    47a6:	d100      	bne.n	47aa <__aeabi_dsub+0x5a>
    47a8:	e0d7      	b.n	495a <__aeabi_dsub+0x20a>
    47aa:	1e6b      	subs	r3, r5, #1
    47ac:	2b00      	cmp	r3, #0
    47ae:	d000      	beq.n	47b2 <__aeabi_dsub+0x62>
    47b0:	e14b      	b.n	4a4a <__aeabi_dsub+0x2fa>
    47b2:	4653      	mov	r3, sl
    47b4:	1a9f      	subs	r7, r3, r2
    47b6:	45ba      	cmp	sl, r7
    47b8:	4180      	sbcs	r0, r0
    47ba:	1a64      	subs	r4, r4, r1
    47bc:	4240      	negs	r0, r0
    47be:	1a24      	subs	r4, r4, r0
    47c0:	2601      	movs	r6, #1
    47c2:	e01e      	b.n	4802 <__aeabi_dsub+0xb2>
    47c4:	4bb3      	ldr	r3, [pc, #716]	; (4a94 <__aeabi_dsub+0x344>)
    47c6:	429e      	cmp	r6, r3
    47c8:	d048      	beq.n	485c <__aeabi_dsub+0x10c>
    47ca:	2380      	movs	r3, #128	; 0x80
    47cc:	041b      	lsls	r3, r3, #16
    47ce:	4319      	orrs	r1, r3
    47d0:	2d38      	cmp	r5, #56	; 0x38
    47d2:	dd00      	ble.n	47d6 <__aeabi_dsub+0x86>
    47d4:	e119      	b.n	4a0a <__aeabi_dsub+0x2ba>
    47d6:	2d1f      	cmp	r5, #31
    47d8:	dd00      	ble.n	47dc <__aeabi_dsub+0x8c>
    47da:	e14c      	b.n	4a76 <__aeabi_dsub+0x326>
    47dc:	2320      	movs	r3, #32
    47de:	000f      	movs	r7, r1
    47e0:	1b5b      	subs	r3, r3, r5
    47e2:	0010      	movs	r0, r2
    47e4:	409a      	lsls	r2, r3
    47e6:	409f      	lsls	r7, r3
    47e8:	40e8      	lsrs	r0, r5
    47ea:	1e53      	subs	r3, r2, #1
    47ec:	419a      	sbcs	r2, r3
    47ee:	40e9      	lsrs	r1, r5
    47f0:	4307      	orrs	r7, r0
    47f2:	4317      	orrs	r7, r2
    47f4:	4653      	mov	r3, sl
    47f6:	1bdf      	subs	r7, r3, r7
    47f8:	1a61      	subs	r1, r4, r1
    47fa:	45ba      	cmp	sl, r7
    47fc:	41a4      	sbcs	r4, r4
    47fe:	4264      	negs	r4, r4
    4800:	1b0c      	subs	r4, r1, r4
    4802:	0223      	lsls	r3, r4, #8
    4804:	d400      	bmi.n	4808 <__aeabi_dsub+0xb8>
    4806:	e0c5      	b.n	4994 <__aeabi_dsub+0x244>
    4808:	0264      	lsls	r4, r4, #9
    480a:	0a65      	lsrs	r5, r4, #9
    480c:	2d00      	cmp	r5, #0
    480e:	d100      	bne.n	4812 <__aeabi_dsub+0xc2>
    4810:	e0f6      	b.n	4a00 <__aeabi_dsub+0x2b0>
    4812:	0028      	movs	r0, r5
    4814:	f000 fc3c 	bl	5090 <__clzsi2>
    4818:	0003      	movs	r3, r0
    481a:	3b08      	subs	r3, #8
    481c:	2b1f      	cmp	r3, #31
    481e:	dd00      	ble.n	4822 <__aeabi_dsub+0xd2>
    4820:	e0e9      	b.n	49f6 <__aeabi_dsub+0x2a6>
    4822:	2220      	movs	r2, #32
    4824:	003c      	movs	r4, r7
    4826:	1ad2      	subs	r2, r2, r3
    4828:	409d      	lsls	r5, r3
    482a:	40d4      	lsrs	r4, r2
    482c:	409f      	lsls	r7, r3
    482e:	4325      	orrs	r5, r4
    4830:	429e      	cmp	r6, r3
    4832:	dd00      	ble.n	4836 <__aeabi_dsub+0xe6>
    4834:	e0db      	b.n	49ee <__aeabi_dsub+0x29e>
    4836:	1b9e      	subs	r6, r3, r6
    4838:	1c73      	adds	r3, r6, #1
    483a:	2b1f      	cmp	r3, #31
    483c:	dd00      	ble.n	4840 <__aeabi_dsub+0xf0>
    483e:	e10a      	b.n	4a56 <__aeabi_dsub+0x306>
    4840:	2220      	movs	r2, #32
    4842:	0038      	movs	r0, r7
    4844:	1ad2      	subs	r2, r2, r3
    4846:	0029      	movs	r1, r5
    4848:	4097      	lsls	r7, r2
    484a:	002c      	movs	r4, r5
    484c:	4091      	lsls	r1, r2
    484e:	40d8      	lsrs	r0, r3
    4850:	1e7a      	subs	r2, r7, #1
    4852:	4197      	sbcs	r7, r2
    4854:	40dc      	lsrs	r4, r3
    4856:	2600      	movs	r6, #0
    4858:	4301      	orrs	r1, r0
    485a:	430f      	orrs	r7, r1
    485c:	077b      	lsls	r3, r7, #29
    485e:	d009      	beq.n	4874 <__aeabi_dsub+0x124>
    4860:	230f      	movs	r3, #15
    4862:	403b      	ands	r3, r7
    4864:	2b04      	cmp	r3, #4
    4866:	d005      	beq.n	4874 <__aeabi_dsub+0x124>
    4868:	1d3b      	adds	r3, r7, #4
    486a:	42bb      	cmp	r3, r7
    486c:	41bf      	sbcs	r7, r7
    486e:	427f      	negs	r7, r7
    4870:	19e4      	adds	r4, r4, r7
    4872:	001f      	movs	r7, r3
    4874:	0223      	lsls	r3, r4, #8
    4876:	d525      	bpl.n	48c4 <__aeabi_dsub+0x174>
    4878:	4b86      	ldr	r3, [pc, #536]	; (4a94 <__aeabi_dsub+0x344>)
    487a:	3601      	adds	r6, #1
    487c:	429e      	cmp	r6, r3
    487e:	d100      	bne.n	4882 <__aeabi_dsub+0x132>
    4880:	e0af      	b.n	49e2 <__aeabi_dsub+0x292>
    4882:	4b85      	ldr	r3, [pc, #532]	; (4a98 <__aeabi_dsub+0x348>)
    4884:	2501      	movs	r5, #1
    4886:	401c      	ands	r4, r3
    4888:	4643      	mov	r3, r8
    488a:	0762      	lsls	r2, r4, #29
    488c:	08ff      	lsrs	r7, r7, #3
    488e:	0264      	lsls	r4, r4, #9
    4890:	0576      	lsls	r6, r6, #21
    4892:	4317      	orrs	r7, r2
    4894:	0b24      	lsrs	r4, r4, #12
    4896:	0d76      	lsrs	r6, r6, #21
    4898:	401d      	ands	r5, r3
    489a:	2100      	movs	r1, #0
    489c:	0324      	lsls	r4, r4, #12
    489e:	0b23      	lsrs	r3, r4, #12
    48a0:	0d0c      	lsrs	r4, r1, #20
    48a2:	4a7e      	ldr	r2, [pc, #504]	; (4a9c <__aeabi_dsub+0x34c>)
    48a4:	0524      	lsls	r4, r4, #20
    48a6:	431c      	orrs	r4, r3
    48a8:	4014      	ands	r4, r2
    48aa:	0533      	lsls	r3, r6, #20
    48ac:	4323      	orrs	r3, r4
    48ae:	005b      	lsls	r3, r3, #1
    48b0:	07ed      	lsls	r5, r5, #31
    48b2:	085b      	lsrs	r3, r3, #1
    48b4:	432b      	orrs	r3, r5
    48b6:	0038      	movs	r0, r7
    48b8:	0019      	movs	r1, r3
    48ba:	bc1c      	pop	{r2, r3, r4}
    48bc:	4690      	mov	r8, r2
    48be:	4699      	mov	r9, r3
    48c0:	46a2      	mov	sl, r4
    48c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48c4:	2501      	movs	r5, #1
    48c6:	4643      	mov	r3, r8
    48c8:	0762      	lsls	r2, r4, #29
    48ca:	08ff      	lsrs	r7, r7, #3
    48cc:	4317      	orrs	r7, r2
    48ce:	08e4      	lsrs	r4, r4, #3
    48d0:	401d      	ands	r5, r3
    48d2:	4b70      	ldr	r3, [pc, #448]	; (4a94 <__aeabi_dsub+0x344>)
    48d4:	429e      	cmp	r6, r3
    48d6:	d036      	beq.n	4946 <__aeabi_dsub+0x1f6>
    48d8:	0324      	lsls	r4, r4, #12
    48da:	0576      	lsls	r6, r6, #21
    48dc:	0b24      	lsrs	r4, r4, #12
    48de:	0d76      	lsrs	r6, r6, #21
    48e0:	e7db      	b.n	489a <__aeabi_dsub+0x14a>
    48e2:	4663      	mov	r3, ip
    48e4:	1af3      	subs	r3, r6, r3
    48e6:	2b00      	cmp	r3, #0
    48e8:	dc00      	bgt.n	48ec <__aeabi_dsub+0x19c>
    48ea:	e094      	b.n	4a16 <__aeabi_dsub+0x2c6>
    48ec:	4660      	mov	r0, ip
    48ee:	2800      	cmp	r0, #0
    48f0:	d035      	beq.n	495e <__aeabi_dsub+0x20e>
    48f2:	4868      	ldr	r0, [pc, #416]	; (4a94 <__aeabi_dsub+0x344>)
    48f4:	4286      	cmp	r6, r0
    48f6:	d0b1      	beq.n	485c <__aeabi_dsub+0x10c>
    48f8:	2780      	movs	r7, #128	; 0x80
    48fa:	043f      	lsls	r7, r7, #16
    48fc:	4339      	orrs	r1, r7
    48fe:	2b38      	cmp	r3, #56	; 0x38
    4900:	dc00      	bgt.n	4904 <__aeabi_dsub+0x1b4>
    4902:	e0fd      	b.n	4b00 <__aeabi_dsub+0x3b0>
    4904:	430a      	orrs	r2, r1
    4906:	0017      	movs	r7, r2
    4908:	2100      	movs	r1, #0
    490a:	1e7a      	subs	r2, r7, #1
    490c:	4197      	sbcs	r7, r2
    490e:	4457      	add	r7, sl
    4910:	4557      	cmp	r7, sl
    4912:	4180      	sbcs	r0, r0
    4914:	1909      	adds	r1, r1, r4
    4916:	4244      	negs	r4, r0
    4918:	190c      	adds	r4, r1, r4
    491a:	0223      	lsls	r3, r4, #8
    491c:	d53a      	bpl.n	4994 <__aeabi_dsub+0x244>
    491e:	4b5d      	ldr	r3, [pc, #372]	; (4a94 <__aeabi_dsub+0x344>)
    4920:	3601      	adds	r6, #1
    4922:	429e      	cmp	r6, r3
    4924:	d100      	bne.n	4928 <__aeabi_dsub+0x1d8>
    4926:	e14b      	b.n	4bc0 <__aeabi_dsub+0x470>
    4928:	2201      	movs	r2, #1
    492a:	4b5b      	ldr	r3, [pc, #364]	; (4a98 <__aeabi_dsub+0x348>)
    492c:	401c      	ands	r4, r3
    492e:	087b      	lsrs	r3, r7, #1
    4930:	4017      	ands	r7, r2
    4932:	431f      	orrs	r7, r3
    4934:	07e2      	lsls	r2, r4, #31
    4936:	4317      	orrs	r7, r2
    4938:	0864      	lsrs	r4, r4, #1
    493a:	e78f      	b.n	485c <__aeabi_dsub+0x10c>
    493c:	0008      	movs	r0, r1
    493e:	4310      	orrs	r0, r2
    4940:	d000      	beq.n	4944 <__aeabi_dsub+0x1f4>
    4942:	e724      	b.n	478e <__aeabi_dsub+0x3e>
    4944:	e721      	b.n	478a <__aeabi_dsub+0x3a>
    4946:	0023      	movs	r3, r4
    4948:	433b      	orrs	r3, r7
    494a:	d100      	bne.n	494e <__aeabi_dsub+0x1fe>
    494c:	e1b9      	b.n	4cc2 <__aeabi_dsub+0x572>
    494e:	2280      	movs	r2, #128	; 0x80
    4950:	0312      	lsls	r2, r2, #12
    4952:	4314      	orrs	r4, r2
    4954:	0324      	lsls	r4, r4, #12
    4956:	0b24      	lsrs	r4, r4, #12
    4958:	e79f      	b.n	489a <__aeabi_dsub+0x14a>
    495a:	002e      	movs	r6, r5
    495c:	e77e      	b.n	485c <__aeabi_dsub+0x10c>
    495e:	0008      	movs	r0, r1
    4960:	4310      	orrs	r0, r2
    4962:	d100      	bne.n	4966 <__aeabi_dsub+0x216>
    4964:	e0ca      	b.n	4afc <__aeabi_dsub+0x3ac>
    4966:	1e58      	subs	r0, r3, #1
    4968:	4684      	mov	ip, r0
    496a:	2800      	cmp	r0, #0
    496c:	d000      	beq.n	4970 <__aeabi_dsub+0x220>
    496e:	e0e7      	b.n	4b40 <__aeabi_dsub+0x3f0>
    4970:	4452      	add	r2, sl
    4972:	4552      	cmp	r2, sl
    4974:	4180      	sbcs	r0, r0
    4976:	1864      	adds	r4, r4, r1
    4978:	4240      	negs	r0, r0
    497a:	1824      	adds	r4, r4, r0
    497c:	0017      	movs	r7, r2
    497e:	2601      	movs	r6, #1
    4980:	0223      	lsls	r3, r4, #8
    4982:	d507      	bpl.n	4994 <__aeabi_dsub+0x244>
    4984:	2602      	movs	r6, #2
    4986:	e7cf      	b.n	4928 <__aeabi_dsub+0x1d8>
    4988:	4664      	mov	r4, ip
    498a:	432c      	orrs	r4, r5
    498c:	d100      	bne.n	4990 <__aeabi_dsub+0x240>
    498e:	e1b3      	b.n	4cf8 <__aeabi_dsub+0x5a8>
    4990:	002c      	movs	r4, r5
    4992:	4667      	mov	r7, ip
    4994:	077b      	lsls	r3, r7, #29
    4996:	d000      	beq.n	499a <__aeabi_dsub+0x24a>
    4998:	e762      	b.n	4860 <__aeabi_dsub+0x110>
    499a:	0763      	lsls	r3, r4, #29
    499c:	08ff      	lsrs	r7, r7, #3
    499e:	431f      	orrs	r7, r3
    49a0:	2501      	movs	r5, #1
    49a2:	4643      	mov	r3, r8
    49a4:	08e4      	lsrs	r4, r4, #3
    49a6:	401d      	ands	r5, r3
    49a8:	e793      	b.n	48d2 <__aeabi_dsub+0x182>
    49aa:	2d00      	cmp	r5, #0
    49ac:	d178      	bne.n	4aa0 <__aeabi_dsub+0x350>
    49ae:	1c75      	adds	r5, r6, #1
    49b0:	056d      	lsls	r5, r5, #21
    49b2:	0d6d      	lsrs	r5, r5, #21
    49b4:	2d01      	cmp	r5, #1
    49b6:	dc00      	bgt.n	49ba <__aeabi_dsub+0x26a>
    49b8:	e0f2      	b.n	4ba0 <__aeabi_dsub+0x450>
    49ba:	4650      	mov	r0, sl
    49bc:	1a80      	subs	r0, r0, r2
    49be:	4582      	cmp	sl, r0
    49c0:	41bf      	sbcs	r7, r7
    49c2:	1a65      	subs	r5, r4, r1
    49c4:	427f      	negs	r7, r7
    49c6:	1bed      	subs	r5, r5, r7
    49c8:	4684      	mov	ip, r0
    49ca:	0228      	lsls	r0, r5, #8
    49cc:	d400      	bmi.n	49d0 <__aeabi_dsub+0x280>
    49ce:	e08c      	b.n	4aea <__aeabi_dsub+0x39a>
    49d0:	4650      	mov	r0, sl
    49d2:	1a17      	subs	r7, r2, r0
    49d4:	42ba      	cmp	r2, r7
    49d6:	4192      	sbcs	r2, r2
    49d8:	1b0c      	subs	r4, r1, r4
    49da:	4255      	negs	r5, r2
    49dc:	1b65      	subs	r5, r4, r5
    49de:	4698      	mov	r8, r3
    49e0:	e714      	b.n	480c <__aeabi_dsub+0xbc>
    49e2:	2501      	movs	r5, #1
    49e4:	4643      	mov	r3, r8
    49e6:	2400      	movs	r4, #0
    49e8:	401d      	ands	r5, r3
    49ea:	2700      	movs	r7, #0
    49ec:	e755      	b.n	489a <__aeabi_dsub+0x14a>
    49ee:	4c2a      	ldr	r4, [pc, #168]	; (4a98 <__aeabi_dsub+0x348>)
    49f0:	1af6      	subs	r6, r6, r3
    49f2:	402c      	ands	r4, r5
    49f4:	e732      	b.n	485c <__aeabi_dsub+0x10c>
    49f6:	003d      	movs	r5, r7
    49f8:	3828      	subs	r0, #40	; 0x28
    49fa:	4085      	lsls	r5, r0
    49fc:	2700      	movs	r7, #0
    49fe:	e717      	b.n	4830 <__aeabi_dsub+0xe0>
    4a00:	0038      	movs	r0, r7
    4a02:	f000 fb45 	bl	5090 <__clzsi2>
    4a06:	3020      	adds	r0, #32
    4a08:	e706      	b.n	4818 <__aeabi_dsub+0xc8>
    4a0a:	430a      	orrs	r2, r1
    4a0c:	0017      	movs	r7, r2
    4a0e:	2100      	movs	r1, #0
    4a10:	1e7a      	subs	r2, r7, #1
    4a12:	4197      	sbcs	r7, r2
    4a14:	e6ee      	b.n	47f4 <__aeabi_dsub+0xa4>
    4a16:	2b00      	cmp	r3, #0
    4a18:	d000      	beq.n	4a1c <__aeabi_dsub+0x2cc>
    4a1a:	e0e5      	b.n	4be8 <__aeabi_dsub+0x498>
    4a1c:	1c73      	adds	r3, r6, #1
    4a1e:	469c      	mov	ip, r3
    4a20:	055b      	lsls	r3, r3, #21
    4a22:	0d5b      	lsrs	r3, r3, #21
    4a24:	2b01      	cmp	r3, #1
    4a26:	dc00      	bgt.n	4a2a <__aeabi_dsub+0x2da>
    4a28:	e09f      	b.n	4b6a <__aeabi_dsub+0x41a>
    4a2a:	4b1a      	ldr	r3, [pc, #104]	; (4a94 <__aeabi_dsub+0x344>)
    4a2c:	459c      	cmp	ip, r3
    4a2e:	d100      	bne.n	4a32 <__aeabi_dsub+0x2e2>
    4a30:	e0c5      	b.n	4bbe <__aeabi_dsub+0x46e>
    4a32:	4452      	add	r2, sl
    4a34:	4552      	cmp	r2, sl
    4a36:	4180      	sbcs	r0, r0
    4a38:	1864      	adds	r4, r4, r1
    4a3a:	4240      	negs	r0, r0
    4a3c:	1824      	adds	r4, r4, r0
    4a3e:	07e7      	lsls	r7, r4, #31
    4a40:	0852      	lsrs	r2, r2, #1
    4a42:	4317      	orrs	r7, r2
    4a44:	0864      	lsrs	r4, r4, #1
    4a46:	4666      	mov	r6, ip
    4a48:	e708      	b.n	485c <__aeabi_dsub+0x10c>
    4a4a:	4812      	ldr	r0, [pc, #72]	; (4a94 <__aeabi_dsub+0x344>)
    4a4c:	4285      	cmp	r5, r0
    4a4e:	d100      	bne.n	4a52 <__aeabi_dsub+0x302>
    4a50:	e085      	b.n	4b5e <__aeabi_dsub+0x40e>
    4a52:	001d      	movs	r5, r3
    4a54:	e6bc      	b.n	47d0 <__aeabi_dsub+0x80>
    4a56:	0029      	movs	r1, r5
    4a58:	3e1f      	subs	r6, #31
    4a5a:	40f1      	lsrs	r1, r6
    4a5c:	2b20      	cmp	r3, #32
    4a5e:	d100      	bne.n	4a62 <__aeabi_dsub+0x312>
    4a60:	e07f      	b.n	4b62 <__aeabi_dsub+0x412>
    4a62:	2240      	movs	r2, #64	; 0x40
    4a64:	1ad3      	subs	r3, r2, r3
    4a66:	409d      	lsls	r5, r3
    4a68:	432f      	orrs	r7, r5
    4a6a:	1e7d      	subs	r5, r7, #1
    4a6c:	41af      	sbcs	r7, r5
    4a6e:	2400      	movs	r4, #0
    4a70:	430f      	orrs	r7, r1
    4a72:	2600      	movs	r6, #0
    4a74:	e78e      	b.n	4994 <__aeabi_dsub+0x244>
    4a76:	002b      	movs	r3, r5
    4a78:	000f      	movs	r7, r1
    4a7a:	3b20      	subs	r3, #32
    4a7c:	40df      	lsrs	r7, r3
    4a7e:	2d20      	cmp	r5, #32
    4a80:	d071      	beq.n	4b66 <__aeabi_dsub+0x416>
    4a82:	2340      	movs	r3, #64	; 0x40
    4a84:	1b5d      	subs	r5, r3, r5
    4a86:	40a9      	lsls	r1, r5
    4a88:	430a      	orrs	r2, r1
    4a8a:	1e51      	subs	r1, r2, #1
    4a8c:	418a      	sbcs	r2, r1
    4a8e:	2100      	movs	r1, #0
    4a90:	4317      	orrs	r7, r2
    4a92:	e6af      	b.n	47f4 <__aeabi_dsub+0xa4>
    4a94:	000007ff 	.word	0x000007ff
    4a98:	ff7fffff 	.word	0xff7fffff
    4a9c:	800fffff 	.word	0x800fffff
    4aa0:	2e00      	cmp	r6, #0
    4aa2:	d03e      	beq.n	4b22 <__aeabi_dsub+0x3d2>
    4aa4:	4eb3      	ldr	r6, [pc, #716]	; (4d74 <__aeabi_dsub+0x624>)
    4aa6:	45b4      	cmp	ip, r6
    4aa8:	d045      	beq.n	4b36 <__aeabi_dsub+0x3e6>
    4aaa:	2680      	movs	r6, #128	; 0x80
    4aac:	0436      	lsls	r6, r6, #16
    4aae:	426d      	negs	r5, r5
    4ab0:	4334      	orrs	r4, r6
    4ab2:	2d38      	cmp	r5, #56	; 0x38
    4ab4:	dd00      	ble.n	4ab8 <__aeabi_dsub+0x368>
    4ab6:	e0a8      	b.n	4c0a <__aeabi_dsub+0x4ba>
    4ab8:	2d1f      	cmp	r5, #31
    4aba:	dd00      	ble.n	4abe <__aeabi_dsub+0x36e>
    4abc:	e11f      	b.n	4cfe <__aeabi_dsub+0x5ae>
    4abe:	2620      	movs	r6, #32
    4ac0:	0027      	movs	r7, r4
    4ac2:	4650      	mov	r0, sl
    4ac4:	1b76      	subs	r6, r6, r5
    4ac6:	40b7      	lsls	r7, r6
    4ac8:	40e8      	lsrs	r0, r5
    4aca:	4307      	orrs	r7, r0
    4acc:	4650      	mov	r0, sl
    4ace:	40b0      	lsls	r0, r6
    4ad0:	1e46      	subs	r6, r0, #1
    4ad2:	41b0      	sbcs	r0, r6
    4ad4:	40ec      	lsrs	r4, r5
    4ad6:	4338      	orrs	r0, r7
    4ad8:	1a17      	subs	r7, r2, r0
    4ada:	42ba      	cmp	r2, r7
    4adc:	4192      	sbcs	r2, r2
    4ade:	1b0c      	subs	r4, r1, r4
    4ae0:	4252      	negs	r2, r2
    4ae2:	1aa4      	subs	r4, r4, r2
    4ae4:	4666      	mov	r6, ip
    4ae6:	4698      	mov	r8, r3
    4ae8:	e68b      	b.n	4802 <__aeabi_dsub+0xb2>
    4aea:	4664      	mov	r4, ip
    4aec:	4667      	mov	r7, ip
    4aee:	432c      	orrs	r4, r5
    4af0:	d000      	beq.n	4af4 <__aeabi_dsub+0x3a4>
    4af2:	e68b      	b.n	480c <__aeabi_dsub+0xbc>
    4af4:	2500      	movs	r5, #0
    4af6:	2600      	movs	r6, #0
    4af8:	2700      	movs	r7, #0
    4afa:	e6ea      	b.n	48d2 <__aeabi_dsub+0x182>
    4afc:	001e      	movs	r6, r3
    4afe:	e6ad      	b.n	485c <__aeabi_dsub+0x10c>
    4b00:	2b1f      	cmp	r3, #31
    4b02:	dc60      	bgt.n	4bc6 <__aeabi_dsub+0x476>
    4b04:	2720      	movs	r7, #32
    4b06:	1af8      	subs	r0, r7, r3
    4b08:	000f      	movs	r7, r1
    4b0a:	4684      	mov	ip, r0
    4b0c:	4087      	lsls	r7, r0
    4b0e:	0010      	movs	r0, r2
    4b10:	40d8      	lsrs	r0, r3
    4b12:	4307      	orrs	r7, r0
    4b14:	4660      	mov	r0, ip
    4b16:	4082      	lsls	r2, r0
    4b18:	1e50      	subs	r0, r2, #1
    4b1a:	4182      	sbcs	r2, r0
    4b1c:	40d9      	lsrs	r1, r3
    4b1e:	4317      	orrs	r7, r2
    4b20:	e6f5      	b.n	490e <__aeabi_dsub+0x1be>
    4b22:	0026      	movs	r6, r4
    4b24:	4650      	mov	r0, sl
    4b26:	4306      	orrs	r6, r0
    4b28:	d005      	beq.n	4b36 <__aeabi_dsub+0x3e6>
    4b2a:	43ed      	mvns	r5, r5
    4b2c:	2d00      	cmp	r5, #0
    4b2e:	d0d3      	beq.n	4ad8 <__aeabi_dsub+0x388>
    4b30:	4e90      	ldr	r6, [pc, #576]	; (4d74 <__aeabi_dsub+0x624>)
    4b32:	45b4      	cmp	ip, r6
    4b34:	d1bd      	bne.n	4ab2 <__aeabi_dsub+0x362>
    4b36:	000c      	movs	r4, r1
    4b38:	0017      	movs	r7, r2
    4b3a:	4666      	mov	r6, ip
    4b3c:	4698      	mov	r8, r3
    4b3e:	e68d      	b.n	485c <__aeabi_dsub+0x10c>
    4b40:	488c      	ldr	r0, [pc, #560]	; (4d74 <__aeabi_dsub+0x624>)
    4b42:	4283      	cmp	r3, r0
    4b44:	d00b      	beq.n	4b5e <__aeabi_dsub+0x40e>
    4b46:	4663      	mov	r3, ip
    4b48:	e6d9      	b.n	48fe <__aeabi_dsub+0x1ae>
    4b4a:	2d00      	cmp	r5, #0
    4b4c:	d000      	beq.n	4b50 <__aeabi_dsub+0x400>
    4b4e:	e096      	b.n	4c7e <__aeabi_dsub+0x52e>
    4b50:	0008      	movs	r0, r1
    4b52:	4310      	orrs	r0, r2
    4b54:	d100      	bne.n	4b58 <__aeabi_dsub+0x408>
    4b56:	e0e2      	b.n	4d1e <__aeabi_dsub+0x5ce>
    4b58:	000c      	movs	r4, r1
    4b5a:	0017      	movs	r7, r2
    4b5c:	4698      	mov	r8, r3
    4b5e:	4e85      	ldr	r6, [pc, #532]	; (4d74 <__aeabi_dsub+0x624>)
    4b60:	e67c      	b.n	485c <__aeabi_dsub+0x10c>
    4b62:	2500      	movs	r5, #0
    4b64:	e780      	b.n	4a68 <__aeabi_dsub+0x318>
    4b66:	2100      	movs	r1, #0
    4b68:	e78e      	b.n	4a88 <__aeabi_dsub+0x338>
    4b6a:	0023      	movs	r3, r4
    4b6c:	4650      	mov	r0, sl
    4b6e:	4303      	orrs	r3, r0
    4b70:	2e00      	cmp	r6, #0
    4b72:	d000      	beq.n	4b76 <__aeabi_dsub+0x426>
    4b74:	e0a8      	b.n	4cc8 <__aeabi_dsub+0x578>
    4b76:	2b00      	cmp	r3, #0
    4b78:	d100      	bne.n	4b7c <__aeabi_dsub+0x42c>
    4b7a:	e0de      	b.n	4d3a <__aeabi_dsub+0x5ea>
    4b7c:	000b      	movs	r3, r1
    4b7e:	4313      	orrs	r3, r2
    4b80:	d100      	bne.n	4b84 <__aeabi_dsub+0x434>
    4b82:	e66b      	b.n	485c <__aeabi_dsub+0x10c>
    4b84:	4452      	add	r2, sl
    4b86:	4552      	cmp	r2, sl
    4b88:	4180      	sbcs	r0, r0
    4b8a:	1864      	adds	r4, r4, r1
    4b8c:	4240      	negs	r0, r0
    4b8e:	1824      	adds	r4, r4, r0
    4b90:	0017      	movs	r7, r2
    4b92:	0223      	lsls	r3, r4, #8
    4b94:	d400      	bmi.n	4b98 <__aeabi_dsub+0x448>
    4b96:	e6fd      	b.n	4994 <__aeabi_dsub+0x244>
    4b98:	4b77      	ldr	r3, [pc, #476]	; (4d78 <__aeabi_dsub+0x628>)
    4b9a:	4666      	mov	r6, ip
    4b9c:	401c      	ands	r4, r3
    4b9e:	e65d      	b.n	485c <__aeabi_dsub+0x10c>
    4ba0:	0025      	movs	r5, r4
    4ba2:	4650      	mov	r0, sl
    4ba4:	4305      	orrs	r5, r0
    4ba6:	2e00      	cmp	r6, #0
    4ba8:	d1cf      	bne.n	4b4a <__aeabi_dsub+0x3fa>
    4baa:	2d00      	cmp	r5, #0
    4bac:	d14f      	bne.n	4c4e <__aeabi_dsub+0x4fe>
    4bae:	000c      	movs	r4, r1
    4bb0:	4314      	orrs	r4, r2
    4bb2:	d100      	bne.n	4bb6 <__aeabi_dsub+0x466>
    4bb4:	e0a0      	b.n	4cf8 <__aeabi_dsub+0x5a8>
    4bb6:	000c      	movs	r4, r1
    4bb8:	0017      	movs	r7, r2
    4bba:	4698      	mov	r8, r3
    4bbc:	e64e      	b.n	485c <__aeabi_dsub+0x10c>
    4bbe:	4666      	mov	r6, ip
    4bc0:	2400      	movs	r4, #0
    4bc2:	2700      	movs	r7, #0
    4bc4:	e685      	b.n	48d2 <__aeabi_dsub+0x182>
    4bc6:	001f      	movs	r7, r3
    4bc8:	0008      	movs	r0, r1
    4bca:	3f20      	subs	r7, #32
    4bcc:	40f8      	lsrs	r0, r7
    4bce:	0007      	movs	r7, r0
    4bd0:	2b20      	cmp	r3, #32
    4bd2:	d100      	bne.n	4bd6 <__aeabi_dsub+0x486>
    4bd4:	e08e      	b.n	4cf4 <__aeabi_dsub+0x5a4>
    4bd6:	2040      	movs	r0, #64	; 0x40
    4bd8:	1ac3      	subs	r3, r0, r3
    4bda:	4099      	lsls	r1, r3
    4bdc:	430a      	orrs	r2, r1
    4bde:	1e51      	subs	r1, r2, #1
    4be0:	418a      	sbcs	r2, r1
    4be2:	2100      	movs	r1, #0
    4be4:	4317      	orrs	r7, r2
    4be6:	e692      	b.n	490e <__aeabi_dsub+0x1be>
    4be8:	2e00      	cmp	r6, #0
    4bea:	d114      	bne.n	4c16 <__aeabi_dsub+0x4c6>
    4bec:	0026      	movs	r6, r4
    4bee:	4650      	mov	r0, sl
    4bf0:	4306      	orrs	r6, r0
    4bf2:	d062      	beq.n	4cba <__aeabi_dsub+0x56a>
    4bf4:	43db      	mvns	r3, r3
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d15c      	bne.n	4cb4 <__aeabi_dsub+0x564>
    4bfa:	1887      	adds	r7, r0, r2
    4bfc:	4297      	cmp	r7, r2
    4bfe:	4192      	sbcs	r2, r2
    4c00:	1864      	adds	r4, r4, r1
    4c02:	4252      	negs	r2, r2
    4c04:	18a4      	adds	r4, r4, r2
    4c06:	4666      	mov	r6, ip
    4c08:	e687      	b.n	491a <__aeabi_dsub+0x1ca>
    4c0a:	4650      	mov	r0, sl
    4c0c:	4320      	orrs	r0, r4
    4c0e:	1e44      	subs	r4, r0, #1
    4c10:	41a0      	sbcs	r0, r4
    4c12:	2400      	movs	r4, #0
    4c14:	e760      	b.n	4ad8 <__aeabi_dsub+0x388>
    4c16:	4e57      	ldr	r6, [pc, #348]	; (4d74 <__aeabi_dsub+0x624>)
    4c18:	45b4      	cmp	ip, r6
    4c1a:	d04e      	beq.n	4cba <__aeabi_dsub+0x56a>
    4c1c:	2680      	movs	r6, #128	; 0x80
    4c1e:	0436      	lsls	r6, r6, #16
    4c20:	425b      	negs	r3, r3
    4c22:	4334      	orrs	r4, r6
    4c24:	2b38      	cmp	r3, #56	; 0x38
    4c26:	dd00      	ble.n	4c2a <__aeabi_dsub+0x4da>
    4c28:	e07f      	b.n	4d2a <__aeabi_dsub+0x5da>
    4c2a:	2b1f      	cmp	r3, #31
    4c2c:	dd00      	ble.n	4c30 <__aeabi_dsub+0x4e0>
    4c2e:	e08b      	b.n	4d48 <__aeabi_dsub+0x5f8>
    4c30:	2620      	movs	r6, #32
    4c32:	0027      	movs	r7, r4
    4c34:	4650      	mov	r0, sl
    4c36:	1af6      	subs	r6, r6, r3
    4c38:	40b7      	lsls	r7, r6
    4c3a:	40d8      	lsrs	r0, r3
    4c3c:	4307      	orrs	r7, r0
    4c3e:	4650      	mov	r0, sl
    4c40:	40b0      	lsls	r0, r6
    4c42:	1e46      	subs	r6, r0, #1
    4c44:	41b0      	sbcs	r0, r6
    4c46:	4307      	orrs	r7, r0
    4c48:	40dc      	lsrs	r4, r3
    4c4a:	18bf      	adds	r7, r7, r2
    4c4c:	e7d6      	b.n	4bfc <__aeabi_dsub+0x4ac>
    4c4e:	000d      	movs	r5, r1
    4c50:	4315      	orrs	r5, r2
    4c52:	d100      	bne.n	4c56 <__aeabi_dsub+0x506>
    4c54:	e602      	b.n	485c <__aeabi_dsub+0x10c>
    4c56:	4650      	mov	r0, sl
    4c58:	1a80      	subs	r0, r0, r2
    4c5a:	4582      	cmp	sl, r0
    4c5c:	41bf      	sbcs	r7, r7
    4c5e:	1a65      	subs	r5, r4, r1
    4c60:	427f      	negs	r7, r7
    4c62:	1bed      	subs	r5, r5, r7
    4c64:	4684      	mov	ip, r0
    4c66:	0228      	lsls	r0, r5, #8
    4c68:	d400      	bmi.n	4c6c <__aeabi_dsub+0x51c>
    4c6a:	e68d      	b.n	4988 <__aeabi_dsub+0x238>
    4c6c:	4650      	mov	r0, sl
    4c6e:	1a17      	subs	r7, r2, r0
    4c70:	42ba      	cmp	r2, r7
    4c72:	4192      	sbcs	r2, r2
    4c74:	1b0c      	subs	r4, r1, r4
    4c76:	4252      	negs	r2, r2
    4c78:	1aa4      	subs	r4, r4, r2
    4c7a:	4698      	mov	r8, r3
    4c7c:	e5ee      	b.n	485c <__aeabi_dsub+0x10c>
    4c7e:	000d      	movs	r5, r1
    4c80:	4315      	orrs	r5, r2
    4c82:	d100      	bne.n	4c86 <__aeabi_dsub+0x536>
    4c84:	e76b      	b.n	4b5e <__aeabi_dsub+0x40e>
    4c86:	4650      	mov	r0, sl
    4c88:	0767      	lsls	r7, r4, #29
    4c8a:	08c0      	lsrs	r0, r0, #3
    4c8c:	4307      	orrs	r7, r0
    4c8e:	2080      	movs	r0, #128	; 0x80
    4c90:	08e4      	lsrs	r4, r4, #3
    4c92:	0300      	lsls	r0, r0, #12
    4c94:	4204      	tst	r4, r0
    4c96:	d007      	beq.n	4ca8 <__aeabi_dsub+0x558>
    4c98:	08cd      	lsrs	r5, r1, #3
    4c9a:	4205      	tst	r5, r0
    4c9c:	d104      	bne.n	4ca8 <__aeabi_dsub+0x558>
    4c9e:	002c      	movs	r4, r5
    4ca0:	4698      	mov	r8, r3
    4ca2:	08d7      	lsrs	r7, r2, #3
    4ca4:	0749      	lsls	r1, r1, #29
    4ca6:	430f      	orrs	r7, r1
    4ca8:	0f7b      	lsrs	r3, r7, #29
    4caa:	00e4      	lsls	r4, r4, #3
    4cac:	431c      	orrs	r4, r3
    4cae:	00ff      	lsls	r7, r7, #3
    4cb0:	4e30      	ldr	r6, [pc, #192]	; (4d74 <__aeabi_dsub+0x624>)
    4cb2:	e5d3      	b.n	485c <__aeabi_dsub+0x10c>
    4cb4:	4e2f      	ldr	r6, [pc, #188]	; (4d74 <__aeabi_dsub+0x624>)
    4cb6:	45b4      	cmp	ip, r6
    4cb8:	d1b4      	bne.n	4c24 <__aeabi_dsub+0x4d4>
    4cba:	000c      	movs	r4, r1
    4cbc:	0017      	movs	r7, r2
    4cbe:	4666      	mov	r6, ip
    4cc0:	e5cc      	b.n	485c <__aeabi_dsub+0x10c>
    4cc2:	2700      	movs	r7, #0
    4cc4:	2400      	movs	r4, #0
    4cc6:	e5e8      	b.n	489a <__aeabi_dsub+0x14a>
    4cc8:	2b00      	cmp	r3, #0
    4cca:	d039      	beq.n	4d40 <__aeabi_dsub+0x5f0>
    4ccc:	000b      	movs	r3, r1
    4cce:	4313      	orrs	r3, r2
    4cd0:	d100      	bne.n	4cd4 <__aeabi_dsub+0x584>
    4cd2:	e744      	b.n	4b5e <__aeabi_dsub+0x40e>
    4cd4:	08c0      	lsrs	r0, r0, #3
    4cd6:	0767      	lsls	r7, r4, #29
    4cd8:	4307      	orrs	r7, r0
    4cda:	2080      	movs	r0, #128	; 0x80
    4cdc:	08e4      	lsrs	r4, r4, #3
    4cde:	0300      	lsls	r0, r0, #12
    4ce0:	4204      	tst	r4, r0
    4ce2:	d0e1      	beq.n	4ca8 <__aeabi_dsub+0x558>
    4ce4:	08cb      	lsrs	r3, r1, #3
    4ce6:	4203      	tst	r3, r0
    4ce8:	d1de      	bne.n	4ca8 <__aeabi_dsub+0x558>
    4cea:	08d7      	lsrs	r7, r2, #3
    4cec:	0749      	lsls	r1, r1, #29
    4cee:	430f      	orrs	r7, r1
    4cf0:	001c      	movs	r4, r3
    4cf2:	e7d9      	b.n	4ca8 <__aeabi_dsub+0x558>
    4cf4:	2100      	movs	r1, #0
    4cf6:	e771      	b.n	4bdc <__aeabi_dsub+0x48c>
    4cf8:	2500      	movs	r5, #0
    4cfa:	2700      	movs	r7, #0
    4cfc:	e5e9      	b.n	48d2 <__aeabi_dsub+0x182>
    4cfe:	002e      	movs	r6, r5
    4d00:	0027      	movs	r7, r4
    4d02:	3e20      	subs	r6, #32
    4d04:	40f7      	lsrs	r7, r6
    4d06:	2d20      	cmp	r5, #32
    4d08:	d02f      	beq.n	4d6a <__aeabi_dsub+0x61a>
    4d0a:	2640      	movs	r6, #64	; 0x40
    4d0c:	1b75      	subs	r5, r6, r5
    4d0e:	40ac      	lsls	r4, r5
    4d10:	4650      	mov	r0, sl
    4d12:	4320      	orrs	r0, r4
    4d14:	1e44      	subs	r4, r0, #1
    4d16:	41a0      	sbcs	r0, r4
    4d18:	2400      	movs	r4, #0
    4d1a:	4338      	orrs	r0, r7
    4d1c:	e6dc      	b.n	4ad8 <__aeabi_dsub+0x388>
    4d1e:	2480      	movs	r4, #128	; 0x80
    4d20:	2500      	movs	r5, #0
    4d22:	0324      	lsls	r4, r4, #12
    4d24:	4e13      	ldr	r6, [pc, #76]	; (4d74 <__aeabi_dsub+0x624>)
    4d26:	2700      	movs	r7, #0
    4d28:	e5d3      	b.n	48d2 <__aeabi_dsub+0x182>
    4d2a:	4650      	mov	r0, sl
    4d2c:	4320      	orrs	r0, r4
    4d2e:	0007      	movs	r7, r0
    4d30:	1e78      	subs	r0, r7, #1
    4d32:	4187      	sbcs	r7, r0
    4d34:	2400      	movs	r4, #0
    4d36:	18bf      	adds	r7, r7, r2
    4d38:	e760      	b.n	4bfc <__aeabi_dsub+0x4ac>
    4d3a:	000c      	movs	r4, r1
    4d3c:	0017      	movs	r7, r2
    4d3e:	e58d      	b.n	485c <__aeabi_dsub+0x10c>
    4d40:	000c      	movs	r4, r1
    4d42:	0017      	movs	r7, r2
    4d44:	4e0b      	ldr	r6, [pc, #44]	; (4d74 <__aeabi_dsub+0x624>)
    4d46:	e589      	b.n	485c <__aeabi_dsub+0x10c>
    4d48:	001e      	movs	r6, r3
    4d4a:	0027      	movs	r7, r4
    4d4c:	3e20      	subs	r6, #32
    4d4e:	40f7      	lsrs	r7, r6
    4d50:	2b20      	cmp	r3, #32
    4d52:	d00c      	beq.n	4d6e <__aeabi_dsub+0x61e>
    4d54:	2640      	movs	r6, #64	; 0x40
    4d56:	1af3      	subs	r3, r6, r3
    4d58:	409c      	lsls	r4, r3
    4d5a:	4650      	mov	r0, sl
    4d5c:	4320      	orrs	r0, r4
    4d5e:	1e44      	subs	r4, r0, #1
    4d60:	41a0      	sbcs	r0, r4
    4d62:	4307      	orrs	r7, r0
    4d64:	2400      	movs	r4, #0
    4d66:	18bf      	adds	r7, r7, r2
    4d68:	e748      	b.n	4bfc <__aeabi_dsub+0x4ac>
    4d6a:	2400      	movs	r4, #0
    4d6c:	e7d0      	b.n	4d10 <__aeabi_dsub+0x5c0>
    4d6e:	2400      	movs	r4, #0
    4d70:	e7f3      	b.n	4d5a <__aeabi_dsub+0x60a>
    4d72:	46c0      	nop			; (mov r8, r8)
    4d74:	000007ff 	.word	0x000007ff
    4d78:	ff7fffff 	.word	0xff7fffff

00004d7c <__aeabi_d2iz>:
    4d7c:	b530      	push	{r4, r5, lr}
    4d7e:	4d13      	ldr	r5, [pc, #76]	; (4dcc <__aeabi_d2iz+0x50>)
    4d80:	030a      	lsls	r2, r1, #12
    4d82:	004b      	lsls	r3, r1, #1
    4d84:	0b12      	lsrs	r2, r2, #12
    4d86:	0d5b      	lsrs	r3, r3, #21
    4d88:	0fc9      	lsrs	r1, r1, #31
    4d8a:	2400      	movs	r4, #0
    4d8c:	42ab      	cmp	r3, r5
    4d8e:	dd10      	ble.n	4db2 <__aeabi_d2iz+0x36>
    4d90:	4c0f      	ldr	r4, [pc, #60]	; (4dd0 <__aeabi_d2iz+0x54>)
    4d92:	42a3      	cmp	r3, r4
    4d94:	dc0f      	bgt.n	4db6 <__aeabi_d2iz+0x3a>
    4d96:	2480      	movs	r4, #128	; 0x80
    4d98:	4d0e      	ldr	r5, [pc, #56]	; (4dd4 <__aeabi_d2iz+0x58>)
    4d9a:	0364      	lsls	r4, r4, #13
    4d9c:	4322      	orrs	r2, r4
    4d9e:	1aed      	subs	r5, r5, r3
    4da0:	2d1f      	cmp	r5, #31
    4da2:	dd0b      	ble.n	4dbc <__aeabi_d2iz+0x40>
    4da4:	480c      	ldr	r0, [pc, #48]	; (4dd8 <__aeabi_d2iz+0x5c>)
    4da6:	1ac3      	subs	r3, r0, r3
    4da8:	40da      	lsrs	r2, r3
    4daa:	4254      	negs	r4, r2
    4dac:	2900      	cmp	r1, #0
    4dae:	d100      	bne.n	4db2 <__aeabi_d2iz+0x36>
    4db0:	0014      	movs	r4, r2
    4db2:	0020      	movs	r0, r4
    4db4:	bd30      	pop	{r4, r5, pc}
    4db6:	4b09      	ldr	r3, [pc, #36]	; (4ddc <__aeabi_d2iz+0x60>)
    4db8:	18cc      	adds	r4, r1, r3
    4dba:	e7fa      	b.n	4db2 <__aeabi_d2iz+0x36>
    4dbc:	4c08      	ldr	r4, [pc, #32]	; (4de0 <__aeabi_d2iz+0x64>)
    4dbe:	40e8      	lsrs	r0, r5
    4dc0:	46a4      	mov	ip, r4
    4dc2:	4463      	add	r3, ip
    4dc4:	409a      	lsls	r2, r3
    4dc6:	4302      	orrs	r2, r0
    4dc8:	e7ef      	b.n	4daa <__aeabi_d2iz+0x2e>
    4dca:	46c0      	nop			; (mov r8, r8)
    4dcc:	000003fe 	.word	0x000003fe
    4dd0:	0000041d 	.word	0x0000041d
    4dd4:	00000433 	.word	0x00000433
    4dd8:	00000413 	.word	0x00000413
    4ddc:	7fffffff 	.word	0x7fffffff
    4de0:	fffffbed 	.word	0xfffffbed

00004de4 <__aeabi_i2d>:
    4de4:	b570      	push	{r4, r5, r6, lr}
    4de6:	2800      	cmp	r0, #0
    4de8:	d030      	beq.n	4e4c <__aeabi_i2d+0x68>
    4dea:	17c3      	asrs	r3, r0, #31
    4dec:	18c4      	adds	r4, r0, r3
    4dee:	405c      	eors	r4, r3
    4df0:	0fc5      	lsrs	r5, r0, #31
    4df2:	0020      	movs	r0, r4
    4df4:	f000 f94c 	bl	5090 <__clzsi2>
    4df8:	4b17      	ldr	r3, [pc, #92]	; (4e58 <__aeabi_i2d+0x74>)
    4dfa:	4a18      	ldr	r2, [pc, #96]	; (4e5c <__aeabi_i2d+0x78>)
    4dfc:	1a1b      	subs	r3, r3, r0
    4dfe:	1ad2      	subs	r2, r2, r3
    4e00:	2a1f      	cmp	r2, #31
    4e02:	dd18      	ble.n	4e36 <__aeabi_i2d+0x52>
    4e04:	4a16      	ldr	r2, [pc, #88]	; (4e60 <__aeabi_i2d+0x7c>)
    4e06:	1ad2      	subs	r2, r2, r3
    4e08:	4094      	lsls	r4, r2
    4e0a:	2200      	movs	r2, #0
    4e0c:	0324      	lsls	r4, r4, #12
    4e0e:	055b      	lsls	r3, r3, #21
    4e10:	0b24      	lsrs	r4, r4, #12
    4e12:	0d5b      	lsrs	r3, r3, #21
    4e14:	2100      	movs	r1, #0
    4e16:	0010      	movs	r0, r2
    4e18:	0324      	lsls	r4, r4, #12
    4e1a:	0d0a      	lsrs	r2, r1, #20
    4e1c:	0b24      	lsrs	r4, r4, #12
    4e1e:	0512      	lsls	r2, r2, #20
    4e20:	4322      	orrs	r2, r4
    4e22:	4c10      	ldr	r4, [pc, #64]	; (4e64 <__aeabi_i2d+0x80>)
    4e24:	051b      	lsls	r3, r3, #20
    4e26:	4022      	ands	r2, r4
    4e28:	4313      	orrs	r3, r2
    4e2a:	005b      	lsls	r3, r3, #1
    4e2c:	07ed      	lsls	r5, r5, #31
    4e2e:	085b      	lsrs	r3, r3, #1
    4e30:	432b      	orrs	r3, r5
    4e32:	0019      	movs	r1, r3
    4e34:	bd70      	pop	{r4, r5, r6, pc}
    4e36:	0021      	movs	r1, r4
    4e38:	4091      	lsls	r1, r2
    4e3a:	000a      	movs	r2, r1
    4e3c:	210b      	movs	r1, #11
    4e3e:	1a08      	subs	r0, r1, r0
    4e40:	40c4      	lsrs	r4, r0
    4e42:	055b      	lsls	r3, r3, #21
    4e44:	0324      	lsls	r4, r4, #12
    4e46:	0b24      	lsrs	r4, r4, #12
    4e48:	0d5b      	lsrs	r3, r3, #21
    4e4a:	e7e3      	b.n	4e14 <__aeabi_i2d+0x30>
    4e4c:	2500      	movs	r5, #0
    4e4e:	2300      	movs	r3, #0
    4e50:	2400      	movs	r4, #0
    4e52:	2200      	movs	r2, #0
    4e54:	e7de      	b.n	4e14 <__aeabi_i2d+0x30>
    4e56:	46c0      	nop			; (mov r8, r8)
    4e58:	0000041e 	.word	0x0000041e
    4e5c:	00000433 	.word	0x00000433
    4e60:	00000413 	.word	0x00000413
    4e64:	800fffff 	.word	0x800fffff

00004e68 <__aeabi_ui2d>:
    4e68:	b510      	push	{r4, lr}
    4e6a:	1e04      	subs	r4, r0, #0
    4e6c:	d028      	beq.n	4ec0 <__aeabi_ui2d+0x58>
    4e6e:	f000 f90f 	bl	5090 <__clzsi2>
    4e72:	4b15      	ldr	r3, [pc, #84]	; (4ec8 <__aeabi_ui2d+0x60>)
    4e74:	4a15      	ldr	r2, [pc, #84]	; (4ecc <__aeabi_ui2d+0x64>)
    4e76:	1a1b      	subs	r3, r3, r0
    4e78:	1ad2      	subs	r2, r2, r3
    4e7a:	2a1f      	cmp	r2, #31
    4e7c:	dd15      	ble.n	4eaa <__aeabi_ui2d+0x42>
    4e7e:	4a14      	ldr	r2, [pc, #80]	; (4ed0 <__aeabi_ui2d+0x68>)
    4e80:	1ad2      	subs	r2, r2, r3
    4e82:	4094      	lsls	r4, r2
    4e84:	2200      	movs	r2, #0
    4e86:	0324      	lsls	r4, r4, #12
    4e88:	055b      	lsls	r3, r3, #21
    4e8a:	0b24      	lsrs	r4, r4, #12
    4e8c:	0d5b      	lsrs	r3, r3, #21
    4e8e:	2100      	movs	r1, #0
    4e90:	0010      	movs	r0, r2
    4e92:	0324      	lsls	r4, r4, #12
    4e94:	0d0a      	lsrs	r2, r1, #20
    4e96:	0b24      	lsrs	r4, r4, #12
    4e98:	0512      	lsls	r2, r2, #20
    4e9a:	4322      	orrs	r2, r4
    4e9c:	4c0d      	ldr	r4, [pc, #52]	; (4ed4 <__aeabi_ui2d+0x6c>)
    4e9e:	051b      	lsls	r3, r3, #20
    4ea0:	4022      	ands	r2, r4
    4ea2:	4313      	orrs	r3, r2
    4ea4:	005b      	lsls	r3, r3, #1
    4ea6:	0859      	lsrs	r1, r3, #1
    4ea8:	bd10      	pop	{r4, pc}
    4eaa:	0021      	movs	r1, r4
    4eac:	4091      	lsls	r1, r2
    4eae:	000a      	movs	r2, r1
    4eb0:	210b      	movs	r1, #11
    4eb2:	1a08      	subs	r0, r1, r0
    4eb4:	40c4      	lsrs	r4, r0
    4eb6:	055b      	lsls	r3, r3, #21
    4eb8:	0324      	lsls	r4, r4, #12
    4eba:	0b24      	lsrs	r4, r4, #12
    4ebc:	0d5b      	lsrs	r3, r3, #21
    4ebe:	e7e6      	b.n	4e8e <__aeabi_ui2d+0x26>
    4ec0:	2300      	movs	r3, #0
    4ec2:	2400      	movs	r4, #0
    4ec4:	2200      	movs	r2, #0
    4ec6:	e7e2      	b.n	4e8e <__aeabi_ui2d+0x26>
    4ec8:	0000041e 	.word	0x0000041e
    4ecc:	00000433 	.word	0x00000433
    4ed0:	00000413 	.word	0x00000413
    4ed4:	800fffff 	.word	0x800fffff

00004ed8 <__aeabi_f2d>:
    4ed8:	0041      	lsls	r1, r0, #1
    4eda:	0e09      	lsrs	r1, r1, #24
    4edc:	1c4b      	adds	r3, r1, #1
    4ede:	b570      	push	{r4, r5, r6, lr}
    4ee0:	b2db      	uxtb	r3, r3
    4ee2:	0246      	lsls	r6, r0, #9
    4ee4:	0a75      	lsrs	r5, r6, #9
    4ee6:	0fc4      	lsrs	r4, r0, #31
    4ee8:	2b01      	cmp	r3, #1
    4eea:	dd14      	ble.n	4f16 <__aeabi_f2d+0x3e>
    4eec:	23e0      	movs	r3, #224	; 0xe0
    4eee:	009b      	lsls	r3, r3, #2
    4ef0:	076d      	lsls	r5, r5, #29
    4ef2:	0b36      	lsrs	r6, r6, #12
    4ef4:	18cb      	adds	r3, r1, r3
    4ef6:	2100      	movs	r1, #0
    4ef8:	0d0a      	lsrs	r2, r1, #20
    4efa:	0028      	movs	r0, r5
    4efc:	0512      	lsls	r2, r2, #20
    4efe:	4d1c      	ldr	r5, [pc, #112]	; (4f70 <__aeabi_f2d+0x98>)
    4f00:	4332      	orrs	r2, r6
    4f02:	055b      	lsls	r3, r3, #21
    4f04:	402a      	ands	r2, r5
    4f06:	085b      	lsrs	r3, r3, #1
    4f08:	4313      	orrs	r3, r2
    4f0a:	005b      	lsls	r3, r3, #1
    4f0c:	07e4      	lsls	r4, r4, #31
    4f0e:	085b      	lsrs	r3, r3, #1
    4f10:	4323      	orrs	r3, r4
    4f12:	0019      	movs	r1, r3
    4f14:	bd70      	pop	{r4, r5, r6, pc}
    4f16:	2900      	cmp	r1, #0
    4f18:	d114      	bne.n	4f44 <__aeabi_f2d+0x6c>
    4f1a:	2d00      	cmp	r5, #0
    4f1c:	d01e      	beq.n	4f5c <__aeabi_f2d+0x84>
    4f1e:	0028      	movs	r0, r5
    4f20:	f000 f8b6 	bl	5090 <__clzsi2>
    4f24:	280a      	cmp	r0, #10
    4f26:	dc1c      	bgt.n	4f62 <__aeabi_f2d+0x8a>
    4f28:	230b      	movs	r3, #11
    4f2a:	002a      	movs	r2, r5
    4f2c:	1a1b      	subs	r3, r3, r0
    4f2e:	40da      	lsrs	r2, r3
    4f30:	0003      	movs	r3, r0
    4f32:	3315      	adds	r3, #21
    4f34:	409d      	lsls	r5, r3
    4f36:	4b0f      	ldr	r3, [pc, #60]	; (4f74 <__aeabi_f2d+0x9c>)
    4f38:	0312      	lsls	r2, r2, #12
    4f3a:	1a1b      	subs	r3, r3, r0
    4f3c:	055b      	lsls	r3, r3, #21
    4f3e:	0b16      	lsrs	r6, r2, #12
    4f40:	0d5b      	lsrs	r3, r3, #21
    4f42:	e7d8      	b.n	4ef6 <__aeabi_f2d+0x1e>
    4f44:	2d00      	cmp	r5, #0
    4f46:	d006      	beq.n	4f56 <__aeabi_f2d+0x7e>
    4f48:	0b32      	lsrs	r2, r6, #12
    4f4a:	2680      	movs	r6, #128	; 0x80
    4f4c:	0336      	lsls	r6, r6, #12
    4f4e:	076d      	lsls	r5, r5, #29
    4f50:	4316      	orrs	r6, r2
    4f52:	4b09      	ldr	r3, [pc, #36]	; (4f78 <__aeabi_f2d+0xa0>)
    4f54:	e7cf      	b.n	4ef6 <__aeabi_f2d+0x1e>
    4f56:	4b08      	ldr	r3, [pc, #32]	; (4f78 <__aeabi_f2d+0xa0>)
    4f58:	2600      	movs	r6, #0
    4f5a:	e7cc      	b.n	4ef6 <__aeabi_f2d+0x1e>
    4f5c:	2300      	movs	r3, #0
    4f5e:	2600      	movs	r6, #0
    4f60:	e7c9      	b.n	4ef6 <__aeabi_f2d+0x1e>
    4f62:	0003      	movs	r3, r0
    4f64:	002a      	movs	r2, r5
    4f66:	3b0b      	subs	r3, #11
    4f68:	409a      	lsls	r2, r3
    4f6a:	2500      	movs	r5, #0
    4f6c:	e7e3      	b.n	4f36 <__aeabi_f2d+0x5e>
    4f6e:	46c0      	nop			; (mov r8, r8)
    4f70:	800fffff 	.word	0x800fffff
    4f74:	00000389 	.word	0x00000389
    4f78:	000007ff 	.word	0x000007ff

00004f7c <__aeabi_d2f>:
    4f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f7e:	004c      	lsls	r4, r1, #1
    4f80:	0d64      	lsrs	r4, r4, #21
    4f82:	030b      	lsls	r3, r1, #12
    4f84:	1c62      	adds	r2, r4, #1
    4f86:	0f45      	lsrs	r5, r0, #29
    4f88:	0a5b      	lsrs	r3, r3, #9
    4f8a:	0552      	lsls	r2, r2, #21
    4f8c:	432b      	orrs	r3, r5
    4f8e:	0fc9      	lsrs	r1, r1, #31
    4f90:	00c5      	lsls	r5, r0, #3
    4f92:	0d52      	lsrs	r2, r2, #21
    4f94:	2a01      	cmp	r2, #1
    4f96:	dd28      	ble.n	4fea <__aeabi_d2f+0x6e>
    4f98:	4a3a      	ldr	r2, [pc, #232]	; (5084 <__aeabi_d2f+0x108>)
    4f9a:	18a6      	adds	r6, r4, r2
    4f9c:	2efe      	cmp	r6, #254	; 0xfe
    4f9e:	dc1b      	bgt.n	4fd8 <__aeabi_d2f+0x5c>
    4fa0:	2e00      	cmp	r6, #0
    4fa2:	dd3e      	ble.n	5022 <__aeabi_d2f+0xa6>
    4fa4:	0180      	lsls	r0, r0, #6
    4fa6:	0002      	movs	r2, r0
    4fa8:	1e50      	subs	r0, r2, #1
    4faa:	4182      	sbcs	r2, r0
    4fac:	0f6d      	lsrs	r5, r5, #29
    4fae:	432a      	orrs	r2, r5
    4fb0:	00db      	lsls	r3, r3, #3
    4fb2:	4313      	orrs	r3, r2
    4fb4:	075a      	lsls	r2, r3, #29
    4fb6:	d004      	beq.n	4fc2 <__aeabi_d2f+0x46>
    4fb8:	220f      	movs	r2, #15
    4fba:	401a      	ands	r2, r3
    4fbc:	2a04      	cmp	r2, #4
    4fbe:	d000      	beq.n	4fc2 <__aeabi_d2f+0x46>
    4fc0:	3304      	adds	r3, #4
    4fc2:	2280      	movs	r2, #128	; 0x80
    4fc4:	04d2      	lsls	r2, r2, #19
    4fc6:	401a      	ands	r2, r3
    4fc8:	d05a      	beq.n	5080 <__aeabi_d2f+0x104>
    4fca:	3601      	adds	r6, #1
    4fcc:	2eff      	cmp	r6, #255	; 0xff
    4fce:	d003      	beq.n	4fd8 <__aeabi_d2f+0x5c>
    4fd0:	019b      	lsls	r3, r3, #6
    4fd2:	0a5b      	lsrs	r3, r3, #9
    4fd4:	b2f4      	uxtb	r4, r6
    4fd6:	e001      	b.n	4fdc <__aeabi_d2f+0x60>
    4fd8:	24ff      	movs	r4, #255	; 0xff
    4fda:	2300      	movs	r3, #0
    4fdc:	0258      	lsls	r0, r3, #9
    4fde:	05e4      	lsls	r4, r4, #23
    4fe0:	0a40      	lsrs	r0, r0, #9
    4fe2:	07c9      	lsls	r1, r1, #31
    4fe4:	4320      	orrs	r0, r4
    4fe6:	4308      	orrs	r0, r1
    4fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fea:	2c00      	cmp	r4, #0
    4fec:	d007      	beq.n	4ffe <__aeabi_d2f+0x82>
    4fee:	431d      	orrs	r5, r3
    4ff0:	d0f2      	beq.n	4fd8 <__aeabi_d2f+0x5c>
    4ff2:	2080      	movs	r0, #128	; 0x80
    4ff4:	00db      	lsls	r3, r3, #3
    4ff6:	0480      	lsls	r0, r0, #18
    4ff8:	4303      	orrs	r3, r0
    4ffa:	26ff      	movs	r6, #255	; 0xff
    4ffc:	e7da      	b.n	4fb4 <__aeabi_d2f+0x38>
    4ffe:	432b      	orrs	r3, r5
    5000:	d003      	beq.n	500a <__aeabi_d2f+0x8e>
    5002:	2305      	movs	r3, #5
    5004:	08db      	lsrs	r3, r3, #3
    5006:	2cff      	cmp	r4, #255	; 0xff
    5008:	d003      	beq.n	5012 <__aeabi_d2f+0x96>
    500a:	025b      	lsls	r3, r3, #9
    500c:	0a5b      	lsrs	r3, r3, #9
    500e:	b2e4      	uxtb	r4, r4
    5010:	e7e4      	b.n	4fdc <__aeabi_d2f+0x60>
    5012:	2b00      	cmp	r3, #0
    5014:	d032      	beq.n	507c <__aeabi_d2f+0x100>
    5016:	2080      	movs	r0, #128	; 0x80
    5018:	03c0      	lsls	r0, r0, #15
    501a:	4303      	orrs	r3, r0
    501c:	025b      	lsls	r3, r3, #9
    501e:	0a5b      	lsrs	r3, r3, #9
    5020:	e7dc      	b.n	4fdc <__aeabi_d2f+0x60>
    5022:	0032      	movs	r2, r6
    5024:	3217      	adds	r2, #23
    5026:	db14      	blt.n	5052 <__aeabi_d2f+0xd6>
    5028:	2280      	movs	r2, #128	; 0x80
    502a:	271e      	movs	r7, #30
    502c:	0412      	lsls	r2, r2, #16
    502e:	4313      	orrs	r3, r2
    5030:	1bbf      	subs	r7, r7, r6
    5032:	2f1f      	cmp	r7, #31
    5034:	dc0f      	bgt.n	5056 <__aeabi_d2f+0xda>
    5036:	4a14      	ldr	r2, [pc, #80]	; (5088 <__aeabi_d2f+0x10c>)
    5038:	4694      	mov	ip, r2
    503a:	4464      	add	r4, ip
    503c:	002a      	movs	r2, r5
    503e:	40a5      	lsls	r5, r4
    5040:	002e      	movs	r6, r5
    5042:	40a3      	lsls	r3, r4
    5044:	1e75      	subs	r5, r6, #1
    5046:	41ae      	sbcs	r6, r5
    5048:	40fa      	lsrs	r2, r7
    504a:	4333      	orrs	r3, r6
    504c:	4313      	orrs	r3, r2
    504e:	2600      	movs	r6, #0
    5050:	e7b0      	b.n	4fb4 <__aeabi_d2f+0x38>
    5052:	2400      	movs	r4, #0
    5054:	e7d5      	b.n	5002 <__aeabi_d2f+0x86>
    5056:	2202      	movs	r2, #2
    5058:	4252      	negs	r2, r2
    505a:	1b96      	subs	r6, r2, r6
    505c:	001a      	movs	r2, r3
    505e:	40f2      	lsrs	r2, r6
    5060:	2f20      	cmp	r7, #32
    5062:	d009      	beq.n	5078 <__aeabi_d2f+0xfc>
    5064:	4809      	ldr	r0, [pc, #36]	; (508c <__aeabi_d2f+0x110>)
    5066:	4684      	mov	ip, r0
    5068:	4464      	add	r4, ip
    506a:	40a3      	lsls	r3, r4
    506c:	432b      	orrs	r3, r5
    506e:	1e5d      	subs	r5, r3, #1
    5070:	41ab      	sbcs	r3, r5
    5072:	2600      	movs	r6, #0
    5074:	4313      	orrs	r3, r2
    5076:	e79d      	b.n	4fb4 <__aeabi_d2f+0x38>
    5078:	2300      	movs	r3, #0
    507a:	e7f7      	b.n	506c <__aeabi_d2f+0xf0>
    507c:	2300      	movs	r3, #0
    507e:	e7ad      	b.n	4fdc <__aeabi_d2f+0x60>
    5080:	0034      	movs	r4, r6
    5082:	e7bf      	b.n	5004 <__aeabi_d2f+0x88>
    5084:	fffffc80 	.word	0xfffffc80
    5088:	fffffc82 	.word	0xfffffc82
    508c:	fffffca2 	.word	0xfffffca2

00005090 <__clzsi2>:
    5090:	211c      	movs	r1, #28
    5092:	2301      	movs	r3, #1
    5094:	041b      	lsls	r3, r3, #16
    5096:	4298      	cmp	r0, r3
    5098:	d301      	bcc.n	509e <__clzsi2+0xe>
    509a:	0c00      	lsrs	r0, r0, #16
    509c:	3910      	subs	r1, #16
    509e:	0a1b      	lsrs	r3, r3, #8
    50a0:	4298      	cmp	r0, r3
    50a2:	d301      	bcc.n	50a8 <__clzsi2+0x18>
    50a4:	0a00      	lsrs	r0, r0, #8
    50a6:	3908      	subs	r1, #8
    50a8:	091b      	lsrs	r3, r3, #4
    50aa:	4298      	cmp	r0, r3
    50ac:	d301      	bcc.n	50b2 <__clzsi2+0x22>
    50ae:	0900      	lsrs	r0, r0, #4
    50b0:	3904      	subs	r1, #4
    50b2:	a202      	add	r2, pc, #8	; (adr r2, 50bc <__clzsi2+0x2c>)
    50b4:	5c10      	ldrb	r0, [r2, r0]
    50b6:	1840      	adds	r0, r0, r1
    50b8:	4770      	bx	lr
    50ba:	46c0      	nop			; (mov r8, r8)
    50bc:	02020304 	.word	0x02020304
    50c0:	01010101 	.word	0x01010101
	...

000050cc <__clzdi2>:
    50cc:	b510      	push	{r4, lr}
    50ce:	2900      	cmp	r1, #0
    50d0:	d103      	bne.n	50da <__clzdi2+0xe>
    50d2:	f7ff ffdd 	bl	5090 <__clzsi2>
    50d6:	3020      	adds	r0, #32
    50d8:	e002      	b.n	50e0 <__clzdi2+0x14>
    50da:	1c08      	adds	r0, r1, #0
    50dc:	f7ff ffd8 	bl	5090 <__clzsi2>
    50e0:	bd10      	pop	{r4, pc}
    50e2:	46c0      	nop			; (mov r8, r8)

000050e4 <_tcc_apbcmasks>:
    50e4:	0100 0000 0200 0000 0400 0000               ............

000050f0 <_tcc_cc_nums>:
    50f0:	0204 0002                                   ....

000050f4 <_tcc_gclk_ids>:
    50f4:	1a1a 001b                                   ....

000050f8 <_tcc_maxs>:
    50f8:	ffff 00ff ffff 00ff ffff 0000               ............

00005104 <_tcc_ow_nums>:
    5104:	0408 0002                                   ....

00005108 <_tcc_intflag>:
    5108:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    5118:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    5128:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00005138 <tcc_interrupt_vectors.12510>:
    5138:	100f 0011 0800 4200 0c00 4200 1000 4200     .......B...B...B
    5148:	1400 4200 1800 4200 1c00 4200 0000 0000     ...B...B...B....

00005158 <impulse_response>:
    5158:	bc12 9f03 ca3d bf89 47fe 06a9 b28f bf9b     ....=....G......
    5168:	7076 f3ab e79f bf9f 8565 621e 74f4 bf6b     vp......e..b.tk.
    5178:	e75c cf44 0743 3fb1 2fe5 d61f efac 3fc4     \.D.C..?./.....?
    5188:	42eb a82d f722 3fcf 8d99 f7bd 319b 3fd2     .B-."..?.....1.?
    5198:	42eb a82d f722 3fcf 2fe5 d61f efac 3fc4     .B-."..?./.....?
    51a8:	e75c cf44 0743 3fb1 8565 621e 74f4 bf6b     \.D.C..?e..b.tk.
    51b8:	7076 f3ab e79f bf9f 47fe 06a9 b28f bf9b     vp.......G......
    51c8:	bc12 9f03 ca3d bf89 0000 0000 0000 0000     ....=...........
    51d8:	1d36 0000 1d32 0000 1d32 0000 1d98 0000     6...2...2.......
    51e8:	1d98 0000 1d4a 0000 1d3c 0000 1d50 0000     ....J...<...P...
    51f8:	1d86 0000 1f58 0000 1f38 0000 1f38 0000     ....X...8...8...
    5208:	1fc4 0000 1f4a 0000 1f66 0000 1f3c 0000     ....J...f...<...
    5218:	1f74 0000 1fb4 0000 4420 6265 6775 6967     t....... Debuggi
    5228:	676e 4320 6568 6b63 000d 0000 6f43 6c75     ng Check....Coul
    5238:	2064 6f6e 2074 6e69 7469 6169 696c 657a     d not initialize
    5248:	6920 6332 0000 0000 5320 6375 6563 7373      i2c.... Success
    5258:	7566 6c6c 2079 6e49 7469 6169 696c 657a     fully Initialize
    5268:	2064 6341 6563 656c 6f72 656d 6574 2072     d Accelerometer 
    5278:	4441 4c58 3433 2035 000d 0000               ADXL345 ....

00005284 <_global_impure_ptr>:
    5284:	0014 2000                                   ... 

00005288 <__sf_fake_stderr>:
	...

000052a8 <__sf_fake_stdin>:
	...

000052c8 <__sf_fake_stdout>:
	...
    52e8:	3de0 0000 3dc2 0000 3d7c 0000 3c9a 0000     .=...=..|=...<..
    52f8:	3d7c 0000 3db4 0000 3d7c 0000 3c9a 0000     |=...=..|=...<..
    5308:	3dc2 0000 3dc2 0000 3db4 0000 3c9a 0000     .=...=...=...<..
    5318:	3c92 0000 3c92 0000 3c92 0000 3ff8 0000     .<...<...<...?..
    5328:	4440 0000 4300 0000 4300 0000 42fc 0000     @D...C...C...B..
    5338:	4418 0000 4418 0000 440a 0000 42fc 0000     .D...D...D...B..
    5348:	4418 0000 440a 0000 4418 0000 42fc 0000     .D...D...D...B..
    5358:	4420 0000 4420 0000 4420 0000 4624 0000      D.. D.. D..$F..

00005368 <_init>:
    5368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    536a:	46c0      	nop			; (mov r8, r8)
    536c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    536e:	bc08      	pop	{r3}
    5370:	469e      	mov	lr, r3
    5372:	4770      	bx	lr

00005374 <__init_array_start>:
    5374:	000000dd 	.word	0x000000dd

00005378 <_fini>:
    5378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    537a:	46c0      	nop			; (mov r8, r8)
    537c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    537e:	bc08      	pop	{r3}
    5380:	469e      	mov	lr, r3
    5382:	4770      	bx	lr

00005384 <__fini_array_start>:
    5384:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....

20000010 <_impure_ptr>:
20000010:	0014 2000                                   ... 

20000014 <impure_data>:
20000014:	0000 0000 52a8 0000 52c8 0000 5288 0000     .....R...R...R..
	...
